// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for CoreDebugger namespace.
//     This code was generated by a tool.
//     Date : 5/5/2017 11:42:58 AM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
#if true
namespace CoreDebugger
{

    // Disable warning : XML comment is not placed on a valid language element
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain']/*"/>	
    /// <unmanaged>ICorDebugAppDomain</unmanaged>	
    /// <unmanaged-short>ICorDebugAppDomain</unmanaged-short>	
    [Guid("3d6f5f63-7538-11d3-8d5b-00104b35e7ef")]
    public partial class AppDomain : CoreDebugger.Controller
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.AppDomain"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public AppDomain(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.AppDomain"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.AppDomain(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.AppDomain(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::GetProcess']/*"/>	
        /// <unmanaged>GetProcess</unmanaged>	
        /// <unmanaged-short>GetProcess</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::GetProcess([In] ICorDebugProcess** ppProcess)</unmanaged>
        public CoreDebugger.Process Process
        {
            get { CoreDebugger.Process __output__; GetProcess(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::GetObjectW']/*"/>	
        /// <unmanaged>GetObjectW</unmanaged>	
        /// <unmanaged-short>GetObjectW</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::GetObjectW([In] ICorDebugValue** ppObject)</unmanaged>
        public CoreDebugger.Value ObjectW
        {
            get { CoreDebugger.Value __output__; GetObjectW(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::GetProcess']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::GetProcess([In] ICorDebugProcess** ppProcess)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain::GetProcess</unmanaged-short>	
        internal void GetProcess(out CoreDebugger.Process processOut)
        {
            unsafe
            {
                IntPtr processOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &processOut_, ((void**)(*(void**)_nativePointer))[13]);
                processOut = (processOut_ == IntPtr.Zero) ? null : new CoreDebugger.Process(processOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="assembliesOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::EnumerateAssemblies']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::EnumerateAssemblies([In] ICorDebugAssemblyEnum** ppAssemblies)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain::EnumerateAssemblies</unmanaged-short>	
        public void EnumerateAssemblies(out CoreDebugger.AssemblyEnum assembliesOut)
        {
            unsafe
            {
                IntPtr assembliesOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &assembliesOut_, ((void**)(*(void**)_nativePointer))[14]);
                assembliesOut = (assembliesOut_ == IntPtr.Zero) ? null : new CoreDebugger.AssemblyEnum(assembliesOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="iMetaDataRef">No documentation.</param>	
        /// <param name="moduleOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::GetModuleFromMetaDataInterface']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::GetModuleFromMetaDataInterface([In] IUnknown* pIMetaData,[In] ICorDebugModule** ppModule)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain::GetModuleFromMetaDataInterface</unmanaged-short>	
        public void GetModuleFromMetaDataInterface(SharpDX.ComObject iMetaDataRef, out CoreDebugger.Module moduleOut)
        {
            unsafe
            {
                IntPtr moduleOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((iMetaDataRef == null) ? IntPtr.Zero : iMetaDataRef.NativePointer), &moduleOut_, ((void**)(*(void**)_nativePointer))[15]);
                moduleOut = (moduleOut_ == IntPtr.Zero) ? null : new CoreDebugger.Module(moduleOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="breakpointsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::EnumerateBreakpoints']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::EnumerateBreakpoints([In] ICorDebugBreakpointEnum** ppBreakpoints)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain::EnumerateBreakpoints</unmanaged-short>	
        public void EnumerateBreakpoints(out CoreDebugger.BreakpointEnum breakpointsOut)
        {
            unsafe
            {
                IntPtr breakpointsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &breakpointsOut_, ((void**)(*(void**)_nativePointer))[16]);
                breakpointsOut = (breakpointsOut_ == IntPtr.Zero) ? null : new CoreDebugger.BreakpointEnum(breakpointsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="steppersOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::EnumerateSteppers']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::EnumerateSteppers([In] ICorDebugStepperEnum** ppSteppers)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain::EnumerateSteppers</unmanaged-short>	
        public void EnumerateSteppers(out CoreDebugger.StepperEnum steppersOut)
        {
            unsafe
            {
                IntPtr steppersOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &steppersOut_, ((void**)(*(void**)_nativePointer))[17]);
                steppersOut = (steppersOut_ == IntPtr.Zero) ? null : new CoreDebugger.StepperEnum(steppersOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bAttachedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::IsAttached']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::IsAttached([In] BOOL* pbAttached)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain::IsAttached</unmanaged-short>	
        public void IsAttached(SharpDX.Mathematics.Interop.RawBool bAttachedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bAttachedRef, ((void**)(*(void**)_nativePointer))[18]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::GetName']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::GetName([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain::GetName</unmanaged-short>	
        public void GetName(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[19]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="objectOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::GetObjectW']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::GetObjectW([In] ICorDebugValue** ppObject)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain::GetObjectW</unmanaged-short>	
        internal void GetObjectW(out CoreDebugger.Value objectOut)
        {
            unsafe
            {
                IntPtr objectOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &objectOut_, ((void**)(*(void**)_nativePointer))[20]);
                objectOut = (objectOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(objectOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::Attach']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::Attach()</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain::Attach</unmanaged-short>	
        public void Attach()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[21]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="idRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain::GetID']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain::GetID([In] unsigned int* pId)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain::GetID</unmanaged-short>	
        public void GetID(int idRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &idRef, ((void**)(*(void**)_nativePointer))[22]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain2']/*"/>	
    /// <unmanaged>ICorDebugAppDomain2</unmanaged>	
    /// <unmanaged-short>ICorDebugAppDomain2</unmanaged-short>	
    [Guid("096E81D5-ECDA-4202-83F5-C65980A9EF75")]
    public partial class AppDomain2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.AppDomain2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public AppDomain2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.AppDomain2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.AppDomain2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.AppDomain2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="elementType">No documentation.</param>	
        /// <param name="nRank">No documentation.</param>	
        /// <param name="typeArgRef">No documentation.</param>	
        /// <param name="typeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain2::GetArrayOrPointerType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain2::GetArrayOrPointerType([In] unsigned int elementType,[In] unsigned int nRank,[In] ICorDebugType* pTypeArg,[In] ICorDebugType** ppType)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain2::GetArrayOrPointerType</unmanaged-short>	
        public void GetArrayOrPointerType(int elementType, int nRank, CoreDebugger.Type typeArgRef, out CoreDebugger.Type typeOut)
        {
            unsafe
            {
                IntPtr typeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, elementType, nRank, (void*)((typeArgRef == null) ? IntPtr.Zero : typeArgRef.NativePointer), &typeOut_, ((void**)(*(void**)_nativePointer))[3]);
                typeOut = (typeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Type(typeOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nTypeArgs">No documentation.</param>	
        /// <param name="typeArgsOut">No documentation.</param>	
        /// <param name="typeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain2::GetFunctionPointerType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain2::GetFunctionPointerType([In] unsigned int nTypeArgs,[In] ICorDebugType** ppTypeArgs,[In] ICorDebugType** ppType)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain2::GetFunctionPointerType</unmanaged-short>	
        public void GetFunctionPointerType(int nTypeArgs, out CoreDebugger.Type typeArgsOut, out CoreDebugger.Type typeOut)
        {
            unsafe
            {
                IntPtr typeArgsOut_ = IntPtr.Zero;
                IntPtr typeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, nTypeArgs, &typeArgsOut_, &typeOut_, ((void**)(*(void**)_nativePointer))[4]);
                typeArgsOut = (typeArgsOut_ == IntPtr.Zero) ? null : new CoreDebugger.Type(typeArgsOut_);
                typeOut = (typeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Type(typeOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain3']/*"/>	
    /// <unmanaged>ICorDebugAppDomain3</unmanaged>	
    /// <unmanaged-short>ICorDebugAppDomain3</unmanaged-short>	
    [Guid("8CB96A16-B588-42E2-B71C-DD849FC2ECCC")]
    public partial class AppDomain3 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.AppDomain3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public AppDomain3(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.AppDomain3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.AppDomain3(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.AppDomain3(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain3::GetCachedWinRTTypes']/*"/>	
        /// <unmanaged>GetCachedWinRTTypes</unmanaged>	
        /// <unmanaged-short>GetCachedWinRTTypes</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugAppDomain3::GetCachedWinRTTypes([In] ICorDebugGuidToTypeEnum** ppGuidToTypeEnum)</unmanaged>
        public CoreDebugger.GuidToTypeEnum CachedWinRTTypes
        {
            get { CoreDebugger.GuidToTypeEnum __output__; GetCachedWinRTTypes(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cReqTypes">No documentation.</param>	
        /// <param name="iidsToResolve">No documentation.</param>	
        /// <param name="typesEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain3::GetCachedWinRTTypesForIIDs']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain3::GetCachedWinRTTypesForIIDs([In] unsigned int cReqTypes,[In] GUID* iidsToResolve,[In] ICorDebugTypeEnum** ppTypesEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain3::GetCachedWinRTTypesForIIDs</unmanaged-short>	
        public void GetCachedWinRTTypesForIIDs(int cReqTypes, System.Guid iidsToResolve, out CoreDebugger.TypeEnum typesEnumOut)
        {
            unsafe
            {
                IntPtr typesEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cReqTypes, &iidsToResolve, &typesEnumOut_, ((void**)(*(void**)_nativePointer))[3]);
                typesEnumOut = (typesEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.TypeEnum(typesEnumOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="guidToTypeEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain3::GetCachedWinRTTypes']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain3::GetCachedWinRTTypes([In] ICorDebugGuidToTypeEnum** ppGuidToTypeEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain3::GetCachedWinRTTypes</unmanaged-short>	
        internal void GetCachedWinRTTypes(out CoreDebugger.GuidToTypeEnum guidToTypeEnumOut)
        {
            unsafe
            {
                IntPtr guidToTypeEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &guidToTypeEnumOut_, ((void**)(*(void**)_nativePointer))[4]);
                guidToTypeEnumOut = (guidToTypeEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.GuidToTypeEnum(guidToTypeEnumOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain4']/*"/>	
    /// <unmanaged>ICorDebugAppDomain4</unmanaged>	
    /// <unmanaged-short>ICorDebugAppDomain4</unmanaged-short>	
    [Guid("FB99CC40-83BE-4724-AB3B-768E796EBAC2")]
    public partial class AppDomain4 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.AppDomain4"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public AppDomain4(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.AppDomain4"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.AppDomain4(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.AppDomain4(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="ccwPointer">No documentation.</param>	
        /// <param name="managedObjectOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomain4::GetObjectForCCW']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomain4::GetObjectForCCW([In] unsigned longlong ccwPointer,[In] ICorDebugValue** ppManagedObject)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomain4::GetObjectForCCW</unmanaged-short>	
        public void GetObjectForCCW(long ccwPointer, out CoreDebugger.Value managedObjectOut)
        {
            unsafe
            {
                IntPtr managedObjectOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ccwPointer, &managedObjectOut_, ((void**)(*(void**)_nativePointer))[3]);
                managedObjectOut = (managedObjectOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(managedObjectOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomainEnum']/*"/>	
    /// <unmanaged>ICorDebugAppDomainEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugAppDomainEnum</unmanaged-short>	
    [Guid("63ca1b24-4359-4883-bd57-13f815f58744")]
    public partial class AppDomainEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.AppDomainEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public AppDomainEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.AppDomainEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.AppDomainEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.AppDomainEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="values">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAppDomainEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAppDomainEnum::Next([In] unsigned int celt,[In] ICorDebugAppDomain** values,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugAppDomainEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.AppDomain values, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr values_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &values_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                values = (values_ == IntPtr.Zero) ? null : new CoreDebugger.AppDomain(values_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugArrayValue']/*"/>	
    /// <unmanaged>ICorDebugArrayValue</unmanaged>	
    /// <unmanaged-short>ICorDebugArrayValue</unmanaged-short>	
    [Guid("0405B0DF-A660-11d2-BD02-0000F80849BD")]
    public partial class ArrayValue : CoreDebugger.HeapValue
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ArrayValue"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ArrayValue(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ArrayValue"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ArrayValue(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ArrayValue(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="typeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugArrayValue::GetElementType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugArrayValue::GetElementType([In] unsigned int* pType)</unmanaged>	
        /// <unmanaged-short>ICorDebugArrayValue::GetElementType</unmanaged-short>	
        public void GetElementType(int typeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &typeRef, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nRankRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugArrayValue::GetRank']/*"/>	
        /// <unmanaged>HRESULT ICorDebugArrayValue::GetRank([In] unsigned int* pnRank)</unmanaged>	
        /// <unmanaged-short>ICorDebugArrayValue::GetRank</unmanaged-short>	
        public void GetRank(int nRankRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &nRankRef, ((void**)(*(void**)_nativePointer))[10]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nCountRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugArrayValue::GetCount']/*"/>	
        /// <unmanaged>HRESULT ICorDebugArrayValue::GetCount([In] unsigned int* pnCount)</unmanaged>	
        /// <unmanaged-short>ICorDebugArrayValue::GetCount</unmanaged-short>	
        public void GetCount(int nCountRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &nCountRef, ((void**)(*(void**)_nativePointer))[11]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cdim">No documentation.</param>	
        /// <param name="dims">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugArrayValue::GetDimensions']/*"/>	
        /// <unmanaged>HRESULT ICorDebugArrayValue::GetDimensions([In] unsigned int cdim,[In] unsigned int* dims)</unmanaged>	
        /// <unmanaged-short>ICorDebugArrayValue::GetDimensions</unmanaged-short>	
        public void GetDimensions(int cdim, int dims)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cdim, &dims, ((void**)(*(void**)_nativePointer))[12]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bHasBaseIndiciesRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugArrayValue::HasBaseIndicies']/*"/>	
        /// <unmanaged>HRESULT ICorDebugArrayValue::HasBaseIndicies([In] BOOL* pbHasBaseIndicies)</unmanaged>	
        /// <unmanaged-short>ICorDebugArrayValue::HasBaseIndicies</unmanaged-short>	
        public void HasBaseIndicies(SharpDX.Mathematics.Interop.RawBool bHasBaseIndiciesRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bHasBaseIndiciesRef, ((void**)(*(void**)_nativePointer))[13]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cdim">No documentation.</param>	
        /// <param name="indicies">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugArrayValue::GetBaseIndicies']/*"/>	
        /// <unmanaged>HRESULT ICorDebugArrayValue::GetBaseIndicies([In] unsigned int cdim,[In] unsigned int* indicies)</unmanaged>	
        /// <unmanaged-short>ICorDebugArrayValue::GetBaseIndicies</unmanaged-short>	
        public void GetBaseIndicies(int cdim, int indicies)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cdim, &indicies, ((void**)(*(void**)_nativePointer))[14]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cdim">No documentation.</param>	
        /// <param name="indices">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugArrayValue::GetElement']/*"/>	
        /// <unmanaged>HRESULT ICorDebugArrayValue::GetElement([In] unsigned int cdim,[In] unsigned int* indices,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugArrayValue::GetElement</unmanaged-short>	
        public void GetElement(int cdim, int indices, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cdim, &indices, &valueOut_, ((void**)(*(void**)_nativePointer))[15]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nPosition">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugArrayValue::GetElementAtPosition']/*"/>	
        /// <unmanaged>HRESULT ICorDebugArrayValue::GetElementAtPosition([In] unsigned int nPosition,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugArrayValue::GetElementAtPosition</unmanaged-short>	
        public void GetElementAtPosition(int nPosition, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, nPosition, &valueOut_, ((void**)(*(void**)_nativePointer))[16]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly']/*"/>	
    /// <unmanaged>ICorDebugAssembly</unmanaged>	
    /// <unmanaged-short>ICorDebugAssembly</unmanaged-short>	
    [Guid("df59507c-d47a-459e-bce2-6427eac8fd06")]
    public partial class Assembly : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Assembly"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Assembly(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Assembly"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Assembly(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Assembly(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly::GetProcess']/*"/>	
        /// <unmanaged>GetProcess</unmanaged>	
        /// <unmanaged-short>GetProcess</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugAssembly::GetProcess([In] ICorDebugProcess** ppProcess)</unmanaged>
        public CoreDebugger.Process Process
        {
            get { CoreDebugger.Process __output__; GetProcess(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly::GetAppDomain']/*"/>	
        /// <unmanaged>GetAppDomain</unmanaged>	
        /// <unmanaged-short>GetAppDomain</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugAssembly::GetAppDomain([In] ICorDebugAppDomain** ppAppDomain)</unmanaged>
        public CoreDebugger.AppDomain AppDomain
        {
            get { CoreDebugger.AppDomain __output__; GetAppDomain(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly::GetProcess']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAssembly::GetProcess([In] ICorDebugProcess** ppProcess)</unmanaged>	
        /// <unmanaged-short>ICorDebugAssembly::GetProcess</unmanaged-short>	
        internal void GetProcess(out CoreDebugger.Process processOut)
        {
            unsafe
            {
                IntPtr processOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &processOut_, ((void**)(*(void**)_nativePointer))[3]);
                processOut = (processOut_ == IntPtr.Zero) ? null : new CoreDebugger.Process(processOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly::GetAppDomain']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAssembly::GetAppDomain([In] ICorDebugAppDomain** ppAppDomain)</unmanaged>	
        /// <unmanaged-short>ICorDebugAssembly::GetAppDomain</unmanaged-short>	
        internal void GetAppDomain(out CoreDebugger.AppDomain appDomainOut)
        {
            unsafe
            {
                IntPtr appDomainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &appDomainOut_, ((void**)(*(void**)_nativePointer))[4]);
                appDomainOut = (appDomainOut_ == IntPtr.Zero) ? null : new CoreDebugger.AppDomain(appDomainOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="modulesOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly::EnumerateModules']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAssembly::EnumerateModules([In] ICorDebugModuleEnum** ppModules)</unmanaged>	
        /// <unmanaged-short>ICorDebugAssembly::EnumerateModules</unmanaged-short>	
        public void EnumerateModules(out CoreDebugger.ModuleEnum modulesOut)
        {
            unsafe
            {
                IntPtr modulesOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &modulesOut_, ((void**)(*(void**)_nativePointer))[5]);
                modulesOut = (modulesOut_ == IntPtr.Zero) ? null : new CoreDebugger.ModuleEnum(modulesOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly::GetCodeBase']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAssembly::GetCodeBase([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugAssembly::GetCodeBase</unmanaged-short>	
        public void GetCodeBase(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly::GetName']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAssembly::GetName([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugAssembly::GetName</unmanaged-short>	
        public void GetName(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly2']/*"/>	
    /// <unmanaged>ICorDebugAssembly2</unmanaged>	
    /// <unmanaged-short>ICorDebugAssembly2</unmanaged-short>	
    [Guid("426d1f9e-6dd4-44c8-aec7-26cdbaf4e398")]
    public partial class Assembly2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Assembly2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Assembly2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Assembly2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Assembly2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Assembly2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bFullyTrustedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly2::IsFullyTrusted']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAssembly2::IsFullyTrusted([In] BOOL* pbFullyTrusted)</unmanaged>	
        /// <unmanaged-short>ICorDebugAssembly2::IsFullyTrusted</unmanaged-short>	
        public void IsFullyTrusted(SharpDX.Mathematics.Interop.RawBool bFullyTrustedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bFullyTrustedRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly3']/*"/>	
    /// <unmanaged>ICorDebugAssembly3</unmanaged>	
    /// <unmanaged-short>ICorDebugAssembly3</unmanaged-short>	
    [Guid("76361AB2-8C86-4FE9-96F2-F73D8843570A")]
    public partial class Assembly3 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Assembly3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Assembly3(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Assembly3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Assembly3(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Assembly3(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly3::GetContainerAssembly']/*"/>	
        /// <unmanaged>GetContainerAssembly</unmanaged>	
        /// <unmanaged-short>GetContainerAssembly</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugAssembly3::GetContainerAssembly([In] ICorDebugAssembly** ppAssembly)</unmanaged>
        public CoreDebugger.Assembly ContainerAssembly
        {
            get { CoreDebugger.Assembly __output__; GetContainerAssembly(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="assemblyOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly3::GetContainerAssembly']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAssembly3::GetContainerAssembly([In] ICorDebugAssembly** ppAssembly)</unmanaged>	
        /// <unmanaged-short>ICorDebugAssembly3::GetContainerAssembly</unmanaged-short>	
        internal void GetContainerAssembly(out CoreDebugger.Assembly assemblyOut)
        {
            unsafe
            {
                IntPtr assemblyOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &assemblyOut_, ((void**)(*(void**)_nativePointer))[3]);
                assemblyOut = (assemblyOut_ == IntPtr.Zero) ? null : new CoreDebugger.Assembly(assemblyOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="assembliesOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssembly3::EnumerateContainedAssemblies']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAssembly3::EnumerateContainedAssemblies([In] ICorDebugAssemblyEnum** ppAssemblies)</unmanaged>	
        /// <unmanaged-short>ICorDebugAssembly3::EnumerateContainedAssemblies</unmanaged-short>	
        public void EnumerateContainedAssemblies(out CoreDebugger.AssemblyEnum assembliesOut)
        {
            unsafe
            {
                IntPtr assembliesOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &assembliesOut_, ((void**)(*(void**)_nativePointer))[4]);
                assembliesOut = (assembliesOut_ == IntPtr.Zero) ? null : new CoreDebugger.AssemblyEnum(assembliesOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssemblyEnum']/*"/>	
    /// <unmanaged>ICorDebugAssemblyEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugAssemblyEnum</unmanaged-short>	
    [Guid("4a2a1ec9-85ec-4bfb-9f15-a89fdfe0fe83")]
    public partial class AssemblyEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.AssemblyEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public AssemblyEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.AssemblyEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.AssemblyEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.AssemblyEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="values">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugAssemblyEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugAssemblyEnum::Next([In] unsigned int celt,[In] ICorDebugAssembly** values,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugAssemblyEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.Assembly values, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr values_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &values_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                values = (values_ == IntPtr.Zero) ? null : new CoreDebugger.Assembly(values_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugBlockingObjectEnum']/*"/>	
    /// <unmanaged>ICorDebugBlockingObjectEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugBlockingObjectEnum</unmanaged-short>	
    [Guid("976A6278-134A-4a81-81A3-8F277943F4C3")]
    public partial class BlockingObjectEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.BlockingObjectEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public BlockingObjectEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.BlockingObjectEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.BlockingObjectEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.BlockingObjectEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="values">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugBlockingObjectEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugBlockingObjectEnum::Next([In] unsigned int celt,[In] CorDebugBlockingObject* values,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugBlockingObjectEnum::Next</unmanaged-short>	
        public void Next(int celt, CoreDebugger.CorDebugBlockingObject values, int celtFetchedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &values, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugBoxValue']/*"/>	
    /// <unmanaged>ICorDebugBoxValue</unmanaged>	
    /// <unmanaged-short>ICorDebugBoxValue</unmanaged-short>	
    [Guid("CC7BCAFC-8A68-11d2-983C-0000F808342D")]
    public partial class BoxValue : CoreDebugger.HeapValue
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.BoxValue"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public BoxValue(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.BoxValue"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.BoxValue(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.BoxValue(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugBoxValue::GetObjectW']/*"/>	
        /// <unmanaged>GetObjectW</unmanaged>	
        /// <unmanaged-short>GetObjectW</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugBoxValue::GetObjectW([In] ICorDebugObjectValue** ppObject)</unmanaged>
        public CoreDebugger.ObjectValue ObjectW
        {
            get { CoreDebugger.ObjectValue __output__; GetObjectW(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="objectOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugBoxValue::GetObjectW']/*"/>	
        /// <unmanaged>HRESULT ICorDebugBoxValue::GetObjectW([In] ICorDebugObjectValue** ppObject)</unmanaged>	
        /// <unmanaged-short>ICorDebugBoxValue::GetObjectW</unmanaged-short>	
        internal void GetObjectW(out CoreDebugger.ObjectValue objectOut)
        {
            unsafe
            {
                IntPtr objectOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &objectOut_, ((void**)(*(void**)_nativePointer))[9]);
                objectOut = (objectOut_ == IntPtr.Zero) ? null : new CoreDebugger.ObjectValue(objectOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugBreakpoint']/*"/>	
    /// <unmanaged>ICorDebugBreakpoint</unmanaged>	
    /// <unmanaged-short>ICorDebugBreakpoint</unmanaged-short>	
    [Guid("CC7BCAE8-8A68-11d2-983C-0000F808342D")]
    public partial class Breakpoint : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Breakpoint"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Breakpoint(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Breakpoint"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Breakpoint(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Breakpoint(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bActive">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugBreakpoint::Activate']/*"/>	
        /// <unmanaged>HRESULT ICorDebugBreakpoint::Activate([In] BOOL bActive)</unmanaged>	
        /// <unmanaged-short>ICorDebugBreakpoint::Activate</unmanaged-short>	
        public void Activate(SharpDX.Mathematics.Interop.RawBool bActive)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, bActive, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bActiveRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugBreakpoint::IsActive']/*"/>	
        /// <unmanaged>HRESULT ICorDebugBreakpoint::IsActive([In] BOOL* pbActive)</unmanaged>	
        /// <unmanaged-short>ICorDebugBreakpoint::IsActive</unmanaged-short>	
        public void IsActive(SharpDX.Mathematics.Interop.RawBool bActiveRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bActiveRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugBreakpointEnum']/*"/>	
    /// <unmanaged>ICorDebugBreakpointEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugBreakpointEnum</unmanaged-short>	
    [Guid("CC7BCB03-8A68-11d2-983C-0000F808342D")]
    public partial class BreakpointEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.BreakpointEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public BreakpointEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.BreakpointEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.BreakpointEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.BreakpointEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="breakpoints">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugBreakpointEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugBreakpointEnum::Next([In] unsigned int celt,[In] ICorDebugBreakpoint** breakpoints,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugBreakpointEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.Breakpoint breakpoints, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr breakpoints_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &breakpoints_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                breakpoints = (breakpoints_ == IntPtr.Zero) ? null : new CoreDebugger.Breakpoint(breakpoints_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain']/*"/>	
    /// <unmanaged>ICorDebugChain</unmanaged>	
    /// <unmanaged-short>ICorDebugChain</unmanaged-short>	
    [Guid("CC7BCAEE-8A68-11d2-983C-0000F808342D")]
    public partial class Chain : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Chain"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Chain(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Chain"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Chain(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Chain(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetThread']/*"/>	
        /// <unmanaged>GetThread</unmanaged>	
        /// <unmanaged-short>GetThread</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugChain::GetThread([In] ICorDebugThread** ppThread)</unmanaged>
        public CoreDebugger.Thread Thread
        {
            get { CoreDebugger.Thread __output__; GetThread(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetContext']/*"/>	
        /// <unmanaged>GetContext</unmanaged>	
        /// <unmanaged-short>GetContext</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugChain::GetContext([In] ICorDebugContext** ppContext)</unmanaged>
        public CoreDebugger.Context Context
        {
            get { CoreDebugger.Context __output__; GetContext(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetCaller']/*"/>	
        /// <unmanaged>GetCaller</unmanaged>	
        /// <unmanaged-short>GetCaller</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugChain::GetCaller([In] ICorDebugChain** ppChain)</unmanaged>
        public CoreDebugger.Chain Caller
        {
            get { CoreDebugger.Chain __output__; GetCaller(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetCallee']/*"/>	
        /// <unmanaged>GetCallee</unmanaged>	
        /// <unmanaged-short>GetCallee</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugChain::GetCallee([In] ICorDebugChain** ppChain)</unmanaged>
        public CoreDebugger.Chain Callee
        {
            get { CoreDebugger.Chain __output__; GetCallee(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetPrevious']/*"/>	
        /// <unmanaged>GetPrevious</unmanaged>	
        /// <unmanaged-short>GetPrevious</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugChain::GetPrevious([In] ICorDebugChain** ppChain)</unmanaged>
        public CoreDebugger.Chain Previous
        {
            get { CoreDebugger.Chain __output__; GetPrevious(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetNext']/*"/>	
        /// <unmanaged>GetNext</unmanaged>	
        /// <unmanaged-short>GetNext</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugChain::GetNext([In] ICorDebugChain** ppChain)</unmanaged>
        public CoreDebugger.Chain Next
        {
            get { CoreDebugger.Chain __output__; GetNext(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetActiveFrame']/*"/>	
        /// <unmanaged>GetActiveFrame</unmanaged>	
        /// <unmanaged-short>GetActiveFrame</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugChain::GetActiveFrame([In] ICorDebugFrame** ppFrame)</unmanaged>
        public CoreDebugger.Frame ActiveFrame
        {
            get { CoreDebugger.Frame __output__; GetActiveFrame(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetRegisterSet']/*"/>	
        /// <unmanaged>GetRegisterSet</unmanaged>	
        /// <unmanaged-short>GetRegisterSet</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugChain::GetRegisterSet([In] ICorDebugRegisterSet** ppRegisters)</unmanaged>
        public CoreDebugger.RegisterSet RegisterSet
        {
            get { CoreDebugger.RegisterSet __output__; GetRegisterSet(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetThread']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::GetThread([In] ICorDebugThread** ppThread)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::GetThread</unmanaged-short>	
        internal void GetThread(out CoreDebugger.Thread threadOut)
        {
            unsafe
            {
                IntPtr threadOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &threadOut_, ((void**)(*(void**)_nativePointer))[3]);
                threadOut = (threadOut_ == IntPtr.Zero) ? null : new CoreDebugger.Thread(threadOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="startRef">No documentation.</param>	
        /// <param name="endRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetStackRange']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::GetStackRange([In] unsigned longlong* pStart,[In] unsigned longlong* pEnd)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::GetStackRange</unmanaged-short>	
        public void GetStackRange(long startRef, long endRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &startRef, &endRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="contextOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetContext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::GetContext([In] ICorDebugContext** ppContext)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::GetContext</unmanaged-short>	
        internal void GetContext(out CoreDebugger.Context contextOut)
        {
            unsafe
            {
                IntPtr contextOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &contextOut_, ((void**)(*(void**)_nativePointer))[5]);
                contextOut = (contextOut_ == IntPtr.Zero) ? null : new CoreDebugger.Context(contextOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="chainOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetCaller']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::GetCaller([In] ICorDebugChain** ppChain)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::GetCaller</unmanaged-short>	
        internal void GetCaller(out CoreDebugger.Chain chainOut)
        {
            unsafe
            {
                IntPtr chainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &chainOut_, ((void**)(*(void**)_nativePointer))[6]);
                chainOut = (chainOut_ == IntPtr.Zero) ? null : new CoreDebugger.Chain(chainOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="chainOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetCallee']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::GetCallee([In] ICorDebugChain** ppChain)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::GetCallee</unmanaged-short>	
        internal void GetCallee(out CoreDebugger.Chain chainOut)
        {
            unsafe
            {
                IntPtr chainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &chainOut_, ((void**)(*(void**)_nativePointer))[7]);
                chainOut = (chainOut_ == IntPtr.Zero) ? null : new CoreDebugger.Chain(chainOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="chainOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetPrevious']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::GetPrevious([In] ICorDebugChain** ppChain)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::GetPrevious</unmanaged-short>	
        internal void GetPrevious(out CoreDebugger.Chain chainOut)
        {
            unsafe
            {
                IntPtr chainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &chainOut_, ((void**)(*(void**)_nativePointer))[8]);
                chainOut = (chainOut_ == IntPtr.Zero) ? null : new CoreDebugger.Chain(chainOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="chainOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetNext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::GetNext([In] ICorDebugChain** ppChain)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::GetNext</unmanaged-short>	
        internal void GetNext(out CoreDebugger.Chain chainOut)
        {
            unsafe
            {
                IntPtr chainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &chainOut_, ((void**)(*(void**)_nativePointer))[9]);
                chainOut = (chainOut_ == IntPtr.Zero) ? null : new CoreDebugger.Chain(chainOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="managedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::IsManaged']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::IsManaged([In] BOOL* pManaged)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::IsManaged</unmanaged-short>	
        public void IsManaged(SharpDX.Mathematics.Interop.RawBool managedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &managedRef, ((void**)(*(void**)_nativePointer))[10]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="framesOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::EnumerateFrames']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::EnumerateFrames([In] ICorDebugFrameEnum** ppFrames)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::EnumerateFrames</unmanaged-short>	
        public void EnumerateFrames(out CoreDebugger.FrameEnum framesOut)
        {
            unsafe
            {
                IntPtr framesOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &framesOut_, ((void**)(*(void**)_nativePointer))[11]);
                framesOut = (framesOut_ == IntPtr.Zero) ? null : new CoreDebugger.FrameEnum(framesOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="frameOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetActiveFrame']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::GetActiveFrame([In] ICorDebugFrame** ppFrame)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::GetActiveFrame</unmanaged-short>	
        internal void GetActiveFrame(out CoreDebugger.Frame frameOut)
        {
            unsafe
            {
                IntPtr frameOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &frameOut_, ((void**)(*(void**)_nativePointer))[12]);
                frameOut = (frameOut_ == IntPtr.Zero) ? null : new CoreDebugger.Frame(frameOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="registersOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetRegisterSet']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::GetRegisterSet([In] ICorDebugRegisterSet** ppRegisters)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::GetRegisterSet</unmanaged-short>	
        internal void GetRegisterSet(out CoreDebugger.RegisterSet registersOut)
        {
            unsafe
            {
                IntPtr registersOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &registersOut_, ((void**)(*(void**)_nativePointer))[13]);
                registersOut = (registersOut_ == IntPtr.Zero) ? null : new CoreDebugger.RegisterSet(registersOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="reasonRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChain::GetReason']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChain::GetReason([In] CorDebugChainReason* pReason)</unmanaged>	
        /// <unmanaged-short>ICorDebugChain::GetReason</unmanaged-short>	
        public void GetReason(CoreDebugger.CorDebugChainReason reasonRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &reasonRef, ((void**)(*(void**)_nativePointer))[14]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChainEnum']/*"/>	
    /// <unmanaged>ICorDebugChainEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugChainEnum</unmanaged-short>	
    [Guid("CC7BCB08-8A68-11d2-983C-0000F808342D")]
    public partial class ChainEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ChainEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ChainEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ChainEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ChainEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ChainEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="chains">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugChainEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugChainEnum::Next([In] unsigned int celt,[In] ICorDebugChain** chains,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugChainEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.Chain chains, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr chains_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &chains_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                chains = (chains_ == IntPtr.Zero) ? null : new CoreDebugger.Chain(chains_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugClass']/*"/>	
    /// <unmanaged>ICorDebugClass</unmanaged>	
    /// <unmanaged-short>ICorDebugClass</unmanaged-short>	
    [Guid("CC7BCAF5-8A68-11d2-983C-0000F808342D")]
    public partial class Class : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Class"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Class(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Class"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Class(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Class(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugClass::GetModule']/*"/>	
        /// <unmanaged>GetModule</unmanaged>	
        /// <unmanaged-short>GetModule</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugClass::GetModule([In] ICorDebugModule** pModule)</unmanaged>
        public CoreDebugger.Module Module
        {
            get { CoreDebugger.Module __output__; GetModule(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="moduleRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugClass::GetModule']/*"/>	
        /// <unmanaged>HRESULT ICorDebugClass::GetModule([In] ICorDebugModule** pModule)</unmanaged>	
        /// <unmanaged-short>ICorDebugClass::GetModule</unmanaged-short>	
        internal void GetModule(out CoreDebugger.Module moduleRef)
        {
            unsafe
            {
                IntPtr moduleRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &moduleRef_, ((void**)(*(void**)_nativePointer))[3]);
                moduleRef = (moduleRef_ == IntPtr.Zero) ? null : new CoreDebugger.Module(moduleRef_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="typeDefRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugClass::GetToken']/*"/>	
        /// <unmanaged>HRESULT ICorDebugClass::GetToken([In] unsigned int* pTypeDef)</unmanaged>	
        /// <unmanaged-short>ICorDebugClass::GetToken</unmanaged-short>	
        public void GetToken(int typeDefRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &typeDefRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fieldDef">No documentation.</param>	
        /// <param name="frameRef">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugClass::GetStaticFieldValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugClass::GetStaticFieldValue([In] unsigned int fieldDef,[In] ICorDebugFrame* pFrame,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugClass::GetStaticFieldValue</unmanaged-short>	
        public void GetStaticFieldValue(int fieldDef, CoreDebugger.Frame frameRef, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, fieldDef, (void*)((frameRef == null) ? IntPtr.Zero : frameRef.NativePointer), &valueOut_, ((void**)(*(void**)_nativePointer))[5]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugClass2']/*"/>	
    /// <unmanaged>ICorDebugClass2</unmanaged>	
    /// <unmanaged-short>ICorDebugClass2</unmanaged-short>	
    [Guid("B008EA8D-7AB1-43f7-BB20-FBB5A04038AE")]
    public partial class Class2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Class2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Class2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Class2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Class2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Class2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugClass2::SetJMCStatus']/*"/>	
        /// <unmanaged>SetJMCStatus</unmanaged>	
        /// <unmanaged-short>SetJMCStatus</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugClass2::SetJMCStatus([In] BOOL bIsJustMyCode)</unmanaged>
        public SharpDX.Mathematics.Interop.RawBool JMCStatus
        {
            set { SetJMCStatus(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="elementType">No documentation.</param>	
        /// <param name="nTypeArgs">No documentation.</param>	
        /// <param name="typeArgsOut">No documentation.</param>	
        /// <param name="typeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugClass2::GetParameterizedType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugClass2::GetParameterizedType([In] unsigned int elementType,[In] unsigned int nTypeArgs,[In] ICorDebugType** ppTypeArgs,[In] ICorDebugType** ppType)</unmanaged>	
        /// <unmanaged-short>ICorDebugClass2::GetParameterizedType</unmanaged-short>	
        public void GetParameterizedType(int elementType, int nTypeArgs, out CoreDebugger.Type typeArgsOut, out CoreDebugger.Type typeOut)
        {
            unsafe
            {
                IntPtr typeArgsOut_ = IntPtr.Zero;
                IntPtr typeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, elementType, nTypeArgs, &typeArgsOut_, &typeOut_, ((void**)(*(void**)_nativePointer))[3]);
                typeArgsOut = (typeArgsOut_ == IntPtr.Zero) ? null : new CoreDebugger.Type(typeArgsOut_);
                typeOut = (typeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Type(typeOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bIsJustMyCode">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugClass2::SetJMCStatus']/*"/>	
        /// <unmanaged>HRESULT ICorDebugClass2::SetJMCStatus([In] BOOL bIsJustMyCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugClass2::SetJMCStatus</unmanaged-short>	
        internal void SetJMCStatus(SharpDX.Mathematics.Interop.RawBool bIsJustMyCode)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, bIsJustMyCode, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode']/*"/>	
    /// <unmanaged>ICorDebugCode</unmanaged>	
    /// <unmanaged-short>ICorDebugCode</unmanaged-short>	
    [Guid("CC7BCAF4-8A68-11d2-983C-0000F808342D")]
    public partial class Code : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Code"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Code(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Code"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Code(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Code(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode::GetFunction']/*"/>	
        /// <unmanaged>GetFunction</unmanaged>	
        /// <unmanaged-short>GetFunction</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugCode::GetFunction([In] ICorDebugFunction** ppFunction)</unmanaged>
        public CoreDebugger.Function Function
        {
            get { CoreDebugger.Function __output__; GetFunction(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bILRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode::IsIL']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode::IsIL([In] BOOL* pbIL)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode::IsIL</unmanaged-short>	
        public void IsIL(SharpDX.Mathematics.Interop.RawBool bILRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bILRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="functionOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode::GetFunction']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode::GetFunction([In] ICorDebugFunction** ppFunction)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode::GetFunction</unmanaged-short>	
        internal void GetFunction(out CoreDebugger.Function functionOut)
        {
            unsafe
            {
                IntPtr functionOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &functionOut_, ((void**)(*(void**)_nativePointer))[4]);
                functionOut = (functionOut_ == IntPtr.Zero) ? null : new CoreDebugger.Function(functionOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="startRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode::GetAddress']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode::GetAddress([In] unsigned longlong* pStart)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode::GetAddress</unmanaged-short>	
        public void GetAddress(long startRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &startRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cBytesRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode::GetSize']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode::GetSize([In] unsigned int* pcBytes)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode::GetSize</unmanaged-short>	
        public void GetSize(int cBytesRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &cBytesRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="offset">No documentation.</param>	
        /// <param name="breakpointOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode::CreateBreakpoint']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode::CreateBreakpoint([In] unsigned int offset,[In] ICorDebugFunctionBreakpoint** ppBreakpoint)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode::CreateBreakpoint</unmanaged-short>	
        public void CreateBreakpoint(int offset, out CoreDebugger.FunctionBreakpoint breakpointOut)
        {
            unsafe
            {
                IntPtr breakpointOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, offset, &breakpointOut_, ((void**)(*(void**)_nativePointer))[7]);
                breakpointOut = (breakpointOut_ == IntPtr.Zero) ? null : new CoreDebugger.FunctionBreakpoint(breakpointOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="startOffset">No documentation.</param>	
        /// <param name="endOffset">No documentation.</param>	
        /// <param name="cBufferAlloc">No documentation.</param>	
        /// <param name="buffer">No documentation.</param>	
        /// <param name="cBufferSizeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode::GetCode']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode::GetCode([In] unsigned int startOffset,[In] unsigned int endOffset,[In] unsigned int cBufferAlloc,[In] unsigned char* buffer,[In] unsigned int* pcBufferSize)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode::GetCode</unmanaged-short>	
        public void GetCode(int startOffset, int endOffset, int cBufferAlloc, byte buffer, int cBufferSizeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, startOffset, endOffset, cBufferAlloc, &buffer, &cBufferSizeRef, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nVersion">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode::GetVersionNumber']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode::GetVersionNumber([In] unsigned int* nVersion)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode::GetVersionNumber</unmanaged-short>	
        public void GetVersionNumber(int nVersion)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &nVersion, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cMap">No documentation.</param>	
        /// <param name="cMapRef">No documentation.</param>	
        /// <param name="map">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode::GetILToNativeMapping']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode::GetILToNativeMapping([In] unsigned int cMap,[In] unsigned int* pcMap,[In] COR_DEBUG_IL_TO_NATIVE_MAP* map)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode::GetILToNativeMapping</unmanaged-short>	
        public void GetILToNativeMapping(int cMap, int cMapRef, CoreDebugger.CorDebugIlToNativeMap map)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cMap, &cMapRef, &map, ((void**)(*(void**)_nativePointer))[10]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cMap">No documentation.</param>	
        /// <param name="cMapRef">No documentation.</param>	
        /// <param name="offsets">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode::GetEnCRemapSequencePoints']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode::GetEnCRemapSequencePoints([In] unsigned int cMap,[In] unsigned int* pcMap,[In] unsigned int* offsets)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode::GetEnCRemapSequencePoints</unmanaged-short>	
        public void GetEnCRemapSequencePoints(int cMap, int cMapRef, int offsets)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cMap, &cMapRef, &offsets, ((void**)(*(void**)_nativePointer))[11]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode2']/*"/>	
    /// <unmanaged>ICorDebugCode2</unmanaged>	
    /// <unmanaged-short>ICorDebugCode2</unmanaged-short>	
    [Guid("5F696509-452F-4436-A3FE-4D11FE7E2347")]
    public partial class Code2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Code2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Code2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Code2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Code2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Code2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbufSize">No documentation.</param>	
        /// <param name="cnumChunksRef">No documentation.</param>	
        /// <param name="chunks">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode2::GetCodeChunks']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode2::GetCodeChunks([In] unsigned int cbufSize,[In] unsigned int* pcnumChunks,[In] CodeChunkInfo* chunks)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode2::GetCodeChunks</unmanaged-short>	
        public void GetCodeChunks(int cbufSize, int cnumChunksRef, CoreDebugger.CodeChunkInfo chunks)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cbufSize, &cnumChunksRef, &chunks, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwFlagsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode2::GetCompilerFlags']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode2::GetCompilerFlags([In] unsigned int* pdwFlags)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode2::GetCompilerFlags</unmanaged-short>	
        public void GetCompilerFlags(int dwFlagsRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &dwFlagsRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode3']/*"/>	
    /// <unmanaged>ICorDebugCode3</unmanaged>	
    /// <unmanaged-short>ICorDebugCode3</unmanaged-short>	
    [Guid("D13D3E88-E1F2-4020-AA1D-3D162DCBE966")]
    public partial class Code3 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Code3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Code3(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Code3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Code3(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Code3(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="iLoffset">No documentation.</param>	
        /// <param name="bufferSize">No documentation.</param>	
        /// <param name="fetchedRef">No documentation.</param>	
        /// <param name="offsetsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode3::GetReturnValueLiveOffset']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode3::GetReturnValueLiveOffset([In] unsigned int ILoffset,[In] unsigned int bufferSize,[In] unsigned int* pFetched,[In] unsigned int* pOffsets)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode3::GetReturnValueLiveOffset</unmanaged-short>	
        public void GetReturnValueLiveOffset(int iLoffset, int bufferSize, int fetchedRef, int offsetsRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, iLoffset, bufferSize, &fetchedRef, &offsetsRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode4']/*"/>	
    /// <unmanaged>ICorDebugCode4</unmanaged>	
    /// <unmanaged-short>ICorDebugCode4</unmanaged-short>	
    [Guid("18221fa4-20cb-40fa-b19d-9f91c4fa8c14")]
    public partial class Code4 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Code4"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Code4(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Code4"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Code4(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Code4(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="enumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCode4::EnumerateVariableHomes']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCode4::EnumerateVariableHomes([In] ICorDebugVariableHomeEnum** ppEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugCode4::EnumerateVariableHomes</unmanaged-short>	
        public void EnumerateVariableHomes(out CoreDebugger.VariableHomeEnum enumOut)
        {
            unsafe
            {
                IntPtr enumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &enumOut_, ((void**)(*(void**)_nativePointer))[3]);
                enumOut = (enumOut_ == IntPtr.Zero) ? null : new CoreDebugger.VariableHomeEnum(enumOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCodeEnum']/*"/>	
    /// <unmanaged>ICorDebugCodeEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugCodeEnum</unmanaged-short>	
    [Guid("55E96461-9645-45e4-A2FF-0367877ABCDE")]
    public partial class CodeEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.CodeEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public CodeEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.CodeEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.CodeEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.CodeEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="values">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugCodeEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugCodeEnum::Next([In] unsigned int celt,[In] ICorDebugCode** values,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugCodeEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.Code values, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr values_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &values_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                values = (values_ == IntPtr.Zero) ? null : new CoreDebugger.Code(values_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugComObjectValue']/*"/>	
    /// <unmanaged>ICorDebugComObjectValue</unmanaged>	
    /// <unmanaged-short>ICorDebugComObjectValue</unmanaged-short>	
    [Guid("5F69C5E5-3E12-42DF-B371-F9D761D6EE24")]
    public partial class ComObjectValue : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ComObjectValue"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ComObjectValue(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ComObjectValue"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ComObjectValue(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ComObjectValue(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bIInspectableOnly">No documentation.</param>	
        /// <param name="interfacesEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugComObjectValue::GetCachedInterfaceTypes']/*"/>	
        /// <unmanaged>HRESULT ICorDebugComObjectValue::GetCachedInterfaceTypes([In] BOOL bIInspectableOnly,[In] ICorDebugTypeEnum** ppInterfacesEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugComObjectValue::GetCachedInterfaceTypes</unmanaged-short>	
        public void GetCachedInterfaceTypes(SharpDX.Mathematics.Interop.RawBool bIInspectableOnly, out CoreDebugger.TypeEnum interfacesEnumOut)
        {
            unsafe
            {
                IntPtr interfacesEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint43(_nativePointer, bIInspectableOnly, &interfacesEnumOut_, ((void**)(*(void**)_nativePointer))[3]);
                interfacesEnumOut = (interfacesEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.TypeEnum(interfacesEnumOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bIInspectableOnly">No documentation.</param>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="cEltFetchedRef">No documentation.</param>	
        /// <param name="trsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugComObjectValue::GetCachedInterfacePointers']/*"/>	
        /// <unmanaged>HRESULT ICorDebugComObjectValue::GetCachedInterfacePointers([In] BOOL bIInspectableOnly,[In] unsigned int celt,[In] unsigned int* pcEltFetched,[In] unsigned longlong* ptrs)</unmanaged>	
        /// <unmanaged-short>ICorDebugComObjectValue::GetCachedInterfacePointers</unmanaged-short>	
        public void GetCachedInterfacePointers(SharpDX.Mathematics.Interop.RawBool bIInspectableOnly, int celt, int cEltFetchedRef, long trsRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint55(_nativePointer, bIInspectableOnly, celt, &cEltFetchedRef, &trsRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugContext']/*"/>	
    /// <unmanaged>ICorDebugContext</unmanaged>	
    /// <unmanaged-short>ICorDebugContext</unmanaged-short>	
    [Guid("CC7BCB00-8A68-11d2-983C-0000F808342D")]
    public partial class Context : CoreDebugger.ObjectValue
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Context"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Context(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Context"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Context(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Context(nativePointer);
        }

    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugController']/*"/>	
    /// <unmanaged>ICorDebugController</unmanaged>	
    /// <unmanaged-short>ICorDebugController</unmanaged-short>	
    [Guid("3d6f5f62-7538-11d3-8d5b-00104b35e7ef")]
    public partial class Controller : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Controller"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Controller(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Controller"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Controller(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Controller(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwTimeoutIgnored">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugController::Stop']/*"/>	
        /// <unmanaged>HRESULT ICorDebugController::Stop([In] unsigned int dwTimeoutIgnored)</unmanaged>	
        /// <unmanaged-short>ICorDebugController::Stop</unmanaged-short>	
        public void Stop(int dwTimeoutIgnored)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, dwTimeoutIgnored, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fIsOutOfBand">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugController::Continue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugController::Continue([In] BOOL fIsOutOfBand)</unmanaged>	
        /// <unmanaged-short>ICorDebugController::Continue</unmanaged-short>	
        public void Continue(SharpDX.Mathematics.Interop.RawBool fIsOutOfBand)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, fIsOutOfBand, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bRunningRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugController::IsRunning']/*"/>	
        /// <unmanaged>HRESULT ICorDebugController::IsRunning([In] BOOL* pbRunning)</unmanaged>	
        /// <unmanaged-short>ICorDebugController::IsRunning</unmanaged-short>	
        public void IsRunning(SharpDX.Mathematics.Interop.RawBool bRunningRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bRunningRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="bQueuedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugController::HasQueuedCallbacks']/*"/>	
        /// <unmanaged>HRESULT ICorDebugController::HasQueuedCallbacks([In] ICorDebugThread* pThread,[In] BOOL* pbQueued)</unmanaged>	
        /// <unmanaged-short>ICorDebugController::HasQueuedCallbacks</unmanaged-short>	
        public void HasQueuedCallbacks(CoreDebugger.Thread threadRef, SharpDX.Mathematics.Interop.RawBool bQueuedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((threadRef == null) ? IntPtr.Zero : threadRef.NativePointer), &bQueuedRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugController::EnumerateThreads']/*"/>	
        /// <unmanaged>HRESULT ICorDebugController::EnumerateThreads([In] ICorDebugThreadEnum** ppThreads)</unmanaged>	
        /// <unmanaged-short>ICorDebugController::EnumerateThreads</unmanaged-short>	
        public void EnumerateThreads(out CoreDebugger.ThreadEnum threadsOut)
        {
            unsafe
            {
                IntPtr threadsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &threadsOut_, ((void**)(*(void**)_nativePointer))[7]);
                threadsOut = (threadsOut_ == IntPtr.Zero) ? null : new CoreDebugger.ThreadEnum(threadsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="state">No documentation.</param>	
        /// <param name="exceptThisThreadRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugController::SetAllThreadsDebugState']/*"/>	
        /// <unmanaged>HRESULT ICorDebugController::SetAllThreadsDebugState([In] CorDebugThreadState state,[In] ICorDebugThread* pExceptThisThread)</unmanaged>	
        /// <unmanaged-short>ICorDebugController::SetAllThreadsDebugState</unmanaged-short>	
        public void SetAllThreadsDebugState(CoreDebugger.CorDebugThreadState state, CoreDebugger.Thread exceptThisThreadRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)state), (void*)((exceptThisThreadRef == null) ? IntPtr.Zero : exceptThisThreadRef.NativePointer), ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugController::Detach']/*"/>	
        /// <unmanaged>HRESULT ICorDebugController::Detach()</unmanaged>	
        /// <unmanaged-short>ICorDebugController::Detach</unmanaged-short>	
        public void Detach()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="exitCode">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugController::Terminate']/*"/>	
        /// <unmanaged>HRESULT ICorDebugController::Terminate([In] unsigned int exitCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugController::Terminate</unmanaged-short>	
        public void Terminate(int exitCode)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, exitCode, ((void**)(*(void**)_nativePointer))[10]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cSnapshots">No documentation.</param>	
        /// <param name="snapshotsRef">No documentation.</param>	
        /// <param name="errorRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugController::CanCommitChanges']/*"/>	
        /// <unmanaged>HRESULT ICorDebugController::CanCommitChanges([In] unsigned int cSnapshots,[In] ICorDebugEditAndContinueSnapshot** pSnapshots,[In] ICorDebugErrorInfoEnum** pError)</unmanaged>	
        /// <unmanaged-short>ICorDebugController::CanCommitChanges</unmanaged-short>	
        public void CanCommitChanges(int cSnapshots, out CoreDebugger.EditAndContinueSnapshot snapshotsRef, out CoreDebugger.ErrorInfoEnum errorRef)
        {
            unsafe
            {
                IntPtr snapshotsRef_ = IntPtr.Zero;
                IntPtr errorRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cSnapshots, &snapshotsRef_, &errorRef_, ((void**)(*(void**)_nativePointer))[11]);
                snapshotsRef = (snapshotsRef_ == IntPtr.Zero) ? null : new CoreDebugger.EditAndContinueSnapshot(snapshotsRef_);
                errorRef = (errorRef_ == IntPtr.Zero) ? null : new CoreDebugger.ErrorInfoEnum(errorRef_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cSnapshots">No documentation.</param>	
        /// <param name="snapshotsRef">No documentation.</param>	
        /// <param name="errorRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugController::CommitChanges']/*"/>	
        /// <unmanaged>HRESULT ICorDebugController::CommitChanges([In] unsigned int cSnapshots,[In] ICorDebugEditAndContinueSnapshot** pSnapshots,[In] ICorDebugErrorInfoEnum** pError)</unmanaged>	
        /// <unmanaged-short>ICorDebugController::CommitChanges</unmanaged-short>	
        public void CommitChanges(int cSnapshots, out CoreDebugger.EditAndContinueSnapshot snapshotsRef, out CoreDebugger.ErrorInfoEnum errorRef)
        {
            unsafe
            {
                IntPtr snapshotsRef_ = IntPtr.Zero;
                IntPtr errorRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cSnapshots, &snapshotsRef_, &errorRef_, ((void**)(*(void**)_nativePointer))[12]);
                snapshotsRef = (snapshotsRef_ == IntPtr.Zero) ? null : new CoreDebugger.EditAndContinueSnapshot(snapshotsRef_);
                errorRef = (errorRef_ == IntPtr.Zero) ? null : new CoreDebugger.ErrorInfoEnum(errorRef_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget']/*"/>	
    /// <unmanaged>ICorDebugDataTarget</unmanaged>	
    /// <unmanaged-short>ICorDebugDataTarget</unmanaged-short>	
    [Guid("FE06DC28-49FB-4636-A4A3-E80DB4AE116C")]
    public partial class DataTarget : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.DataTarget"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public DataTarget(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.DataTarget"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.DataTarget(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.DataTarget(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="targetPlatformRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget::GetPlatform']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDataTarget::GetPlatform([In] CorDebugPlatform* pTargetPlatform)</unmanaged>	
        /// <unmanaged-short>ICorDebugDataTarget::GetPlatform</unmanaged-short>	
        public void GetPlatform(CoreDebugger.CorDebugPlatform targetPlatformRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &targetPlatformRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="address">No documentation.</param>	
        /// <param name="bufferRef">No documentation.</param>	
        /// <param name="bytesRequested">No documentation.</param>	
        /// <param name="bytesReadRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget::ReadVirtual']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDataTarget::ReadVirtual([In] unsigned longlong address,[In] unsigned char* pBuffer,[In] unsigned int bytesRequested,[In] unsigned int* pBytesRead)</unmanaged>	
        /// <unmanaged-short>ICorDebugDataTarget::ReadVirtual</unmanaged-short>	
        public void ReadVirtual(long address, byte bufferRef, int bytesRequested, int bytesReadRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, address, &bufferRef, bytesRequested, &bytesReadRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwThreadID">No documentation.</param>	
        /// <param name="contextFlags">No documentation.</param>	
        /// <param name="contextSize">No documentation.</param>	
        /// <param name="contextRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget::GetThreadContext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDataTarget::GetThreadContext([In] unsigned int dwThreadID,[In] unsigned int contextFlags,[In] unsigned int contextSize,[In] unsigned char* pContext)</unmanaged>	
        /// <unmanaged-short>ICorDebugDataTarget::GetThreadContext</unmanaged-short>	
        public void GetThreadContext(int dwThreadID, int contextFlags, int contextSize, byte contextRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, dwThreadID, contextFlags, contextSize, &contextRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget2']/*"/>	
    /// <unmanaged>ICorDebugDataTarget2</unmanaged>	
    /// <unmanaged-short>ICorDebugDataTarget2</unmanaged-short>	
    [Guid("2eb364da-605b-4e8d-b333-3394c4828d41")]
    public partial class DataTarget2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.DataTarget2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public DataTarget2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.DataTarget2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.DataTarget2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.DataTarget2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="addr">No documentation.</param>	
        /// <param name="imageBaseRef">No documentation.</param>	
        /// <param name="sizeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget2::GetImageFromPointer']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDataTarget2::GetImageFromPointer([In] unsigned longlong addr,[In] unsigned longlong* pImageBase,[In] unsigned int* pSize)</unmanaged>	
        /// <unmanaged-short>ICorDebugDataTarget2::GetImageFromPointer</unmanaged-short>	
        public void GetImageFromPointer(long addr, long imageBaseRef, int sizeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, addr, &imageBaseRef, &sizeRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="baseAddress">No documentation.</param>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget2::GetImageLocation']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDataTarget2::GetImageLocation([In] unsigned longlong baseAddress,[In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugDataTarget2::GetImageLocation</unmanaged-short>	
        public void GetImageLocation(long baseAddress, int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, baseAddress, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="imageBaseAddress">No documentation.</param>	
        /// <param name="symProviderOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget2::GetSymbolProviderForImage']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDataTarget2::GetSymbolProviderForImage([In] unsigned longlong imageBaseAddress,[In] ICorDebugSymbolProvider** ppSymProvider)</unmanaged>	
        /// <unmanaged-short>ICorDebugDataTarget2::GetSymbolProviderForImage</unmanaged-short>	
        public void GetSymbolProviderForImage(long imageBaseAddress, out CoreDebugger.SymbolProvider symProviderOut)
        {
            unsafe
            {
                IntPtr symProviderOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, imageBaseAddress, &symProviderOut_, ((void**)(*(void**)_nativePointer))[5]);
                symProviderOut = (symProviderOut_ == IntPtr.Zero) ? null : new CoreDebugger.SymbolProvider(symProviderOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cThreadIds">No documentation.</param>	
        /// <param name="cThreadIdsRef">No documentation.</param>	
        /// <param name="threadIdsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget2::EnumerateThreadIDs']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDataTarget2::EnumerateThreadIDs([In] unsigned int cThreadIds,[In] unsigned int* pcThreadIds,[In] unsigned int* pThreadIds)</unmanaged>	
        /// <unmanaged-short>ICorDebugDataTarget2::EnumerateThreadIDs</unmanaged-short>	
        public void EnumerateThreadIDs(int cThreadIds, int cThreadIdsRef, int threadIdsRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cThreadIds, &cThreadIdsRef, &threadIdsRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nativeThreadID">No documentation.</param>	
        /// <param name="contextFlags">No documentation.</param>	
        /// <param name="cbContext">No documentation.</param>	
        /// <param name="initialContext">No documentation.</param>	
        /// <param name="unwinderOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget2::CreateVirtualUnwinder']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDataTarget2::CreateVirtualUnwinder([In] unsigned int nativeThreadID,[In] unsigned int contextFlags,[In] unsigned int cbContext,[In] unsigned char* initialContext,[In] ICorDebugVirtualUnwinder** ppUnwinder)</unmanaged>	
        /// <unmanaged-short>ICorDebugDataTarget2::CreateVirtualUnwinder</unmanaged-short>	
        public void CreateVirtualUnwinder(int nativeThreadID, int contextFlags, int cbContext, byte initialContext, out CoreDebugger.VirtualUnwinder unwinderOut)
        {
            unsafe
            {
                IntPtr unwinderOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, nativeThreadID, contextFlags, cbContext, &initialContext, &unwinderOut_, ((void**)(*(void**)_nativePointer))[7]);
                unwinderOut = (unwinderOut_ == IntPtr.Zero) ? null : new CoreDebugger.VirtualUnwinder(unwinderOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget3']/*"/>	
    /// <unmanaged>ICorDebugDataTarget3</unmanaged>	
    /// <unmanaged-short>ICorDebugDataTarget3</unmanaged-short>	
    [Guid("D05E60C3-848C-4E7D-894E-623320FF6AFA")]
    public partial class DataTarget3 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.DataTarget3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public DataTarget3(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.DataTarget3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.DataTarget3(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.DataTarget3(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cRequestedModules">No documentation.</param>	
        /// <param name="cFetchedModulesRef">No documentation.</param>	
        /// <param name="loadedModulesRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget3::GetLoadedModules']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDataTarget3::GetLoadedModules([In] unsigned int cRequestedModules,[In] unsigned int* pcFetchedModules,[In] ICorDebugLoadedModule** pLoadedModules)</unmanaged>	
        /// <unmanaged-short>ICorDebugDataTarget3::GetLoadedModules</unmanaged-short>	
        public void GetLoadedModules(int cRequestedModules, int cFetchedModulesRef, out CoreDebugger.LoadedModule loadedModulesRef)
        {
            unsafe
            {
                IntPtr loadedModulesRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cRequestedModules, &cFetchedModulesRef, &loadedModulesRef_, ((void**)(*(void**)_nativePointer))[3]);
                loadedModulesRef = (loadedModulesRef_ == IntPtr.Zero) ? null : new CoreDebugger.LoadedModule(loadedModulesRef_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget4']/*"/>	
    /// <unmanaged>ICorDebugDataTarget4</unmanaged>	
    /// <unmanaged-short>ICorDebugDataTarget4</unmanaged-short>	
    [Guid("E799DC06-E099-4713-BDD9-906D3CC02CF2")]
    public partial class DataTarget4 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.DataTarget4"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public DataTarget4(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.DataTarget4"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.DataTarget4(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.DataTarget4(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadId">No documentation.</param>	
        /// <param name="contextSize">No documentation.</param>	
        /// <param name="context">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDataTarget4::VirtualUnwind']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDataTarget4::VirtualUnwind([In] unsigned int threadId,[In] unsigned int contextSize,[In] unsigned char* context)</unmanaged>	
        /// <unmanaged-short>ICorDebugDataTarget4::VirtualUnwind</unmanaged-short>	
        public void VirtualUnwind(int threadId, int contextSize, byte context)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, threadId, contextSize, &context, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDebugEvent']/*"/>	
    /// <unmanaged>ICorDebugDebugEvent</unmanaged>	
    /// <unmanaged-short>ICorDebugDebugEvent</unmanaged-short>	
    [Guid("41BD395D-DE99-48F1-BF7A-CC0F44A6D281")]
    public partial class DebugEvent : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.DebugEvent"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public DebugEvent(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.DebugEvent"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.DebugEvent(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.DebugEvent(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDebugEvent::GetThread']/*"/>	
        /// <unmanaged>GetThread</unmanaged>	
        /// <unmanaged-short>GetThread</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugDebugEvent::GetThread([In] ICorDebugThread** ppThread)</unmanaged>
        public CoreDebugger.Thread Thread
        {
            get { CoreDebugger.Thread __output__; GetThread(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="debugEventKindRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDebugEvent::GetEventKind']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDebugEvent::GetEventKind([In] CorDebugDebugEventKind* pDebugEventKind)</unmanaged>	
        /// <unmanaged-short>ICorDebugDebugEvent::GetEventKind</unmanaged-short>	
        public void GetEventKind(CoreDebugger.CorDebugDebugEventKind debugEventKindRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &debugEventKindRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugDebugEvent::GetThread']/*"/>	
        /// <unmanaged>HRESULT ICorDebugDebugEvent::GetThread([In] ICorDebugThread** ppThread)</unmanaged>	
        /// <unmanaged-short>ICorDebugDebugEvent::GetThread</unmanaged-short>	
        internal void GetThread(out CoreDebugger.Thread threadOut)
        {
            unsafe
            {
                IntPtr threadOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &threadOut_, ((void**)(*(void**)_nativePointer))[4]);
                threadOut = (threadOut_ == IntPtr.Zero) ? null : new CoreDebugger.Thread(threadOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueErrorInfo']/*"/>	
    /// <unmanaged>ICorDebugEditAndContinueErrorInfo</unmanaged>	
    /// <unmanaged-short>ICorDebugEditAndContinueErrorInfo</unmanaged-short>	
    [Guid("8D600D41-F4F6-4cb3-B7EC-7BD164944036")]
    public partial class EditAndContinueErrorInfo : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.EditAndContinueErrorInfo"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public EditAndContinueErrorInfo(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.EditAndContinueErrorInfo"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.EditAndContinueErrorInfo(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.EditAndContinueErrorInfo(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueErrorInfo::GetModule']/*"/>	
        /// <unmanaged>GetModule</unmanaged>	
        /// <unmanaged-short>GetModule</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueErrorInfo::GetModule([In] ICorDebugModule** ppModule)</unmanaged>
        public CoreDebugger.Module Module
        {
            get { CoreDebugger.Module __output__; GetModule(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="moduleOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueErrorInfo::GetModule']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueErrorInfo::GetModule([In] ICorDebugModule** ppModule)</unmanaged>	
        /// <unmanaged-short>ICorDebugEditAndContinueErrorInfo::GetModule</unmanaged-short>	
        internal void GetModule(out CoreDebugger.Module moduleOut)
        {
            unsafe
            {
                IntPtr moduleOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &moduleOut_, ((void**)(*(void**)_nativePointer))[3]);
                moduleOut = (moduleOut_ == IntPtr.Zero) ? null : new CoreDebugger.Module(moduleOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="tokenRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueErrorInfo::GetToken']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueErrorInfo::GetToken([In] unsigned int* pToken)</unmanaged>	
        /// <unmanaged-short>ICorDebugEditAndContinueErrorInfo::GetToken</unmanaged-short>	
        public void GetToken(int tokenRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &tokenRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="hrRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueErrorInfo::GetErrorCode']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueErrorInfo::GetErrorCode([In] HRESULT* pHr)</unmanaged>	
        /// <unmanaged-short>ICorDebugEditAndContinueErrorInfo::GetErrorCode</unmanaged-short>	
        public void GetErrorCode(SharpDX.Result hrRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &hrRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchString">No documentation.</param>	
        /// <param name="cchStringRef">No documentation.</param>	
        /// <param name="szString">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueErrorInfo::GetString']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueErrorInfo::GetString([In] unsigned int cchString,[In] unsigned int* pcchString,[In] wchar_t* szString)</unmanaged>	
        /// <unmanaged-short>ICorDebugEditAndContinueErrorInfo::GetString</unmanaged-short>	
        public void GetString(int cchString, int cchStringRef, string szString)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szString_ = szString)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchString, &cchStringRef, (void*)szString_, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueSnapshot']/*"/>	
    /// <unmanaged>ICorDebugEditAndContinueSnapshot</unmanaged>	
    /// <unmanaged-short>ICorDebugEditAndContinueSnapshot</unmanaged-short>	
    [Guid("6DC3FA01-D7CB-11d2-8A95-0080C792E5D8")]
    public partial class EditAndContinueSnapshot : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.EditAndContinueSnapshot"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public EditAndContinueSnapshot(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.EditAndContinueSnapshot"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.EditAndContinueSnapshot(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.EditAndContinueSnapshot(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueSnapshot::SetPEBytes']/*"/>	
        /// <unmanaged>SetPEBytes</unmanaged>	
        /// <unmanaged-short>SetPEBytes</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueSnapshot::SetPEBytes([In] IStream* pIStream)</unmanaged>
        public System.IntPtr PEBytes_
        {
            set { SetPEBytes_(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueSnapshot::SetPESymbolBytes']/*"/>	
        /// <unmanaged>SetPESymbolBytes</unmanaged>	
        /// <unmanaged-short>SetPESymbolBytes</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueSnapshot::SetPESymbolBytes([In] IStream* pIStream)</unmanaged>
        public System.IntPtr PESymbolBytes_
        {
            set { SetPESymbolBytes_(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="iStreamRef">No documentation.</param>	
        /// <param name="mvidRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueSnapshot::CopyMetaData']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueSnapshot::CopyMetaData([In] IStream* pIStream,[In] GUID* pMvid)</unmanaged>	
        /// <unmanaged-short>ICorDebugEditAndContinueSnapshot::CopyMetaData</unmanaged-short>	
        internal void CopyMetaData_(System.IntPtr iStreamRef, System.Guid mvidRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)iStreamRef, &mvidRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="mvidRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueSnapshot::GetMvid']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueSnapshot::GetMvid([In] GUID* pMvid)</unmanaged>	
        /// <unmanaged-short>ICorDebugEditAndContinueSnapshot::GetMvid</unmanaged-short>	
        public void GetMvid(System.Guid mvidRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &mvidRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="roDataRVARef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueSnapshot::GetRoDataRVA']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueSnapshot::GetRoDataRVA([In] unsigned int* pRoDataRVA)</unmanaged>	
        /// <unmanaged-short>ICorDebugEditAndContinueSnapshot::GetRoDataRVA</unmanaged-short>	
        public void GetRoDataRVA(int roDataRVARef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &roDataRVARef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="rwDataRVARef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueSnapshot::GetRwDataRVA']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueSnapshot::GetRwDataRVA([In] unsigned int* pRwDataRVA)</unmanaged>	
        /// <unmanaged-short>ICorDebugEditAndContinueSnapshot::GetRwDataRVA</unmanaged-short>	
        public void GetRwDataRVA(int rwDataRVARef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &rwDataRVARef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="iStreamRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueSnapshot::SetPEBytes']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueSnapshot::SetPEBytes([In] IStream* pIStream)</unmanaged>	
        /// <unmanaged-short>ICorDebugEditAndContinueSnapshot::SetPEBytes</unmanaged-short>	
        internal void SetPEBytes_(System.IntPtr iStreamRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)iStreamRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="mdFunction">No documentation.</param>	
        /// <param name="cMapSize">No documentation.</param>	
        /// <param name="map">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueSnapshot::SetILMap']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueSnapshot::SetILMap([In] unsigned int mdFunction,[In] unsigned int cMapSize,[In] COR_IL_MAP* map)</unmanaged>	
        /// <unmanaged-short>ICorDebugEditAndContinueSnapshot::SetILMap</unmanaged-short>	
        public void SetILMap(int mdFunction, int cMapSize, CoreDebugger.CorIlMap map)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, mdFunction, cMapSize, &map, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="iStreamRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEditAndContinueSnapshot::SetPESymbolBytes']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEditAndContinueSnapshot::SetPESymbolBytes([In] IStream* pIStream)</unmanaged>	
        /// <unmanaged-short>ICorDebugEditAndContinueSnapshot::SetPESymbolBytes</unmanaged-short>	
        internal void SetPESymbolBytes_(System.IntPtr iStreamRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)iStreamRef, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEnum']/*"/>	
    /// <unmanaged>ICorDebugEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugEnum</unmanaged-short>	
    [Guid("CC7BCB01-8A68-11d2-983C-0000F808342D")]
    public partial class Enum : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Enum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Enum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Enum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Enum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Enum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEnum::Skip']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEnum::Skip([In] unsigned int celt)</unmanaged>	
        /// <unmanaged-short>ICorDebugEnum::Skip</unmanaged-short>	
        public void Skip(int celt)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEnum::Reset']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEnum::Reset()</unmanaged>	
        /// <unmanaged-short>ICorDebugEnum::Reset</unmanaged-short>	
        public void Reset()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="enumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEnum::Clone']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEnum::Clone([In] ICorDebugEnum** ppEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugEnum::Clone</unmanaged-short>	
        public void Clone(out CoreDebugger.Enum enumOut)
        {
            unsafe
            {
                IntPtr enumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &enumOut_, ((void**)(*(void**)_nativePointer))[5]);
                enumOut = (enumOut_ == IntPtr.Zero) ? null : new CoreDebugger.Enum(enumOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celtRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEnum::GetCount']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEnum::GetCount([In] unsigned int* pcelt)</unmanaged>	
        /// <unmanaged-short>ICorDebugEnum::GetCount</unmanaged-short>	
        public void GetCount(int celtRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &celtRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugErrorInfoEnum']/*"/>	
    /// <unmanaged>ICorDebugErrorInfoEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugErrorInfoEnum</unmanaged-short>	
    [Guid("F0E18809-72B5-11d2-976F-00A0C9B4D50C")]
    public partial class ErrorInfoEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ErrorInfoEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ErrorInfoEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ErrorInfoEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ErrorInfoEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ErrorInfoEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="errors">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugErrorInfoEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugErrorInfoEnum::Next([In] unsigned int celt,[In] ICorDebugEditAndContinueErrorInfo** errors,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugErrorInfoEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.EditAndContinueErrorInfo errors, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr errors_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &errors_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                errors = (errors_ == IntPtr.Zero) ? null : new CoreDebugger.EditAndContinueErrorInfo(errors_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval']/*"/>	
    /// <unmanaged>ICorDebugEval</unmanaged>	
    /// <unmanaged-short>ICorDebugEval</unmanaged-short>	
    [Guid("CC7BCAF6-8A68-11d2-983C-0000F808342D")]
    public partial class Eval : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Eval"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Eval(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Eval"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Eval(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Eval(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::GetResult']/*"/>	
        /// <unmanaged>GetResult</unmanaged>	
        /// <unmanaged-short>GetResult</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugEval::GetResult([In] ICorDebugValue** ppResult)</unmanaged>
        public CoreDebugger.Value Result
        {
            get { CoreDebugger.Value __output__; GetResult(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::GetThread']/*"/>	
        /// <unmanaged>GetThread</unmanaged>	
        /// <unmanaged-short>GetThread</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugEval::GetThread([In] ICorDebugThread** ppThread)</unmanaged>
        public CoreDebugger.Thread Thread
        {
            get { CoreDebugger.Thread __output__; GetThread(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="functionRef">No documentation.</param>	
        /// <param name="nArgs">No documentation.</param>	
        /// <param name="argsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::CallFunction']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval::CallFunction([In] ICorDebugFunction* pFunction,[In] unsigned int nArgs,[In] ICorDebugValue** ppArgs)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval::CallFunction</unmanaged-short>	
        public void CallFunction(CoreDebugger.Function functionRef, int nArgs, out CoreDebugger.Value argsOut)
        {
            unsafe
            {
                IntPtr argsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((functionRef == null) ? IntPtr.Zero : functionRef.NativePointer), nArgs, &argsOut_, ((void**)(*(void**)_nativePointer))[3]);
                argsOut = (argsOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(argsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="constructorRef">No documentation.</param>	
        /// <param name="nArgs">No documentation.</param>	
        /// <param name="argsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::NewObject']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval::NewObject([In] ICorDebugFunction* pConstructor,[In] unsigned int nArgs,[In] ICorDebugValue** ppArgs)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval::NewObject</unmanaged-short>	
        public void NewObject(CoreDebugger.Function constructorRef, int nArgs, out CoreDebugger.Value argsOut)
        {
            unsafe
            {
                IntPtr argsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((constructorRef == null) ? IntPtr.Zero : constructorRef.NativePointer), nArgs, &argsOut_, ((void**)(*(void**)_nativePointer))[4]);
                argsOut = (argsOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(argsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="classRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::NewObjectNoConstructor']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval::NewObjectNoConstructor([In] ICorDebugClass* pClass)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval::NewObjectNoConstructor</unmanaged-short>	
        public void NewObjectNoConstructor(CoreDebugger.Class classRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((classRef == null) ? IntPtr.Zero : classRef.NativePointer), ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="text">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::NewString']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval::NewString([In] const wchar_t* string)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval::NewString</unmanaged-short>	
        public void NewString(string text)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* text_ = text)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)text_, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="elementType">No documentation.</param>	
        /// <param name="elementClassRef">No documentation.</param>	
        /// <param name="rank">No documentation.</param>	
        /// <param name="dims">No documentation.</param>	
        /// <param name="lowBounds">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::NewArray']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval::NewArray([In] unsigned int elementType,[In] ICorDebugClass* pElementClass,[In] unsigned int rank,[In] unsigned int* dims,[In] unsigned int* lowBounds)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval::NewArray</unmanaged-short>	
        public void NewArray(int elementType, CoreDebugger.Class elementClassRef, int rank, int dims, int lowBounds)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, elementType, (void*)((elementClassRef == null) ? IntPtr.Zero : elementClassRef.NativePointer), rank, &dims, &lowBounds, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bActiveRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::IsActive']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval::IsActive([In] BOOL* pbActive)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval::IsActive</unmanaged-short>	
        public void IsActive(SharpDX.Mathematics.Interop.RawBool bActiveRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bActiveRef, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::Abort']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval::Abort()</unmanaged>	
        /// <unmanaged-short>ICorDebugEval::Abort</unmanaged-short>	
        public void Abort()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="resultOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::GetResult']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval::GetResult([In] ICorDebugValue** ppResult)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval::GetResult</unmanaged-short>	
        internal void GetResult(out CoreDebugger.Value resultOut)
        {
            unsafe
            {
                IntPtr resultOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &resultOut_, ((void**)(*(void**)_nativePointer))[10]);
                resultOut = (resultOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(resultOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::GetThread']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval::GetThread([In] ICorDebugThread** ppThread)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval::GetThread</unmanaged-short>	
        internal void GetThread(out CoreDebugger.Thread threadOut)
        {
            unsafe
            {
                IntPtr threadOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &threadOut_, ((void**)(*(void**)_nativePointer))[11]);
                threadOut = (threadOut_ == IntPtr.Zero) ? null : new CoreDebugger.Thread(threadOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="elementType">No documentation.</param>	
        /// <param name="elementClassRef">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval::CreateValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval::CreateValue([In] unsigned int elementType,[In] ICorDebugClass* pElementClass,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval::CreateValue</unmanaged-short>	
        public void CreateValue(int elementType, CoreDebugger.Class elementClassRef, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, elementType, (void*)((elementClassRef == null) ? IntPtr.Zero : elementClassRef.NativePointer), &valueOut_, ((void**)(*(void**)_nativePointer))[12]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval2']/*"/>	
    /// <unmanaged>ICorDebugEval2</unmanaged>	
    /// <unmanaged-short>ICorDebugEval2</unmanaged-short>	
    [Guid("FB0D9CE7-BE66-4683-9D32-A42A04E2FD91")]
    public partial class Eval2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Eval2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Eval2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Eval2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Eval2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Eval2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="functionRef">No documentation.</param>	
        /// <param name="nTypeArgs">No documentation.</param>	
        /// <param name="typeArgsOut">No documentation.</param>	
        /// <param name="nArgs">No documentation.</param>	
        /// <param name="argsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval2::CallParameterizedFunction']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval2::CallParameterizedFunction([In] ICorDebugFunction* pFunction,[In] unsigned int nTypeArgs,[In] ICorDebugType** ppTypeArgs,[In] unsigned int nArgs,[In] ICorDebugValue** ppArgs)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval2::CallParameterizedFunction</unmanaged-short>	
        public void CallParameterizedFunction(CoreDebugger.Function functionRef, int nTypeArgs, out CoreDebugger.Type typeArgsOut, int nArgs, out CoreDebugger.Value argsOut)
        {
            unsafe
            {
                IntPtr typeArgsOut_ = IntPtr.Zero;
                IntPtr argsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((functionRef == null) ? IntPtr.Zero : functionRef.NativePointer), nTypeArgs, &typeArgsOut_, nArgs, &argsOut_, ((void**)(*(void**)_nativePointer))[3]);
                typeArgsOut = (typeArgsOut_ == IntPtr.Zero) ? null : new CoreDebugger.Type(typeArgsOut_);
                argsOut = (argsOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(argsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="typeRef">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval2::CreateValueForType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval2::CreateValueForType([In] ICorDebugType* pType,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval2::CreateValueForType</unmanaged-short>	
        public void CreateValueForType(CoreDebugger.Type typeRef, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((typeRef == null) ? IntPtr.Zero : typeRef.NativePointer), &valueOut_, ((void**)(*(void**)_nativePointer))[4]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="constructorRef">No documentation.</param>	
        /// <param name="nTypeArgs">No documentation.</param>	
        /// <param name="typeArgsOut">No documentation.</param>	
        /// <param name="nArgs">No documentation.</param>	
        /// <param name="argsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval2::NewParameterizedObject']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval2::NewParameterizedObject([In] ICorDebugFunction* pConstructor,[In] unsigned int nTypeArgs,[In] ICorDebugType** ppTypeArgs,[In] unsigned int nArgs,[In] ICorDebugValue** ppArgs)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval2::NewParameterizedObject</unmanaged-short>	
        public void NewParameterizedObject(CoreDebugger.Function constructorRef, int nTypeArgs, out CoreDebugger.Type typeArgsOut, int nArgs, out CoreDebugger.Value argsOut)
        {
            unsafe
            {
                IntPtr typeArgsOut_ = IntPtr.Zero;
                IntPtr argsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((constructorRef == null) ? IntPtr.Zero : constructorRef.NativePointer), nTypeArgs, &typeArgsOut_, nArgs, &argsOut_, ((void**)(*(void**)_nativePointer))[5]);
                typeArgsOut = (typeArgsOut_ == IntPtr.Zero) ? null : new CoreDebugger.Type(typeArgsOut_);
                argsOut = (argsOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(argsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="classRef">No documentation.</param>	
        /// <param name="nTypeArgs">No documentation.</param>	
        /// <param name="typeArgsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval2::NewParameterizedObjectNoConstructor']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval2::NewParameterizedObjectNoConstructor([In] ICorDebugClass* pClass,[In] unsigned int nTypeArgs,[In] ICorDebugType** ppTypeArgs)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval2::NewParameterizedObjectNoConstructor</unmanaged-short>	
        public void NewParameterizedObjectNoConstructor(CoreDebugger.Class classRef, int nTypeArgs, out CoreDebugger.Type typeArgsOut)
        {
            unsafe
            {
                IntPtr typeArgsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((classRef == null) ? IntPtr.Zero : classRef.NativePointer), nTypeArgs, &typeArgsOut_, ((void**)(*(void**)_nativePointer))[6]);
                typeArgsOut = (typeArgsOut_ == IntPtr.Zero) ? null : new CoreDebugger.Type(typeArgsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="elementTypeRef">No documentation.</param>	
        /// <param name="rank">No documentation.</param>	
        /// <param name="dims">No documentation.</param>	
        /// <param name="lowBounds">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval2::NewParameterizedArray']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval2::NewParameterizedArray([In] ICorDebugType* pElementType,[In] unsigned int rank,[In] unsigned int* dims,[In] unsigned int* lowBounds)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval2::NewParameterizedArray</unmanaged-short>	
        public void NewParameterizedArray(CoreDebugger.Type elementTypeRef, int rank, int dims, int lowBounds)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((elementTypeRef == null) ? IntPtr.Zero : elementTypeRef.NativePointer), rank, &dims, &lowBounds, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="text">No documentation.</param>	
        /// <param name="uiLength">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval2::NewStringWithLength']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval2::NewStringWithLength([In] const wchar_t* string,[In] unsigned int uiLength)</unmanaged>	
        /// <unmanaged-short>ICorDebugEval2::NewStringWithLength</unmanaged-short>	
        public void NewStringWithLength(string text, int uiLength)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* text_ = text)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)text_, uiLength, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugEval2::RudeAbort']/*"/>	
        /// <unmanaged>HRESULT ICorDebugEval2::RudeAbort()</unmanaged>	
        /// <unmanaged-short>ICorDebugEval2::RudeAbort</unmanaged-short>	
        public void RudeAbort()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugExceptionDebugEvent']/*"/>	
    /// <unmanaged>ICorDebugExceptionDebugEvent</unmanaged>	
    /// <unmanaged-short>ICorDebugExceptionDebugEvent</unmanaged-short>	
    [Guid("AF79EC94-4752-419C-A626-5FB1CC1A5AB7")]
    public partial class ExceptionDebugEvent : CoreDebugger.DebugEvent
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ExceptionDebugEvent"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ExceptionDebugEvent(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ExceptionDebugEvent"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ExceptionDebugEvent(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ExceptionDebugEvent(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="stackPointerRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugExceptionDebugEvent::GetStackPointer']/*"/>	
        /// <unmanaged>HRESULT ICorDebugExceptionDebugEvent::GetStackPointer([In] unsigned longlong* pStackPointer)</unmanaged>	
        /// <unmanaged-short>ICorDebugExceptionDebugEvent::GetStackPointer</unmanaged-short>	
        public void GetStackPointer(long stackPointerRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &stackPointerRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="iPRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugExceptionDebugEvent::GetNativeIP']/*"/>	
        /// <unmanaged>HRESULT ICorDebugExceptionDebugEvent::GetNativeIP([In] unsigned longlong* pIP)</unmanaged>	
        /// <unmanaged-short>ICorDebugExceptionDebugEvent::GetNativeIP</unmanaged-short>	
        public void GetNativeIP(long iPRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &iPRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwFlagsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugExceptionDebugEvent::GetFlags']/*"/>	
        /// <unmanaged>HRESULT ICorDebugExceptionDebugEvent::GetFlags([In] CorDebugExceptionFlags* pdwFlags)</unmanaged>	
        /// <unmanaged-short>ICorDebugExceptionDebugEvent::GetFlags</unmanaged-short>	
        public void GetFlags(CoreDebugger.CorDebugExceptionFlags dwFlagsRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &dwFlagsRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugExceptionObjectCallStackEnum']/*"/>	
    /// <unmanaged>ICorDebugExceptionObjectCallStackEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugExceptionObjectCallStackEnum</unmanaged-short>	
    [Guid("ED775530-4DC4-41F7-86D0-9E2DEF7DFC66")]
    public partial class ExceptionObjectCallStackEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ExceptionObjectCallStackEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ExceptionObjectCallStackEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ExceptionObjectCallStackEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ExceptionObjectCallStackEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ExceptionObjectCallStackEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="values">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugExceptionObjectCallStackEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugExceptionObjectCallStackEnum::Next([In] unsigned int celt,[In] CorDebugExceptionObjectStackFrame* values,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugExceptionObjectCallStackEnum::Next</unmanaged-short>	
        public void Next(int celt, ref CoreDebugger.CorDebugExceptionObjectStackFrame values, int celtFetchedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* values_ = &values)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, values_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugExceptionObjectValue']/*"/>	
    /// <unmanaged>ICorDebugExceptionObjectValue</unmanaged>	
    /// <unmanaged-short>ICorDebugExceptionObjectValue</unmanaged-short>	
    [Guid("AE4CA65D-59DD-42A2-83A5-57E8A08D8719")]
    public partial class ExceptionObjectValue : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ExceptionObjectValue"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ExceptionObjectValue(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ExceptionObjectValue"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ExceptionObjectValue(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ExceptionObjectValue(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="callStackEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugExceptionObjectValue::EnumerateExceptionCallStack']/*"/>	
        /// <unmanaged>HRESULT ICorDebugExceptionObjectValue::EnumerateExceptionCallStack([In] ICorDebugExceptionObjectCallStackEnum** ppCallStackEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugExceptionObjectValue::EnumerateExceptionCallStack</unmanaged-short>	
        public void EnumerateExceptionCallStack(out CoreDebugger.ExceptionObjectCallStackEnum callStackEnumOut)
        {
            unsafe
            {
                IntPtr callStackEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &callStackEnumOut_, ((void**)(*(void**)_nativePointer))[3]);
                callStackEnumOut = (callStackEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.ExceptionObjectCallStackEnum(callStackEnumOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame']/*"/>	
    /// <unmanaged>ICorDebugFrame</unmanaged>	
    /// <unmanaged-short>ICorDebugFrame</unmanaged-short>	
    [Guid("CC7BCAEF-8A68-11d2-983C-0000F808342D")]
    public partial class Frame : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Frame"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Frame(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Frame"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Frame(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Frame(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetChain']/*"/>	
        /// <unmanaged>GetChain</unmanaged>	
        /// <unmanaged-short>GetChain</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetChain([In] ICorDebugChain** ppChain)</unmanaged>
        public CoreDebugger.Chain Chain
        {
            get { CoreDebugger.Chain __output__; GetChain(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetCode']/*"/>	
        /// <unmanaged>GetCode</unmanaged>	
        /// <unmanaged-short>GetCode</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetCode([In] ICorDebugCode** ppCode)</unmanaged>
        public CoreDebugger.Code Code
        {
            get { CoreDebugger.Code __output__; GetCode(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetFunction']/*"/>	
        /// <unmanaged>GetFunction</unmanaged>	
        /// <unmanaged-short>GetFunction</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetFunction([In] ICorDebugFunction** ppFunction)</unmanaged>
        public CoreDebugger.Function Function
        {
            get { CoreDebugger.Function __output__; GetFunction(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetCaller']/*"/>	
        /// <unmanaged>GetCaller</unmanaged>	
        /// <unmanaged-short>GetCaller</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetCaller([In] ICorDebugFrame** ppFrame)</unmanaged>
        public CoreDebugger.Frame Caller
        {
            get { CoreDebugger.Frame __output__; GetCaller(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetCallee']/*"/>	
        /// <unmanaged>GetCallee</unmanaged>	
        /// <unmanaged-short>GetCallee</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetCallee([In] ICorDebugFrame** ppFrame)</unmanaged>
        public CoreDebugger.Frame Callee
        {
            get { CoreDebugger.Frame __output__; GetCallee(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="chainOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetChain']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetChain([In] ICorDebugChain** ppChain)</unmanaged>	
        /// <unmanaged-short>ICorDebugFrame::GetChain</unmanaged-short>	
        internal void GetChain(out CoreDebugger.Chain chainOut)
        {
            unsafe
            {
                IntPtr chainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &chainOut_, ((void**)(*(void**)_nativePointer))[3]);
                chainOut = (chainOut_ == IntPtr.Zero) ? null : new CoreDebugger.Chain(chainOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="codeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetCode']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetCode([In] ICorDebugCode** ppCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugFrame::GetCode</unmanaged-short>	
        internal void GetCode(out CoreDebugger.Code codeOut)
        {
            unsafe
            {
                IntPtr codeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &codeOut_, ((void**)(*(void**)_nativePointer))[4]);
                codeOut = (codeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Code(codeOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="functionOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetFunction']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetFunction([In] ICorDebugFunction** ppFunction)</unmanaged>	
        /// <unmanaged-short>ICorDebugFrame::GetFunction</unmanaged-short>	
        internal void GetFunction(out CoreDebugger.Function functionOut)
        {
            unsafe
            {
                IntPtr functionOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &functionOut_, ((void**)(*(void**)_nativePointer))[5]);
                functionOut = (functionOut_ == IntPtr.Zero) ? null : new CoreDebugger.Function(functionOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="tokenRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetFunctionToken']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetFunctionToken([In] unsigned int* pToken)</unmanaged>	
        /// <unmanaged-short>ICorDebugFrame::GetFunctionToken</unmanaged-short>	
        public void GetFunctionToken(int tokenRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &tokenRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="startRef">No documentation.</param>	
        /// <param name="endRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetStackRange']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetStackRange([In] unsigned longlong* pStart,[In] unsigned longlong* pEnd)</unmanaged>	
        /// <unmanaged-short>ICorDebugFrame::GetStackRange</unmanaged-short>	
        public void GetStackRange(long startRef, long endRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &startRef, &endRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="frameOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetCaller']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetCaller([In] ICorDebugFrame** ppFrame)</unmanaged>	
        /// <unmanaged-short>ICorDebugFrame::GetCaller</unmanaged-short>	
        internal void GetCaller(out CoreDebugger.Frame frameOut)
        {
            unsafe
            {
                IntPtr frameOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &frameOut_, ((void**)(*(void**)_nativePointer))[8]);
                frameOut = (frameOut_ == IntPtr.Zero) ? null : new CoreDebugger.Frame(frameOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="frameOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::GetCallee']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFrame::GetCallee([In] ICorDebugFrame** ppFrame)</unmanaged>	
        /// <unmanaged-short>ICorDebugFrame::GetCallee</unmanaged-short>	
        internal void GetCallee(out CoreDebugger.Frame frameOut)
        {
            unsafe
            {
                IntPtr frameOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &frameOut_, ((void**)(*(void**)_nativePointer))[9]);
                frameOut = (frameOut_ == IntPtr.Zero) ? null : new CoreDebugger.Frame(frameOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="stepperOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrame::CreateStepper']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFrame::CreateStepper([In] ICorDebugStepper** ppStepper)</unmanaged>	
        /// <unmanaged-short>ICorDebugFrame::CreateStepper</unmanaged-short>	
        public void CreateStepper(out CoreDebugger.Stepper stepperOut)
        {
            unsafe
            {
                IntPtr stepperOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &stepperOut_, ((void**)(*(void**)_nativePointer))[10]);
                stepperOut = (stepperOut_ == IntPtr.Zero) ? null : new CoreDebugger.Stepper(stepperOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrameEnum']/*"/>	
    /// <unmanaged>ICorDebugFrameEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugFrameEnum</unmanaged-short>	
    [Guid("CC7BCB07-8A68-11d2-983C-0000F808342D")]
    public partial class FrameEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.FrameEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public FrameEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.FrameEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.FrameEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.FrameEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="frames">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFrameEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFrameEnum::Next([In] unsigned int celt,[In] ICorDebugFrame** frames,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugFrameEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.Frame frames, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr frames_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &frames_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                frames = (frames_ == IntPtr.Zero) ? null : new CoreDebugger.Frame(frames_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction']/*"/>	
    /// <unmanaged>ICorDebugFunction</unmanaged>	
    /// <unmanaged-short>ICorDebugFunction</unmanaged-short>	
    [Guid("CC7BCAF3-8A68-11d2-983C-0000F808342D")]
    public partial class Function : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Function"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Function(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Function"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Function(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Function(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::GetModule']/*"/>	
        /// <unmanaged>GetModule</unmanaged>	
        /// <unmanaged-short>GetModule</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugFunction::GetModule([In] ICorDebugModule** ppModule)</unmanaged>
        public CoreDebugger.Module Module
        {
            get { CoreDebugger.Module __output__; GetModule(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::GetClass']/*"/>	
        /// <unmanaged>GetClass</unmanaged>	
        /// <unmanaged-short>GetClass</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugFunction::GetClass([In] ICorDebugClass** ppClass)</unmanaged>
        public CoreDebugger.Class Class
        {
            get { CoreDebugger.Class __output__; GetClass(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::GetILCode']/*"/>	
        /// <unmanaged>GetILCode</unmanaged>	
        /// <unmanaged-short>GetILCode</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugFunction::GetILCode([In] ICorDebugCode** ppCode)</unmanaged>
        public CoreDebugger.Code ILCode
        {
            get { CoreDebugger.Code __output__; GetILCode(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::GetNativeCode']/*"/>	
        /// <unmanaged>GetNativeCode</unmanaged>	
        /// <unmanaged-short>GetNativeCode</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugFunction::GetNativeCode([In] ICorDebugCode** ppCode)</unmanaged>
        public CoreDebugger.Code NativeCode
        {
            get { CoreDebugger.Code __output__; GetNativeCode(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="moduleOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::GetModule']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction::GetModule([In] ICorDebugModule** ppModule)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction::GetModule</unmanaged-short>	
        internal void GetModule(out CoreDebugger.Module moduleOut)
        {
            unsafe
            {
                IntPtr moduleOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &moduleOut_, ((void**)(*(void**)_nativePointer))[3]);
                moduleOut = (moduleOut_ == IntPtr.Zero) ? null : new CoreDebugger.Module(moduleOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="classOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::GetClass']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction::GetClass([In] ICorDebugClass** ppClass)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction::GetClass</unmanaged-short>	
        internal void GetClass(out CoreDebugger.Class classOut)
        {
            unsafe
            {
                IntPtr classOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &classOut_, ((void**)(*(void**)_nativePointer))[4]);
                classOut = (classOut_ == IntPtr.Zero) ? null : new CoreDebugger.Class(classOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="methodDefRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::GetToken']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction::GetToken([In] unsigned int* pMethodDef)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction::GetToken</unmanaged-short>	
        public void GetToken(int methodDefRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &methodDefRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="codeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::GetILCode']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction::GetILCode([In] ICorDebugCode** ppCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction::GetILCode</unmanaged-short>	
        internal void GetILCode(out CoreDebugger.Code codeOut)
        {
            unsafe
            {
                IntPtr codeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &codeOut_, ((void**)(*(void**)_nativePointer))[6]);
                codeOut = (codeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Code(codeOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="codeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::GetNativeCode']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction::GetNativeCode([In] ICorDebugCode** ppCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction::GetNativeCode</unmanaged-short>	
        internal void GetNativeCode(out CoreDebugger.Code codeOut)
        {
            unsafe
            {
                IntPtr codeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &codeOut_, ((void**)(*(void**)_nativePointer))[7]);
                codeOut = (codeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Code(codeOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="breakpointOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::CreateBreakpoint']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction::CreateBreakpoint([In] ICorDebugFunctionBreakpoint** ppBreakpoint)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction::CreateBreakpoint</unmanaged-short>	
        public void CreateBreakpoint(out CoreDebugger.FunctionBreakpoint breakpointOut)
        {
            unsafe
            {
                IntPtr breakpointOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &breakpointOut_, ((void**)(*(void**)_nativePointer))[8]);
                breakpointOut = (breakpointOut_ == IntPtr.Zero) ? null : new CoreDebugger.FunctionBreakpoint(breakpointOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="mdSigRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::GetLocalVarSigToken']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction::GetLocalVarSigToken([In] unsigned int* pmdSig)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction::GetLocalVarSigToken</unmanaged-short>	
        public void GetLocalVarSigToken(int mdSigRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &mdSigRef, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nCurrentVersionRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction::GetCurrentVersionNumber']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction::GetCurrentVersionNumber([In] unsigned int* pnCurrentVersion)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction::GetCurrentVersionNumber</unmanaged-short>	
        public void GetCurrentVersionNumber(int nCurrentVersionRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &nCurrentVersionRef, ((void**)(*(void**)_nativePointer))[10]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction2']/*"/>	
    /// <unmanaged>ICorDebugFunction2</unmanaged>	
    /// <unmanaged-short>ICorDebugFunction2</unmanaged-short>	
    [Guid("EF0C490B-94C3-4e4d-B629-DDC134C532D8")]
    public partial class Function2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Function2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Function2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Function2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Function2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Function2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bIsJustMyCode">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction2::SetJMCStatus']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction2::SetJMCStatus([In] BOOL bIsJustMyCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction2::SetJMCStatus</unmanaged-short>	
        public void SetJMCStatus(SharpDX.Mathematics.Interop.RawBool bIsJustMyCode)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, bIsJustMyCode, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bIsJustMyCodeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction2::GetJMCStatus']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction2::GetJMCStatus([In] BOOL* pbIsJustMyCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction2::GetJMCStatus</unmanaged-short>	
        public void GetJMCStatus(SharpDX.Mathematics.Interop.RawBool bIsJustMyCodeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bIsJustMyCodeRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="codeEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction2::EnumerateNativeCode']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction2::EnumerateNativeCode([In] ICorDebugCodeEnum** ppCodeEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction2::EnumerateNativeCode</unmanaged-short>	
        public void EnumerateNativeCode(out CoreDebugger.CodeEnum codeEnumOut)
        {
            unsafe
            {
                IntPtr codeEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &codeEnumOut_, ((void**)(*(void**)_nativePointer))[5]);
                codeEnumOut = (codeEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.CodeEnum(codeEnumOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nVersionRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction2::GetVersionNumber']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction2::GetVersionNumber([In] unsigned int* pnVersion)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction2::GetVersionNumber</unmanaged-short>	
        public void GetVersionNumber(int nVersionRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &nVersionRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction3']/*"/>	
    /// <unmanaged>ICorDebugFunction3</unmanaged>	
    /// <unmanaged-short>ICorDebugFunction3</unmanaged-short>	
    [Guid("09B70F28-E465-482D-99E0-81A165EB0532")]
    public partial class Function3 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Function3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Function3(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Function3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Function3(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Function3(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction3::GetActiveReJitRequestILCode']/*"/>	
        /// <unmanaged>GetActiveReJitRequestILCode</unmanaged>	
        /// <unmanaged-short>GetActiveReJitRequestILCode</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugFunction3::GetActiveReJitRequestILCode([In] ICorDebugILCode** ppReJitedILCode)</unmanaged>
        public CoreDebugger.ILCode ActiveReJitRequestILCode
        {
            get { CoreDebugger.ILCode __output__; GetActiveReJitRequestILCode(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="reJitedILCodeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunction3::GetActiveReJitRequestILCode']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunction3::GetActiveReJitRequestILCode([In] ICorDebugILCode** ppReJitedILCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunction3::GetActiveReJitRequestILCode</unmanaged-short>	
        internal void GetActiveReJitRequestILCode(out CoreDebugger.ILCode reJitedILCodeOut)
        {
            unsafe
            {
                IntPtr reJitedILCodeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &reJitedILCodeOut_, ((void**)(*(void**)_nativePointer))[3]);
                reJitedILCodeOut = (reJitedILCodeOut_ == IntPtr.Zero) ? null : new CoreDebugger.ILCode(reJitedILCodeOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunctionBreakpoint']/*"/>	
    /// <unmanaged>ICorDebugFunctionBreakpoint</unmanaged>	
    /// <unmanaged-short>ICorDebugFunctionBreakpoint</unmanaged-short>	
    [Guid("CC7BCAE9-8A68-11d2-983C-0000F808342D")]
    public partial class FunctionBreakpoint : CoreDebugger.Breakpoint
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.FunctionBreakpoint"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public FunctionBreakpoint(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.FunctionBreakpoint"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.FunctionBreakpoint(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.FunctionBreakpoint(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunctionBreakpoint::GetFunction']/*"/>	
        /// <unmanaged>GetFunction</unmanaged>	
        /// <unmanaged-short>GetFunction</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugFunctionBreakpoint::GetFunction([In] ICorDebugFunction** ppFunction)</unmanaged>
        public CoreDebugger.Function Function
        {
            get { CoreDebugger.Function __output__; GetFunction(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="functionOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunctionBreakpoint::GetFunction']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunctionBreakpoint::GetFunction([In] ICorDebugFunction** ppFunction)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunctionBreakpoint::GetFunction</unmanaged-short>	
        internal void GetFunction(out CoreDebugger.Function functionOut)
        {
            unsafe
            {
                IntPtr functionOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &functionOut_, ((void**)(*(void**)_nativePointer))[5]);
                functionOut = (functionOut_ == IntPtr.Zero) ? null : new CoreDebugger.Function(functionOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nOffsetRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugFunctionBreakpoint::GetOffset']/*"/>	
        /// <unmanaged>HRESULT ICorDebugFunctionBreakpoint::GetOffset([In] unsigned int* pnOffset)</unmanaged>	
        /// <unmanaged-short>ICorDebugFunctionBreakpoint::GetOffset</unmanaged-short>	
        public void GetOffset(int nOffsetRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &nOffsetRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugGCReferenceEnum']/*"/>	
    /// <unmanaged>ICorDebugGCReferenceEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugGCReferenceEnum</unmanaged-short>	
    [Guid("7F3C24D3-7E1D-4245-AC3A-F72F8859C80C")]
    public partial class GCReferenceEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.GCReferenceEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public GCReferenceEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.GCReferenceEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.GCReferenceEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.GCReferenceEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="roots">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugGCReferenceEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugGCReferenceEnum::Next([In] unsigned int celt,[In] COR_GC_REFERENCE* roots,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugGCReferenceEnum::Next</unmanaged-short>	
        public void Next(int celt, ref CoreDebugger.CorGcReference roots, int celtFetchedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* roots_ = &roots)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, roots_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugGenericValue']/*"/>	
    /// <unmanaged>ICorDebugGenericValue</unmanaged>	
    /// <unmanaged-short>ICorDebugGenericValue</unmanaged-short>	
    [Guid("CC7BCAF8-8A68-11d2-983C-0000F808342D")]
    public partial class GenericValue : CoreDebugger.Value
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.GenericValue"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public GenericValue(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.GenericValue"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.GenericValue(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.GenericValue(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugGenericValue::SetValue']/*"/>	
        /// <unmanaged>SetValue</unmanaged>	
        /// <unmanaged-short>SetValue</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugGenericValue::SetValue([In] void* pFrom)</unmanaged>
        public System.IntPtr Value
        {
            set { SetValue(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="toRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugGenericValue::GetValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugGenericValue::GetValue([In] void* pTo)</unmanaged>	
        /// <unmanaged-short>ICorDebugGenericValue::GetValue</unmanaged-short>	
        public void GetValue(System.IntPtr toRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)toRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fromRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugGenericValue::SetValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugGenericValue::SetValue([In] void* pFrom)</unmanaged>	
        /// <unmanaged-short>ICorDebugGenericValue::SetValue</unmanaged-short>	
        internal void SetValue(System.IntPtr fromRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)fromRef, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugGuidToTypeEnum']/*"/>	
    /// <unmanaged>ICorDebugGuidToTypeEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugGuidToTypeEnum</unmanaged-short>	
    [Guid("6164D242-1015-4BD6-8CBE-D0DBD4B8275A")]
    public partial class GuidToTypeEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.GuidToTypeEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public GuidToTypeEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.GuidToTypeEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.GuidToTypeEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.GuidToTypeEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="values">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugGuidToTypeEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugGuidToTypeEnum::Next([In] unsigned int celt,[In] CorDebugGuidToTypeMapping* values,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugGuidToTypeEnum::Next</unmanaged-short>	
        public void Next(int celt, ref CoreDebugger.CorDebugGuidToTypeMapping values, int celtFetchedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* values_ = &values)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, values_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHandleValue']/*"/>	
    /// <unmanaged>ICorDebugHandleValue</unmanaged>	
    /// <unmanaged-short>ICorDebugHandleValue</unmanaged-short>	
    [Guid("029596E8-276B-46a1-9821-732E96BBB00B")]
    public partial class HandleValue : CoreDebugger.ReferenceValue
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.HandleValue"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public HandleValue(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.HandleValue"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.HandleValue(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.HandleValue(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="typeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHandleValue::GetHandleType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugHandleValue::GetHandleType([In] CorDebugHandleType* pType)</unmanaged>	
        /// <unmanaged-short>ICorDebugHandleValue::GetHandleType</unmanaged-short>	
        public void GetHandleType(CoreDebugger.CorDebugHandleType typeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &typeRef, ((void**)(*(void**)_nativePointer))[12]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHandleValue::Dispose']/*"/>	
        /// <unmanaged>HRESULT ICorDebugHandleValue::Dispose()</unmanaged>	
        /// <unmanaged-short>ICorDebugHandleValue::Dispose</unmanaged-short>	
        public void Dispose()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[13]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapEnum']/*"/>	
    /// <unmanaged>ICorDebugHeapEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugHeapEnum</unmanaged-short>	
    [Guid("76D7DAB8-D044-11DF-9A15-7E29DFD72085")]
    public partial class HeapEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.HeapEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public HeapEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.HeapEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.HeapEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.HeapEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="objects">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugHeapEnum::Next([In] unsigned int celt,[In] COR_HEAPOBJECT* objects,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugHeapEnum::Next</unmanaged-short>	
        public void Next(int celt, ref CoreDebugger.CorHeapobject objects, int celtFetchedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* objects_ = &objects)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, objects_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapSegmentEnum']/*"/>	
    /// <unmanaged>ICorDebugHeapSegmentEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugHeapSegmentEnum</unmanaged-short>	
    [Guid("A2FA0F8E-D045-11DF-AC8E-CE2ADFD72085")]
    public partial class HeapSegmentEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.HeapSegmentEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public HeapSegmentEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.HeapSegmentEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.HeapSegmentEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.HeapSegmentEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="segments">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapSegmentEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugHeapSegmentEnum::Next([In] unsigned int celt,[In] COR_SEGMENT* segments,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugHeapSegmentEnum::Next</unmanaged-short>	
        public void Next(int celt, ref CoreDebugger.CorSegment segments, int celtFetchedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* segments_ = &segments)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, segments_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapValue']/*"/>	
    /// <unmanaged>ICorDebugHeapValue</unmanaged>	
    /// <unmanaged-short>ICorDebugHeapValue</unmanaged-short>	
    [Guid("CC7BCAFA-8A68-11d2-983C-0000F808342D")]
    public partial class HeapValue : CoreDebugger.Value
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.HeapValue"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public HeapValue(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.HeapValue"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.HeapValue(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.HeapValue(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bValidRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapValue::IsValid']/*"/>	
        /// <unmanaged>HRESULT ICorDebugHeapValue::IsValid([In] BOOL* pbValid)</unmanaged>	
        /// <unmanaged-short>ICorDebugHeapValue::IsValid</unmanaged-short>	
        public void IsValid(SharpDX.Mathematics.Interop.RawBool bValidRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bValidRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="breakpointOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapValue::CreateRelocBreakpoint']/*"/>	
        /// <unmanaged>HRESULT ICorDebugHeapValue::CreateRelocBreakpoint([In] ICorDebugValueBreakpoint** ppBreakpoint)</unmanaged>	
        /// <unmanaged-short>ICorDebugHeapValue::CreateRelocBreakpoint</unmanaged-short>	
        public void CreateRelocBreakpoint(out CoreDebugger.ValueBreakpoint breakpointOut)
        {
            unsafe
            {
                IntPtr breakpointOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &breakpointOut_, ((void**)(*(void**)_nativePointer))[8]);
                breakpointOut = (breakpointOut_ == IntPtr.Zero) ? null : new CoreDebugger.ValueBreakpoint(breakpointOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapValue2']/*"/>	
    /// <unmanaged>ICorDebugHeapValue2</unmanaged>	
    /// <unmanaged-short>ICorDebugHeapValue2</unmanaged-short>	
    [Guid("E3AC4D6C-9CB7-43e6-96CC-B21540E5083C")]
    public partial class HeapValue2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.HeapValue2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public HeapValue2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.HeapValue2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.HeapValue2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.HeapValue2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="type">No documentation.</param>	
        /// <param name="handleOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapValue2::CreateHandle']/*"/>	
        /// <unmanaged>HRESULT ICorDebugHeapValue2::CreateHandle([In] CorDebugHandleType type,[In] ICorDebugHandleValue** ppHandle)</unmanaged>	
        /// <unmanaged-short>ICorDebugHeapValue2::CreateHandle</unmanaged-short>	
        public void CreateHandle(CoreDebugger.CorDebugHandleType type, out CoreDebugger.HandleValue handleOut)
        {
            unsafe
            {
                IntPtr handleOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)type), &handleOut_, ((void**)(*(void**)_nativePointer))[3]);
                handleOut = (handleOut_ == IntPtr.Zero) ? null : new CoreDebugger.HandleValue(handleOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapValue3']/*"/>	
    /// <unmanaged>ICorDebugHeapValue3</unmanaged>	
    /// <unmanaged-short>ICorDebugHeapValue3</unmanaged-short>	
    [Guid("A69ACAD8-2374-46e9-9FF8-B1F14120D296")]
    public partial class HeapValue3 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.HeapValue3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public HeapValue3(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.HeapValue3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.HeapValue3(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.HeapValue3(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapValue3::GetMonitorEventWaitList']/*"/>	
        /// <unmanaged>GetMonitorEventWaitList</unmanaged>	
        /// <unmanaged-short>GetMonitorEventWaitList</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugHeapValue3::GetMonitorEventWaitList([In] ICorDebugThreadEnum** ppThreadEnum)</unmanaged>
        public CoreDebugger.ThreadEnum MonitorEventWaitList
        {
            get { CoreDebugger.ThreadEnum __output__; GetMonitorEventWaitList(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadOut">No documentation.</param>	
        /// <param name="acquisitionCountRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapValue3::GetThreadOwningMonitorLock']/*"/>	
        /// <unmanaged>HRESULT ICorDebugHeapValue3::GetThreadOwningMonitorLock([In] ICorDebugThread** ppThread,[In] unsigned int* pAcquisitionCount)</unmanaged>	
        /// <unmanaged-short>ICorDebugHeapValue3::GetThreadOwningMonitorLock</unmanaged-short>	
        public void GetThreadOwningMonitorLock(out CoreDebugger.Thread threadOut, int acquisitionCountRef)
        {
            unsafe
            {
                IntPtr threadOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &threadOut_, &acquisitionCountRef, ((void**)(*(void**)_nativePointer))[3]);
                threadOut = (threadOut_ == IntPtr.Zero) ? null : new CoreDebugger.Thread(threadOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugHeapValue3::GetMonitorEventWaitList']/*"/>	
        /// <unmanaged>HRESULT ICorDebugHeapValue3::GetMonitorEventWaitList([In] ICorDebugThreadEnum** ppThreadEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugHeapValue3::GetMonitorEventWaitList</unmanaged-short>	
        internal void GetMonitorEventWaitList(out CoreDebugger.ThreadEnum threadEnumOut)
        {
            unsafe
            {
                IntPtr threadEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &threadEnumOut_, ((void**)(*(void**)_nativePointer))[4]);
                threadEnumOut = (threadEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.ThreadEnum(threadEnumOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILCode']/*"/>	
    /// <unmanaged>ICorDebugILCode</unmanaged>	
    /// <unmanaged-short>ICorDebugILCode</unmanaged-short>	
    [Guid("598D46C2-C877-42A7-89D2-3D0C7F1C1264")]
    public partial class ILCode : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ILCode"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ILCode(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ILCode"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ILCode(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ILCode(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cClauses">No documentation.</param>	
        /// <param name="cClausesRef">No documentation.</param>	
        /// <param name="clauses">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILCode::GetEHClauses']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILCode::GetEHClauses([In] unsigned int cClauses,[In] unsigned int* pcClauses,[In] CorDebugEHClause* clauses)</unmanaged>	
        /// <unmanaged-short>ICorDebugILCode::GetEHClauses</unmanaged-short>	
        public void GetEHClauses(int cClauses, int cClausesRef, ref CoreDebugger.CorDebugEHClause clauses)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* clauses_ = &clauses)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cClauses, &cClausesRef, clauses_, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILCode2']/*"/>	
    /// <unmanaged>ICorDebugILCode2</unmanaged>	
    /// <unmanaged-short>ICorDebugILCode2</unmanaged-short>	
    [Guid("46586093-D3F5-4DB6-ACDB-955BCE228C15")]
    public partial class ILCode2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ILCode2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ILCode2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ILCode2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ILCode2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ILCode2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="mdSigRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILCode2::GetLocalVarSigToken']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILCode2::GetLocalVarSigToken([In] unsigned int* pmdSig)</unmanaged>	
        /// <unmanaged-short>ICorDebugILCode2::GetLocalVarSigToken</unmanaged-short>	
        public void GetLocalVarSigToken(int mdSigRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &mdSigRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cMap">No documentation.</param>	
        /// <param name="cMapRef">No documentation.</param>	
        /// <param name="map">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILCode2::GetInstrumentedILMap']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILCode2::GetInstrumentedILMap([In] unsigned int cMap,[In] unsigned int* pcMap,[In] COR_IL_MAP* map)</unmanaged>	
        /// <unmanaged-short>ICorDebugILCode2::GetInstrumentedILMap</unmanaged-short>	
        public void GetInstrumentedILMap(int cMap, int cMapRef, CoreDebugger.CorIlMap map)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cMap, &cMapRef, &map, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame']/*"/>	
    /// <unmanaged>ICorDebugILFrame</unmanaged>	
    /// <unmanaged-short>ICorDebugILFrame</unmanaged-short>	
    [Guid("03E26311-4F76-11d3-88C6-006097945418")]
    public partial class ILFrame : CoreDebugger.Frame
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ILFrame"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ILFrame(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ILFrame"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ILFrame(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ILFrame(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame::SetIP']/*"/>	
        /// <unmanaged>SetIP</unmanaged>	
        /// <unmanaged-short>SetIP</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugILFrame::SetIP([In] unsigned int nOffset)</unmanaged>
        public int IP
        {
            set { SetIP(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nOffsetRef">No documentation.</param>	
        /// <param name="mappingResultRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame::GetIP']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame::GetIP([In] unsigned int* pnOffset,[In] CorDebugMappingResult* pMappingResult)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame::GetIP</unmanaged-short>	
        public void GetIP(int nOffsetRef, CoreDebugger.CorDebugMappingResult mappingResultRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &nOffsetRef, &mappingResultRef, ((void**)(*(void**)_nativePointer))[11]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nOffset">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame::SetIP']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame::SetIP([In] unsigned int nOffset)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame::SetIP</unmanaged-short>	
        internal void SetIP(int nOffset)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, nOffset, ((void**)(*(void**)_nativePointer))[12]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="valueEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame::EnumerateLocalVariables']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame::EnumerateLocalVariables([In] ICorDebugValueEnum** ppValueEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame::EnumerateLocalVariables</unmanaged-short>	
        public void EnumerateLocalVariables(out CoreDebugger.ValueEnum valueEnumOut)
        {
            unsafe
            {
                IntPtr valueEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &valueEnumOut_, ((void**)(*(void**)_nativePointer))[13]);
                valueEnumOut = (valueEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.ValueEnum(valueEnumOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwIndex">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame::GetLocalVariable']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame::GetLocalVariable([In] unsigned int dwIndex,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame::GetLocalVariable</unmanaged-short>	
        public void GetLocalVariable(int dwIndex, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, dwIndex, &valueOut_, ((void**)(*(void**)_nativePointer))[14]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="valueEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame::EnumerateArguments']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame::EnumerateArguments([In] ICorDebugValueEnum** ppValueEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame::EnumerateArguments</unmanaged-short>	
        public void EnumerateArguments(out CoreDebugger.ValueEnum valueEnumOut)
        {
            unsafe
            {
                IntPtr valueEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &valueEnumOut_, ((void**)(*(void**)_nativePointer))[15]);
                valueEnumOut = (valueEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.ValueEnum(valueEnumOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwIndex">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame::GetArgument']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame::GetArgument([In] unsigned int dwIndex,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame::GetArgument</unmanaged-short>	
        public void GetArgument(int dwIndex, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, dwIndex, &valueOut_, ((void**)(*(void**)_nativePointer))[16]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="depthRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame::GetStackDepth']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame::GetStackDepth([In] unsigned int* pDepth)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame::GetStackDepth</unmanaged-short>	
        public void GetStackDepth(int depthRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &depthRef, ((void**)(*(void**)_nativePointer))[17]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwIndex">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame::GetStackValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame::GetStackValue([In] unsigned int dwIndex,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame::GetStackValue</unmanaged-short>	
        public void GetStackValue(int dwIndex, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, dwIndex, &valueOut_, ((void**)(*(void**)_nativePointer))[18]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nOffset">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame::CanSetIP']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame::CanSetIP([In] unsigned int nOffset)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame::CanSetIP</unmanaged-short>	
        public void CanSetIP(int nOffset)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, nOffset, ((void**)(*(void**)_nativePointer))[19]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame2']/*"/>	
    /// <unmanaged>ICorDebugILFrame2</unmanaged>	
    /// <unmanaged-short>ICorDebugILFrame2</unmanaged-short>	
    [Guid("5D88A994-6C30-479b-890F-BCEF88B129A5")]
    public partial class ILFrame2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ILFrame2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ILFrame2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ILFrame2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ILFrame2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ILFrame2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="newILOffset">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame2::RemapFunction']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame2::RemapFunction([In] unsigned int newILOffset)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame2::RemapFunction</unmanaged-short>	
        public void RemapFunction(int newILOffset)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, newILOffset, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="tyParEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame2::EnumerateTypeParameters']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame2::EnumerateTypeParameters([In] ICorDebugTypeEnum** ppTyParEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame2::EnumerateTypeParameters</unmanaged-short>	
        public void EnumerateTypeParameters(out CoreDebugger.TypeEnum tyParEnumOut)
        {
            unsafe
            {
                IntPtr tyParEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &tyParEnumOut_, ((void**)(*(void**)_nativePointer))[4]);
                tyParEnumOut = (tyParEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.TypeEnum(tyParEnumOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame3']/*"/>	
    /// <unmanaged>ICorDebugILFrame3</unmanaged>	
    /// <unmanaged-short>ICorDebugILFrame3</unmanaged-short>	
    [Guid("9A9E2ED6-04DF-4FE0-BB50-CAB64126AD24")]
    public partial class ILFrame3 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ILFrame3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ILFrame3(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ILFrame3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ILFrame3(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ILFrame3(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="iLoffset">No documentation.</param>	
        /// <param name="returnValueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame3::GetReturnValueForILOffset']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame3::GetReturnValueForILOffset([In] unsigned int ILoffset,[In] ICorDebugValue** ppReturnValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame3::GetReturnValueForILOffset</unmanaged-short>	
        public void GetReturnValueForILOffset(int iLoffset, out CoreDebugger.Value returnValueOut)
        {
            unsafe
            {
                IntPtr returnValueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, iLoffset, &returnValueOut_, ((void**)(*(void**)_nativePointer))[3]);
                returnValueOut = (returnValueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(returnValueOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame4']/*"/>	
    /// <unmanaged>ICorDebugILFrame4</unmanaged>	
    /// <unmanaged-short>ICorDebugILFrame4</unmanaged-short>	
    [Guid("AD914A30-C6D1-4AC5-9C5E-577F3BAA8A45")]
    public partial class ILFrame4 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ILFrame4"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ILFrame4(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ILFrame4"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ILFrame4(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ILFrame4(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="flags">No documentation.</param>	
        /// <param name="valueEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame4::EnumerateLocalVariablesEx']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame4::EnumerateLocalVariablesEx([In] ILCodeKind flags,[In] ICorDebugValueEnum** ppValueEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame4::EnumerateLocalVariablesEx</unmanaged-short>	
        public void EnumerateLocalVariablesEx(CoreDebugger.ILCodeKind flags, out CoreDebugger.ValueEnum valueEnumOut)
        {
            unsafe
            {
                IntPtr valueEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)flags), &valueEnumOut_, ((void**)(*(void**)_nativePointer))[3]);
                valueEnumOut = (valueEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.ValueEnum(valueEnumOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="flags">No documentation.</param>	
        /// <param name="dwIndex">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame4::GetLocalVariableEx']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame4::GetLocalVariableEx([In] ILCodeKind flags,[In] unsigned int dwIndex,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame4::GetLocalVariableEx</unmanaged-short>	
        public void GetLocalVariableEx(CoreDebugger.ILCodeKind flags, int dwIndex, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)flags), dwIndex, &valueOut_, ((void**)(*(void**)_nativePointer))[4]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="flags">No documentation.</param>	
        /// <param name="codeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugILFrame4::GetCodeEx']/*"/>	
        /// <unmanaged>HRESULT ICorDebugILFrame4::GetCodeEx([In] ILCodeKind flags,[In] ICorDebugCode** ppCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugILFrame4::GetCodeEx</unmanaged-short>	
        public void GetCodeEx(CoreDebugger.ILCodeKind flags, out CoreDebugger.Code codeOut)
        {
            unsafe
            {
                IntPtr codeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)flags), &codeOut_, ((void**)(*(void**)_nativePointer))[5]);
                codeOut = (codeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Code(codeOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugInstanceFieldSymbol']/*"/>	
    /// <unmanaged>ICorDebugInstanceFieldSymbol</unmanaged>	
    /// <unmanaged-short>ICorDebugInstanceFieldSymbol</unmanaged-short>	
    [Guid("A074096B-3ADC-4485-81DA-68C7A4EA52DB")]
    public partial class InstanceFieldSymbol : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.InstanceFieldSymbol"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public InstanceFieldSymbol(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.InstanceFieldSymbol"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.InstanceFieldSymbol(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.InstanceFieldSymbol(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugInstanceFieldSymbol::GetName']/*"/>	
        /// <unmanaged>HRESULT ICorDebugInstanceFieldSymbol::GetName([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugInstanceFieldSymbol::GetName</unmanaged-short>	
        public void GetName(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbSizeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugInstanceFieldSymbol::GetSize']/*"/>	
        /// <unmanaged>HRESULT ICorDebugInstanceFieldSymbol::GetSize([In] unsigned int* pcbSize)</unmanaged>	
        /// <unmanaged-short>ICorDebugInstanceFieldSymbol::GetSize</unmanaged-short>	
        public void GetSize(int cbSizeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &cbSizeRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbOffsetRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugInstanceFieldSymbol::GetOffset']/*"/>	
        /// <unmanaged>HRESULT ICorDebugInstanceFieldSymbol::GetOffset([In] unsigned int* pcbOffset)</unmanaged>	
        /// <unmanaged-short>ICorDebugInstanceFieldSymbol::GetOffset</unmanaged-short>	
        public void GetOffset(int cbOffsetRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &cbOffsetRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugInternalFrame']/*"/>	
    /// <unmanaged>ICorDebugInternalFrame</unmanaged>	
    /// <unmanaged-short>ICorDebugInternalFrame</unmanaged-short>	
    [Guid("B92CC7F7-9D2D-45c4-BC2B-621FCC9DFBF4")]
    public partial class InternalFrame : CoreDebugger.Frame
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.InternalFrame"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public InternalFrame(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.InternalFrame"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.InternalFrame(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.InternalFrame(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="typeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugInternalFrame::GetFrameType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugInternalFrame::GetFrameType([In] CorDebugInternalFrameType* pType)</unmanaged>	
        /// <unmanaged-short>ICorDebugInternalFrame::GetFrameType</unmanaged-short>	
        public void GetFrameType(CoreDebugger.CorDebugInternalFrameType typeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &typeRef, ((void**)(*(void**)_nativePointer))[11]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugInternalFrame2']/*"/>	
    /// <unmanaged>ICorDebugInternalFrame2</unmanaged>	
    /// <unmanaged-short>ICorDebugInternalFrame2</unmanaged-short>	
    [Guid("C0815BDC-CFAB-447e-A779-C116B454EB5B")]
    public partial class InternalFrame2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.InternalFrame2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public InternalFrame2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.InternalFrame2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.InternalFrame2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.InternalFrame2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="addressRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugInternalFrame2::GetAddress']/*"/>	
        /// <unmanaged>HRESULT ICorDebugInternalFrame2::GetAddress([In] unsigned longlong* pAddress)</unmanaged>	
        /// <unmanaged-short>ICorDebugInternalFrame2::GetAddress</unmanaged-short>	
        public void GetAddress(long addressRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &addressRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="frameToCompareRef">No documentation.</param>	
        /// <param name="isCloserRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugInternalFrame2::IsCloserToLeaf']/*"/>	
        /// <unmanaged>HRESULT ICorDebugInternalFrame2::IsCloserToLeaf([In] ICorDebugFrame* pFrameToCompare,[In] BOOL* pIsCloser)</unmanaged>	
        /// <unmanaged-short>ICorDebugInternalFrame2::IsCloserToLeaf</unmanaged-short>	
        public void IsCloserToLeaf(CoreDebugger.Frame frameToCompareRef, SharpDX.Mathematics.Interop.RawBool isCloserRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((frameToCompareRef == null) ? IntPtr.Zero : frameToCompareRef.NativePointer), &isCloserRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugLoadedModule']/*"/>	
    /// <unmanaged>ICorDebugLoadedModule</unmanaged>	
    /// <unmanaged-short>ICorDebugLoadedModule</unmanaged-short>	
    [Guid("817F343A-6630-4578-96C5-D11BC0EC5EE2")]
    public partial class LoadedModule : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.LoadedModule"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public LoadedModule(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.LoadedModule"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.LoadedModule(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.LoadedModule(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="addressRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugLoadedModule::GetBaseAddress']/*"/>	
        /// <unmanaged>HRESULT ICorDebugLoadedModule::GetBaseAddress([In] unsigned longlong* pAddress)</unmanaged>	
        /// <unmanaged-short>ICorDebugLoadedModule::GetBaseAddress</unmanaged-short>	
        public void GetBaseAddress(long addressRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &addressRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugLoadedModule::GetName']/*"/>	
        /// <unmanaged>HRESULT ICorDebugLoadedModule::GetName([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugLoadedModule::GetName</unmanaged-short>	
        public void GetName(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cBytesRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugLoadedModule::GetSize']/*"/>	
        /// <unmanaged>HRESULT ICorDebugLoadedModule::GetSize([In] unsigned int* pcBytes)</unmanaged>	
        /// <unmanaged-short>ICorDebugLoadedModule::GetSize</unmanaged-short>	
        public void GetSize(int cBytesRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &cBytesRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebug']/*"/>	
    /// <unmanaged>ICorDebug</unmanaged>	
    /// <unmanaged-short>ICorDebug</unmanaged-short>	
    [Guid("3d6f5f61-7538-11d3-8d5b-00104b35e7ef")]
    public partial class LocalDebugger : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.LocalDebugger"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public LocalDebugger(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.LocalDebugger"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.LocalDebugger(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.LocalDebugger(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebug::SetManagedHandler']/*"/>	
        /// <unmanaged>SetManagedHandler</unmanaged>	
        /// <unmanaged-short>SetManagedHandler</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebug::SetManagedHandler([In] ICorDebugManagedCallback* pCallback)</unmanaged>
        public System.IntPtr ManagedHandler_
        {
            set { SetManagedHandler_(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebug::Initialize']/*"/>	
        /// <unmanaged>HRESULT ICorDebug::Initialize()</unmanaged>	
        /// <unmanaged-short>ICorDebug::Initialize</unmanaged-short>	
        public void Initialize()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebug::Terminate']/*"/>	
        /// <unmanaged>HRESULT ICorDebug::Terminate()</unmanaged>	
        /// <unmanaged-short>ICorDebug::Terminate</unmanaged-short>	
        public void Terminate()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="callbackRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebug::SetManagedHandler']/*"/>	
        /// <unmanaged>HRESULT ICorDebug::SetManagedHandler([In] ICorDebugManagedCallback* pCallback)</unmanaged>	
        /// <unmanaged-short>ICorDebug::SetManagedHandler</unmanaged-short>	
        internal void SetManagedHandler_(System.IntPtr callbackRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)callbackRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="id">No documentation.</param>	
        /// <param name="win32Attach">No documentation.</param>	
        /// <param name="processOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebug::DebugActiveProcess']/*"/>	
        /// <unmanaged>HRESULT ICorDebug::DebugActiveProcess([In] unsigned int id,[In] BOOL win32Attach,[In] ICorDebugProcess** ppProcess)</unmanaged>	
        /// <unmanaged-short>ICorDebug::DebugActiveProcess</unmanaged-short>	
        public void DebugActiveProcess(int id, SharpDX.Mathematics.Interop.RawBool win32Attach, out CoreDebugger.Process processOut)
        {
            unsafe
            {
                IntPtr processOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint37(_nativePointer, id, win32Attach, &processOut_, ((void**)(*(void**)_nativePointer))[8]);
                processOut = (processOut_ == IntPtr.Zero) ? null : new CoreDebugger.Process(processOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebug::EnumerateProcesses']/*"/>	
        /// <unmanaged>HRESULT ICorDebug::EnumerateProcesses([In] ICorDebugProcessEnum** ppProcess)</unmanaged>	
        /// <unmanaged-short>ICorDebug::EnumerateProcesses</unmanaged-short>	
        public void EnumerateProcesses(out CoreDebugger.ProcessEnum processOut)
        {
            unsafe
            {
                IntPtr processOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &processOut_, ((void**)(*(void**)_nativePointer))[9]);
                processOut = (processOut_ == IntPtr.Zero) ? null : new CoreDebugger.ProcessEnum(processOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwProcessId">No documentation.</param>	
        /// <param name="processOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebug::GetProcess']/*"/>	
        /// <unmanaged>HRESULT ICorDebug::GetProcess([In] unsigned int dwProcessId,[In] ICorDebugProcess** ppProcess)</unmanaged>	
        /// <unmanaged-short>ICorDebug::GetProcess</unmanaged-short>	
        public void GetProcess(int dwProcessId, out CoreDebugger.Process processOut)
        {
            unsafe
            {
                IntPtr processOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, dwProcessId, &processOut_, ((void**)(*(void**)_nativePointer))[10]);
                processOut = (processOut_ == IntPtr.Zero) ? null : new CoreDebugger.Process(processOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwProcessId">No documentation.</param>	
        /// <param name="win32DebuggingEnabled">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebug::CanLaunchOrAttach']/*"/>	
        /// <unmanaged>HRESULT ICorDebug::CanLaunchOrAttach([In] unsigned int dwProcessId,[In] BOOL win32DebuggingEnabled)</unmanaged>	
        /// <unmanaged-short>ICorDebug::CanLaunchOrAttach</unmanaged-short>	
        public void CanLaunchOrAttach(int dwProcessId, SharpDX.Mathematics.Interop.RawBool win32DebuggingEnabled)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint39(_nativePointer, dwProcessId, win32DebuggingEnabled, ((void**)(*(void**)_nativePointer))[11]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebug2']/*"/>	
    /// <unmanaged>ICorDebug2</unmanaged>	
    /// <unmanaged-short>ICorDebug2</unmanaged-short>	
    [Guid("ECCCCF2E-B286-4b3e-A983-860A8793D105")]
    public partial class LocalDebugger2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.LocalDebugger2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public LocalDebugger2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.LocalDebugger2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.LocalDebugger2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.LocalDebugger2(nativePointer);
        }

    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback']/*"/>	
    /// <unmanaged>ICorDebugManagedCallback</unmanaged>	
    /// <unmanaged-short>ICorDebugManagedCallback</unmanaged-short>	
    [Guid("3d6f5f60-7538-11d3-8d5b-00104b35e7ef")]
    public partial interface ManagedCallback : SharpDX.ICallbackable
    {
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="breakpointRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::Breakpoint']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::Breakpoint([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] ICorDebugBreakpoint* pBreakpoint)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::Breakpoint</unmanaged-short>	
        void OnBreakpoint(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, CoreDebugger.Breakpoint breakpointRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="stepperRef">No documentation.</param>	
        /// <param name="reason">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::StepComplete']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::StepComplete([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] ICorDebugStepper* pStepper,[In] CorDebugStepReason reason)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::StepComplete</unmanaged-short>	
        void OnStepComplete(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, CoreDebugger.Stepper stepperRef, CoreDebugger.CorDebugStepReason reason);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="thread">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::Break']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::Break([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* thread)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::Break</unmanaged-short>	
        void OnBreak(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread thread);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="unhandled">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::Exception']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::Exception([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] BOOL unhandled)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::Exception</unmanaged-short>	
        void OnException(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, SharpDX.Mathematics.Interop.RawBool unhandled);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="evalRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::EvalComplete']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::EvalComplete([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] ICorDebugEval* pEval)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::EvalComplete</unmanaged-short>	
        void OnEvalComplete(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, CoreDebugger.Eval evalRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="evalRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::EvalException']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::EvalException([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] ICorDebugEval* pEval)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::EvalException</unmanaged-short>	
        void OnEvalException(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, CoreDebugger.Eval evalRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::CreateProcessW']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::CreateProcessW([In] ICorDebugProcess* pProcess)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::CreateProcessW</unmanaged-short>	
        void OnCreateProcessW(CoreDebugger.Process processRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::ExitProcess']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::ExitProcess([In] ICorDebugProcess* pProcess)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::ExitProcess</unmanaged-short>	
        void OnExitProcess(CoreDebugger.Process processRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="thread">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::CreateThread']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::CreateThread([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* thread)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::CreateThread</unmanaged-short>	
        void OnCreateThread(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread thread);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="thread">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::ExitThread']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::ExitThread([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* thread)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::ExitThread</unmanaged-short>	
        void OnExitThread(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread thread);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="moduleRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::LoadModule']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::LoadModule([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugModule* pModule)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::LoadModule</unmanaged-short>	
        void OnLoadModule(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Module moduleRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="moduleRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::UnloadModule']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::UnloadModule([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugModule* pModule)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::UnloadModule</unmanaged-short>	
        void OnUnloadModule(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Module moduleRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="c">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::LoadClass']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::LoadClass([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugClass* c)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::LoadClass</unmanaged-short>	
        void OnLoadClass(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Class c);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="c">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::UnloadClass']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::UnloadClass([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugClass* c)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::UnloadClass</unmanaged-short>	
        void OnUnloadClass(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Class c);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processRef">No documentation.</param>	
        /// <param name="errorHR">No documentation.</param>	
        /// <param name="errorCode">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::DebuggerError']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::DebuggerError([In] ICorDebugProcess* pProcess,[In] HRESULT errorHR,[In] unsigned int errorCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::DebuggerError</unmanaged-short>	
        void OnDebuggerError(CoreDebugger.Process processRef, SharpDX.Result errorHR, int errorCode);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="lLevel">No documentation.</param>	
        /// <param name="logSwitchNameRef">No documentation.</param>	
        /// <param name="messageRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::LogMessage']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::LogMessage([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] int lLevel,[In] wchar_t* pLogSwitchName,[In] wchar_t* pMessage)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::LogMessage</unmanaged-short>	
        void OnLogMessage(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, int lLevel, string logSwitchNameRef, string messageRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="lLevel">No documentation.</param>	
        /// <param name="ulReason">No documentation.</param>	
        /// <param name="logSwitchNameRef">No documentation.</param>	
        /// <param name="parentNameRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::LogSwitch']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::LogSwitch([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] int lLevel,[In] unsigned int ulReason,[In] wchar_t* pLogSwitchName,[In] wchar_t* pParentName)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::LogSwitch</unmanaged-short>	
        void OnLogSwitch(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, int lLevel, int ulReason, string logSwitchNameRef, string parentNameRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processRef">No documentation.</param>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::CreateAppDomain']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::CreateAppDomain([In] ICorDebugProcess* pProcess,[In] ICorDebugAppDomain* pAppDomain)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::CreateAppDomain</unmanaged-short>	
        void OnCreateAppDomain(CoreDebugger.Process processRef, CoreDebugger.AppDomain appDomainRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processRef">No documentation.</param>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::ExitAppDomain']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::ExitAppDomain([In] ICorDebugProcess* pProcess,[In] ICorDebugAppDomain* pAppDomain)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::ExitAppDomain</unmanaged-short>	
        /* public void OnExitAppDomain(CoreDebugger.Process processRef, CoreDebugger.AppDomain appDomainRef) */

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="assemblyRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::LoadAssembly']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::LoadAssembly([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugAssembly* pAssembly)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::LoadAssembly</unmanaged-short>	
        /* public void OnLoadAssembly(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Assembly assemblyRef) */

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="assemblyRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::UnloadAssembly']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::UnloadAssembly([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugAssembly* pAssembly)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::UnloadAssembly</unmanaged-short>	
        void OnUnloadAssembly(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Assembly assemblyRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::ControlCTrap']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::ControlCTrap([In] ICorDebugProcess* pProcess)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::ControlCTrap</unmanaged-short>	
        /* public void OnControlCTrap(CoreDebugger.Process processRef) */

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::NameChange']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::NameChange([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::NameChange</unmanaged-short>	
        void OnNameChange(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="moduleRef">No documentation.</param>	
        /// <param name="symbolStreamRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::UpdateModuleSymbols']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::UpdateModuleSymbols([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugModule* pModule,[In] IStream* pSymbolStream)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::UpdateModuleSymbols</unmanaged-short>	
        void OnUpdateModuleSymbols_(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Module moduleRef, System.IntPtr symbolStreamRef);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="functionRef">No documentation.</param>	
        /// <param name="fAccurate">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::EditAndContinueRemap']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::EditAndContinueRemap([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] ICorDebugFunction* pFunction,[In] BOOL fAccurate)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::EditAndContinueRemap</unmanaged-short>	
        void OnEditAndContinueRemap(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, CoreDebugger.Function functionRef, SharpDX.Mathematics.Interop.RawBool fAccurate);

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="breakpointRef">No documentation.</param>	
        /// <param name="dwError">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback::BreakpointSetError']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback::BreakpointSetError([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] ICorDebugBreakpoint* pBreakpoint,[In] unsigned int dwError)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback::BreakpointSetError</unmanaged-short>	
        void OnBreakpointSetError(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, CoreDebugger.Breakpoint breakpointRef, int dwError);
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback2']/*"/>	
    /// <unmanaged>ICorDebugManagedCallback2</unmanaged>	
    /// <unmanaged-short>ICorDebugManagedCallback2</unmanaged-short>	
    [Guid("250E5EEA-DB5C-4C76-B6F3-8C46F12E3203")]
    public partial interface ManagedCallback2 : SharpDX.ICallbackable
    {


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="oldFunctionRef">No documentation.</param>	
        /// <param name="newFunctionRef">No documentation.</param>	
        /// <param name="oldILOffset">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback2::FunctionRemapOpportunity']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback2::FunctionRemapOpportunity([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] ICorDebugFunction* pOldFunction,[In] ICorDebugFunction* pNewFunction,[In] unsigned int oldILOffset)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback2::FunctionRemapOpportunity</unmanaged-short>	
        /* public void OnFunctionRemapOpportunity(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, CoreDebugger.Function oldFunctionRef, CoreDebugger.Function newFunctionRef, int oldILOffset) */

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processRef">No documentation.</param>	
        /// <param name="dwConnectionId">No documentation.</param>	
        /// <param name="connNameRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback2::CreateConnection']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback2::CreateConnection([In] ICorDebugProcess* pProcess,[In] unsigned int dwConnectionId,[In] wchar_t* pConnName)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback2::CreateConnection</unmanaged-short>	
        /* public void OnCreateConnection(CoreDebugger.Process processRef, int dwConnectionId, string connNameRef) */

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processRef">No documentation.</param>	
        /// <param name="dwConnectionId">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback2::ChangeConnection']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback2::ChangeConnection([In] ICorDebugProcess* pProcess,[In] unsigned int dwConnectionId)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback2::ChangeConnection</unmanaged-short>	
        /* public void OnChangeConnection(CoreDebugger.Process processRef, int dwConnectionId) */

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processRef">No documentation.</param>	
        /// <param name="dwConnectionId">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback2::DestroyConnection']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback2::DestroyConnection([In] ICorDebugProcess* pProcess,[In] unsigned int dwConnectionId)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback2::DestroyConnection</unmanaged-short>	
        /* public void OnDestroyConnection(CoreDebugger.Process processRef, int dwConnectionId) */

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="frameRef">No documentation.</param>	
        /// <param name="nOffset">No documentation.</param>	
        /// <param name="dwEventType">No documentation.</param>	
        /// <param name="dwFlags">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback2::Exception']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback2::Exception([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] ICorDebugFrame* pFrame,[In] unsigned int nOffset,[In] CorDebugExceptionCallbackType dwEventType,[In] unsigned int dwFlags)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback2::Exception</unmanaged-short>	
        /* public void OnException(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, CoreDebugger.Frame frameRef, int nOffset, CoreDebugger.CorDebugExceptionCallbackType dwEventType, int dwFlags) */

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="dwEventType">No documentation.</param>	
        /// <param name="dwFlags">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback2::ExceptionUnwind']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback2::ExceptionUnwind([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] CorDebugExceptionUnwindCallbackType dwEventType,[In] unsigned int dwFlags)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback2::ExceptionUnwind</unmanaged-short>	
        /* public void OnExceptionUnwind(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, CoreDebugger.CorDebugExceptionUnwindCallbackType dwEventType, int dwFlags) */

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="functionRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback2::FunctionRemapComplete']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback2::FunctionRemapComplete([In] ICorDebugAppDomain* pAppDomain,[In] ICorDebugThread* pThread,[In] ICorDebugFunction* pFunction)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback2::FunctionRemapComplete</unmanaged-short>	
        /* public void OnFunctionRemapComplete(CoreDebugger.AppDomain appDomainRef, CoreDebugger.Thread threadRef, CoreDebugger.Function functionRef) */

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="controllerRef">No documentation.</param>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="mDARef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback2::MDANotification']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback2::MDANotification([In] ICorDebugController* pController,[In] ICorDebugThread* pThread,[In] ICorDebugMDA* pMDA)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback2::MDANotification</unmanaged-short>	
        /* public void OnMDANotification(CoreDebugger.Controller controllerRef, CoreDebugger.Thread threadRef, CoreDebugger.MDA mDARef) */
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback3']/*"/>	
    /// <unmanaged>ICorDebugManagedCallback3</unmanaged>	
    /// <unmanaged-short>ICorDebugManagedCallback3</unmanaged-short>	
    [Guid("264EA0FC-2591-49AA-868E-835E6515323F")]
    public partial interface ManagedCallback3 : SharpDX.ICallbackable
    {


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadRef">No documentation.</param>	
        /// <param name="appDomainRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugManagedCallback3::CustomNotification']/*"/>	
        /// <unmanaged>HRESULT ICorDebugManagedCallback3::CustomNotification([In] ICorDebugThread* pThread,[In] ICorDebugAppDomain* pAppDomain)</unmanaged>	
        /// <unmanaged-short>ICorDebugManagedCallback3::CustomNotification</unmanaged-short>	
        /* public void OnCustomNotification(CoreDebugger.Thread threadRef, CoreDebugger.AppDomain appDomainRef) */
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMDA']/*"/>	
    /// <unmanaged>ICorDebugMDA</unmanaged>	
    /// <unmanaged-short>ICorDebugMDA</unmanaged-short>	
    [Guid("CC726F2F-1DB7-459b-B0EC-05F01D841B42")]
    public partial class MDA : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.MDA"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public MDA(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.MDA"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.MDA(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.MDA(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMDA::GetName']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMDA::GetName([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugMDA::GetName</unmanaged-short>	
        public void GetName(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMDA::GetDescription']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMDA::GetDescription([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugMDA::GetDescription</unmanaged-short>	
        public void GetDescription(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMDA::GetXML']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMDA::GetXML([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugMDA::GetXML</unmanaged-short>	
        public void GetXML(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="flagsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMDA::GetFlags']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMDA::GetFlags([In] CorDebugMDAFlags* pFlags)</unmanaged>	
        /// <unmanaged-short>ICorDebugMDA::GetFlags</unmanaged-short>	
        public void GetFlags(CoreDebugger.CorDebugMDAFlags flagsRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &flagsRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="osTidRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMDA::GetOSThreadId']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMDA::GetOSThreadId([In] unsigned int* pOsTid)</unmanaged>	
        /// <unmanaged-short>ICorDebugMDA::GetOSThreadId</unmanaged-short>	
        public void GetOSThreadId(int osTidRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &osTidRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMemoryBuffer']/*"/>	
    /// <unmanaged>ICorDebugMemoryBuffer</unmanaged>	
    /// <unmanaged-short>ICorDebugMemoryBuffer</unmanaged-short>	
    [Guid("677888B3-D160-4B8C-A73B-D79E6AAA1D13")]
    public partial class MemoryBuffer : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.MemoryBuffer"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public MemoryBuffer(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.MemoryBuffer"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.MemoryBuffer(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.MemoryBuffer(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="address">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMemoryBuffer::GetStartAddress']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMemoryBuffer::GetStartAddress([In] const void** address)</unmanaged>	
        /// <unmanaged-short>ICorDebugMemoryBuffer::GetStartAddress</unmanaged-short>	
        public void GetStartAddress(System.IntPtr address)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)address, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbBufferLengthRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMemoryBuffer::GetSize']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMemoryBuffer::GetSize([In] unsigned int* pcbBufferLength)</unmanaged>	
        /// <unmanaged-short>ICorDebugMemoryBuffer::GetSize</unmanaged-short>	
        public void GetSize(int cbBufferLengthRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &cbBufferLengthRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMergedAssemblyRecord']/*"/>	
    /// <unmanaged>ICorDebugMergedAssemblyRecord</unmanaged>	
    /// <unmanaged-short>ICorDebugMergedAssemblyRecord</unmanaged-short>	
    [Guid("FAA8637B-3BBE-4671-8E26-3B59875B922A")]
    public partial class MergedAssemblyRecord : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.MergedAssemblyRecord"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public MergedAssemblyRecord(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.MergedAssemblyRecord"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.MergedAssemblyRecord(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.MergedAssemblyRecord(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMergedAssemblyRecord::GetSimpleName']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMergedAssemblyRecord::GetSimpleName([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugMergedAssemblyRecord::GetSimpleName</unmanaged-short>	
        public void GetSimpleName(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="majorRef">No documentation.</param>	
        /// <param name="minorRef">No documentation.</param>	
        /// <param name="buildRef">No documentation.</param>	
        /// <param name="revisionRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMergedAssemblyRecord::GetVersion']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMergedAssemblyRecord::GetVersion([In] unsigned short* pMajor,[In] unsigned short* pMinor,[In] unsigned short* pBuild,[In] unsigned short* pRevision)</unmanaged>	
        /// <unmanaged-short>ICorDebugMergedAssemblyRecord::GetVersion</unmanaged-short>	
        public void GetVersion(short majorRef, short minorRef, short buildRef, short revisionRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &majorRef, &minorRef, &buildRef, &revisionRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchCulture">No documentation.</param>	
        /// <param name="cchCultureRef">No documentation.</param>	
        /// <param name="szCulture">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMergedAssemblyRecord::GetCulture']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMergedAssemblyRecord::GetCulture([In] unsigned int cchCulture,[In] unsigned int* pcchCulture,[In] wchar_t* szCulture)</unmanaged>	
        /// <unmanaged-short>ICorDebugMergedAssemblyRecord::GetCulture</unmanaged-short>	
        public void GetCulture(int cchCulture, int cchCultureRef, string szCulture)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szCulture_ = szCulture)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchCulture, &cchCultureRef, (void*)szCulture_, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbPublicKey">No documentation.</param>	
        /// <param name="cbPublicKeyRef">No documentation.</param>	
        /// <param name="bPublicKeyRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMergedAssemblyRecord::GetPublicKey']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMergedAssemblyRecord::GetPublicKey([In] unsigned int cbPublicKey,[In] unsigned int* pcbPublicKey,[In] unsigned char* pbPublicKey)</unmanaged>	
        /// <unmanaged-short>ICorDebugMergedAssemblyRecord::GetPublicKey</unmanaged-short>	
        public void GetPublicKey(int cbPublicKey, int cbPublicKeyRef, byte bPublicKeyRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cbPublicKey, &cbPublicKeyRef, &bPublicKeyRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbPublicKeyToken">No documentation.</param>	
        /// <param name="cbPublicKeyTokenRef">No documentation.</param>	
        /// <param name="bPublicKeyTokenRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMergedAssemblyRecord::GetPublicKeyToken']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMergedAssemblyRecord::GetPublicKeyToken([In] unsigned int cbPublicKeyToken,[In] unsigned int* pcbPublicKeyToken,[In] unsigned char* pbPublicKeyToken)</unmanaged>	
        /// <unmanaged-short>ICorDebugMergedAssemblyRecord::GetPublicKeyToken</unmanaged-short>	
        public void GetPublicKeyToken(int cbPublicKeyToken, int cbPublicKeyTokenRef, byte bPublicKeyTokenRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cbPublicKeyToken, &cbPublicKeyTokenRef, &bPublicKeyTokenRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="indexRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMergedAssemblyRecord::GetIndex']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMergedAssemblyRecord::GetIndex([In] unsigned int* pIndex)</unmanaged>	
        /// <unmanaged-short>ICorDebugMergedAssemblyRecord::GetIndex</unmanaged-short>	
        public void GetIndex(int indexRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &indexRef, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMetaDataLocator']/*"/>	
    /// <unmanaged>ICorDebugMetaDataLocator</unmanaged>	
    /// <unmanaged-short>ICorDebugMetaDataLocator</unmanaged-short>	
    [Guid("7cef8ba9-2ef7-42bf-973f-4171474f87d9")]
    public partial class MetaDataLocator : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.MetaDataLocator"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public MetaDataLocator(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.MetaDataLocator"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.MetaDataLocator(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.MetaDataLocator(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="wszImagePath">No documentation.</param>	
        /// <param name="dwImageTimeStamp">No documentation.</param>	
        /// <param name="dwImageSize">No documentation.</param>	
        /// <param name="cchPathBuffer">No documentation.</param>	
        /// <param name="cchPathBufferRef">No documentation.</param>	
        /// <param name="wszPathBuffer">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMetaDataLocator::GetMetaData']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMetaDataLocator::GetMetaData([In] const wchar_t* wszImagePath,[In] unsigned int dwImageTimeStamp,[In] unsigned int dwImageSize,[In] unsigned int cchPathBuffer,[Out] unsigned int* pcchPathBuffer,[Out, Buffer] wchar_t* wszPathBuffer)</unmanaged>	
        /// <unmanaged-short>ICorDebugMetaDataLocator::GetMetaData</unmanaged-short>	
        public void GetMetaData(string wszImagePath, int dwImageTimeStamp, int dwImageSize, int cchPathBuffer, out int cchPathBufferRef, System.IntPtr wszPathBuffer)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* wszImagePath_ = wszImagePath)
                fixed (void* cchPathBufferRef_ = &cchPathBufferRef)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)wszImagePath_, dwImageTimeStamp, dwImageSize, cchPathBuffer, cchPathBufferRef_, (void*)wszPathBuffer, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule']/*"/>	
    /// <unmanaged>ICorDebugModule</unmanaged>	
    /// <unmanaged-short>ICorDebugModule</unmanaged-short>	
    [Guid("dba2d8c1-e5c5-4069-8c13-10a7c6abf43d")]
    public partial class Module : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Module"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Module(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Module"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Module(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Module(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetProcess']/*"/>	
        /// <unmanaged>GetProcess</unmanaged>	
        /// <unmanaged-short>GetProcess</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugModule::GetProcess([In] ICorDebugProcess** ppProcess)</unmanaged>
        public CoreDebugger.Process Process
        {
            get { CoreDebugger.Process __output__; GetProcess(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetAssembly']/*"/>	
        /// <unmanaged>GetAssembly</unmanaged>	
        /// <unmanaged-short>GetAssembly</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugModule::GetAssembly([In] ICorDebugAssembly** ppAssembly)</unmanaged>
        public CoreDebugger.Assembly Assembly
        {
            get { CoreDebugger.Assembly __output__; GetAssembly(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetEditAndContinueSnapshot']/*"/>	
        /// <unmanaged>GetEditAndContinueSnapshot</unmanaged>	
        /// <unmanaged-short>GetEditAndContinueSnapshot</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugModule::GetEditAndContinueSnapshot([In] ICorDebugEditAndContinueSnapshot** ppEditAndContinueSnapshot)</unmanaged>
        public CoreDebugger.EditAndContinueSnapshot EditAndContinueSnapshot
        {
            get { CoreDebugger.EditAndContinueSnapshot __output__; GetEditAndContinueSnapshot(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetProcess']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetProcess([In] ICorDebugProcess** ppProcess)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetProcess</unmanaged-short>	
        internal void GetProcess(out CoreDebugger.Process processOut)
        {
            unsafe
            {
                IntPtr processOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &processOut_, ((void**)(*(void**)_nativePointer))[3]);
                processOut = (processOut_ == IntPtr.Zero) ? null : new CoreDebugger.Process(processOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="addressRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetBaseAddress']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetBaseAddress([In] unsigned longlong* pAddress)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetBaseAddress</unmanaged-short>	
        public void GetBaseAddress(long addressRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &addressRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="assemblyOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetAssembly']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetAssembly([In] ICorDebugAssembly** ppAssembly)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetAssembly</unmanaged-short>	
        internal void GetAssembly(out CoreDebugger.Assembly assemblyOut)
        {
            unsafe
            {
                IntPtr assemblyOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &assemblyOut_, ((void**)(*(void**)_nativePointer))[5]);
                assemblyOut = (assemblyOut_ == IntPtr.Zero) ? null : new CoreDebugger.Assembly(assemblyOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetName']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetName([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetName</unmanaged-short>	
        public void GetName(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bTrackJITInfo">No documentation.</param>	
        /// <param name="bAllowJitOpts">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::EnableJITDebugging']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::EnableJITDebugging([In] BOOL bTrackJITInfo,[In] BOOL bAllowJitOpts)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::EnableJITDebugging</unmanaged-short>	
        public void EnableJITDebugging(SharpDX.Mathematics.Interop.RawBool bTrackJITInfo, SharpDX.Mathematics.Interop.RawBool bAllowJitOpts)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint51(_nativePointer, bTrackJITInfo, bAllowJitOpts, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bClassLoadCallbacks">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::EnableClassLoadCallbacks']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::EnableClassLoadCallbacks([In] BOOL bClassLoadCallbacks)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::EnableClassLoadCallbacks</unmanaged-short>	
        public void EnableClassLoadCallbacks(SharpDX.Mathematics.Interop.RawBool bClassLoadCallbacks)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, bClassLoadCallbacks, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="methodDef">No documentation.</param>	
        /// <param name="functionOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetFunctionFromToken']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetFunctionFromToken([In] unsigned int methodDef,[In] ICorDebugFunction** ppFunction)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetFunctionFromToken</unmanaged-short>	
        public void GetFunctionFromToken(int methodDef, out CoreDebugger.Function functionOut)
        {
            unsafe
            {
                IntPtr functionOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, methodDef, &functionOut_, ((void**)(*(void**)_nativePointer))[9]);
                functionOut = (functionOut_ == IntPtr.Zero) ? null : new CoreDebugger.Function(functionOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="rva">No documentation.</param>	
        /// <param name="functionOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetFunctionFromRVA']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetFunctionFromRVA([In] unsigned longlong rva,[In] ICorDebugFunction** ppFunction)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetFunctionFromRVA</unmanaged-short>	
        public void GetFunctionFromRVA(long rva, out CoreDebugger.Function functionOut)
        {
            unsafe
            {
                IntPtr functionOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, rva, &functionOut_, ((void**)(*(void**)_nativePointer))[10]);
                functionOut = (functionOut_ == IntPtr.Zero) ? null : new CoreDebugger.Function(functionOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="typeDef">No documentation.</param>	
        /// <param name="classOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetClassFromToken']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetClassFromToken([In] unsigned int typeDef,[In] ICorDebugClass** ppClass)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetClassFromToken</unmanaged-short>	
        public void GetClassFromToken(int typeDef, out CoreDebugger.Class classOut)
        {
            unsafe
            {
                IntPtr classOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, typeDef, &classOut_, ((void**)(*(void**)_nativePointer))[11]);
                classOut = (classOut_ == IntPtr.Zero) ? null : new CoreDebugger.Class(classOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="breakpointOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::CreateBreakpoint']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::CreateBreakpoint([In] ICorDebugModuleBreakpoint** ppBreakpoint)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::CreateBreakpoint</unmanaged-short>	
        public void CreateBreakpoint(out CoreDebugger.ModuleBreakpoint breakpointOut)
        {
            unsafe
            {
                IntPtr breakpointOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &breakpointOut_, ((void**)(*(void**)_nativePointer))[12]);
                breakpointOut = (breakpointOut_ == IntPtr.Zero) ? null : new CoreDebugger.ModuleBreakpoint(breakpointOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="editAndContinueSnapshotOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetEditAndContinueSnapshot']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetEditAndContinueSnapshot([In] ICorDebugEditAndContinueSnapshot** ppEditAndContinueSnapshot)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetEditAndContinueSnapshot</unmanaged-short>	
        internal void GetEditAndContinueSnapshot(out CoreDebugger.EditAndContinueSnapshot editAndContinueSnapshotOut)
        {
            unsafe
            {
                IntPtr editAndContinueSnapshotOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &editAndContinueSnapshotOut_, ((void**)(*(void**)_nativePointer))[13]);
                editAndContinueSnapshotOut = (editAndContinueSnapshotOut_ == IntPtr.Zero) ? null : new CoreDebugger.EditAndContinueSnapshot(editAndContinueSnapshotOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="riid">No documentation.</param>	
        /// <param name="objOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetMetaDataInterface']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetMetaDataInterface([In] const GUID&amp; riid,[In] IUnknown** ppObj)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetMetaDataInterface</unmanaged-short>	
        public void GetMetaDataInterface(System.Guid riid, out SharpDX.ComObject objOut)
        {
            unsafe
            {
                IntPtr objOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &riid, &objOut_, ((void**)(*(void**)_nativePointer))[14]);
                objOut = (objOut_ == IntPtr.Zero) ? null : new SharpDX.ComObject(objOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="tokenRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetToken']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetToken([In] unsigned int* pToken)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetToken</unmanaged-short>	
        public void GetToken(int tokenRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &tokenRef, ((void**)(*(void**)_nativePointer))[15]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dynamicRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::IsDynamic']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::IsDynamic([In] BOOL* pDynamic)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::IsDynamic</unmanaged-short>	
        public void IsDynamic(SharpDX.Mathematics.Interop.RawBool dynamicRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &dynamicRef, ((void**)(*(void**)_nativePointer))[16]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fieldDef">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetGlobalVariableValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetGlobalVariableValue([In] unsigned int fieldDef,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetGlobalVariableValue</unmanaged-short>	
        public void GetGlobalVariableValue(int fieldDef, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, fieldDef, &valueOut_, ((void**)(*(void**)_nativePointer))[17]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cBytesRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::GetSize']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::GetSize([In] unsigned int* pcBytes)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::GetSize</unmanaged-short>	
        public void GetSize(int cBytesRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &cBytesRef, ((void**)(*(void**)_nativePointer))[18]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="inMemoryRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule::IsInMemory']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule::IsInMemory([In] BOOL* pInMemory)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule::IsInMemory</unmanaged-short>	
        public void IsInMemory(SharpDX.Mathematics.Interop.RawBool inMemoryRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &inMemoryRef, ((void**)(*(void**)_nativePointer))[19]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule2']/*"/>	
    /// <unmanaged>ICorDebugModule2</unmanaged>	
    /// <unmanaged-short>ICorDebugModule2</unmanaged-short>	
    [Guid("7FCC5FB5-49C0-41de-9938-3B88B5B9ADD7")]
    public partial class Module2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Module2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Module2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Module2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Module2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Module2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bIsJustMyCode">No documentation.</param>	
        /// <param name="cTokens">No documentation.</param>	
        /// <param name="tokensRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule2::SetJMCStatus']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule2::SetJMCStatus([In] BOOL bIsJustMyCode,[In] unsigned int cTokens,[In] unsigned int* pTokens)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule2::SetJMCStatus</unmanaged-short>	
        public void SetJMCStatus(SharpDX.Mathematics.Interop.RawBool bIsJustMyCode, int cTokens, int tokensRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint52(_nativePointer, bIsJustMyCode, cTokens, &tokensRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbMetadata">No documentation.</param>	
        /// <param name="bMetadataRef">No documentation.</param>	
        /// <param name="cbIL">No documentation.</param>	
        /// <param name="bILRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule2::ApplyChanges']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule2::ApplyChanges([In] unsigned int cbMetadata,[In] unsigned char* pbMetadata,[In] unsigned int cbIL,[In] unsigned char* pbIL)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule2::ApplyChanges</unmanaged-short>	
        public void ApplyChanges(int cbMetadata, byte bMetadataRef, int cbIL, byte bILRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cbMetadata, &bMetadataRef, cbIL, &bILRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwFlags">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule2::SetJITCompilerFlags']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule2::SetJITCompilerFlags([In] unsigned int dwFlags)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule2::SetJITCompilerFlags</unmanaged-short>	
        public void SetJITCompilerFlags(int dwFlags)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, dwFlags, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwFlagsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule2::GetJITCompilerFlags']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule2::GetJITCompilerFlags([In] unsigned int* pdwFlags)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule2::GetJITCompilerFlags</unmanaged-short>	
        public void GetJITCompilerFlags(int dwFlagsRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &dwFlagsRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="tkAssemblyRef">No documentation.</param>	
        /// <param name="assemblyOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule2::ResolveAssembly']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule2::ResolveAssembly([In] unsigned int tkAssemblyRef,[In] ICorDebugAssembly** ppAssembly)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule2::ResolveAssembly</unmanaged-short>	
        public void ResolveAssembly(int tkAssemblyRef, out CoreDebugger.Assembly assemblyOut)
        {
            unsafe
            {
                IntPtr assemblyOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, tkAssemblyRef, &assemblyOut_, ((void**)(*(void**)_nativePointer))[7]);
                assemblyOut = (assemblyOut_ == IntPtr.Zero) ? null : new CoreDebugger.Assembly(assemblyOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule3']/*"/>	
    /// <unmanaged>ICorDebugModule3</unmanaged>	
    /// <unmanaged-short>ICorDebugModule3</unmanaged-short>	
    [Guid("86F012BF-FF15-4372-BD30-B6F11CAAE1DD")]
    public partial class Module3 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Module3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Module3(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Module3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Module3(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Module3(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="riid">No documentation.</param>	
        /// <param name="objOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModule3::CreateReaderForInMemorySymbols']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModule3::CreateReaderForInMemorySymbols([In] const GUID&amp; riid,[In] void** ppObj)</unmanaged>	
        /// <unmanaged-short>ICorDebugModule3::CreateReaderForInMemorySymbols</unmanaged-short>	
        public void CreateReaderForInMemorySymbols(System.Guid riid, System.IntPtr objOut)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &riid, (void*)objOut, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModuleBreakpoint']/*"/>	
    /// <unmanaged>ICorDebugModuleBreakpoint</unmanaged>	
    /// <unmanaged-short>ICorDebugModuleBreakpoint</unmanaged-short>	
    [Guid("CC7BCAEA-8A68-11d2-983C-0000F808342D")]
    public partial class ModuleBreakpoint : CoreDebugger.Breakpoint
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ModuleBreakpoint"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ModuleBreakpoint(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ModuleBreakpoint"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ModuleBreakpoint(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ModuleBreakpoint(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModuleBreakpoint::GetModule']/*"/>	
        /// <unmanaged>GetModule</unmanaged>	
        /// <unmanaged-short>GetModule</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugModuleBreakpoint::GetModule([In] ICorDebugModule** ppModule)</unmanaged>
        public CoreDebugger.Module Module
        {
            get { CoreDebugger.Module __output__; GetModule(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="moduleOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModuleBreakpoint::GetModule']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModuleBreakpoint::GetModule([In] ICorDebugModule** ppModule)</unmanaged>	
        /// <unmanaged-short>ICorDebugModuleBreakpoint::GetModule</unmanaged-short>	
        internal void GetModule(out CoreDebugger.Module moduleOut)
        {
            unsafe
            {
                IntPtr moduleOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &moduleOut_, ((void**)(*(void**)_nativePointer))[5]);
                moduleOut = (moduleOut_ == IntPtr.Zero) ? null : new CoreDebugger.Module(moduleOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModuleDebugEvent']/*"/>	
    /// <unmanaged>ICorDebugModuleDebugEvent</unmanaged>	
    /// <unmanaged-short>ICorDebugModuleDebugEvent</unmanaged-short>	
    [Guid("51A15E8D-9FFF-4864-9B87-F4FBDEA747A2")]
    public partial class ModuleDebugEvent : CoreDebugger.DebugEvent
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ModuleDebugEvent"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ModuleDebugEvent(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ModuleDebugEvent"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ModuleDebugEvent(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ModuleDebugEvent(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModuleDebugEvent::GetModule']/*"/>	
        /// <unmanaged>GetModule</unmanaged>	
        /// <unmanaged-short>GetModule</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugModuleDebugEvent::GetModule([In] ICorDebugModule** ppModule)</unmanaged>
        public CoreDebugger.Module Module
        {
            get { CoreDebugger.Module __output__; GetModule(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="moduleOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModuleDebugEvent::GetModule']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModuleDebugEvent::GetModule([In] ICorDebugModule** ppModule)</unmanaged>	
        /// <unmanaged-short>ICorDebugModuleDebugEvent::GetModule</unmanaged-short>	
        internal void GetModule(out CoreDebugger.Module moduleOut)
        {
            unsafe
            {
                IntPtr moduleOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &moduleOut_, ((void**)(*(void**)_nativePointer))[5]);
                moduleOut = (moduleOut_ == IntPtr.Zero) ? null : new CoreDebugger.Module(moduleOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModuleEnum']/*"/>	
    /// <unmanaged>ICorDebugModuleEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugModuleEnum</unmanaged-short>	
    [Guid("CC7BCB09-8A68-11d2-983C-0000F808342D")]
    public partial class ModuleEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ModuleEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ModuleEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ModuleEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ModuleEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ModuleEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="modules">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugModuleEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugModuleEnum::Next([In] unsigned int celt,[In] ICorDebugModule** modules,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugModuleEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.Module modules, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr modules_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &modules_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                modules = (modules_ == IntPtr.Zero) ? null : new CoreDebugger.Module(modules_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMutableDataTarget']/*"/>	
    /// <unmanaged>ICorDebugMutableDataTarget</unmanaged>	
    /// <unmanaged-short>ICorDebugMutableDataTarget</unmanaged-short>	
    [Guid("A1B8A756-3CB6-4CCB-979F-3DF999673A59")]
    public partial class MutableDataTarget : CoreDebugger.DataTarget
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.MutableDataTarget"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public MutableDataTarget(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.MutableDataTarget"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.MutableDataTarget(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.MutableDataTarget(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="address">No documentation.</param>	
        /// <param name="bufferRef">No documentation.</param>	
        /// <param name="bytesRequested">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMutableDataTarget::WriteVirtual']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMutableDataTarget::WriteVirtual([In] unsigned longlong address,[In] const unsigned char* pBuffer,[In] unsigned int bytesRequested)</unmanaged>	
        /// <unmanaged-short>ICorDebugMutableDataTarget::WriteVirtual</unmanaged-short>	
        public void WriteVirtual(long address, byte bufferRef, int bytesRequested)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, address, &bufferRef, bytesRequested, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwThreadID">No documentation.</param>	
        /// <param name="contextSize">No documentation.</param>	
        /// <param name="contextRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMutableDataTarget::SetThreadContext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMutableDataTarget::SetThreadContext([In] unsigned int dwThreadID,[In] unsigned int contextSize,[In] const unsigned char* pContext)</unmanaged>	
        /// <unmanaged-short>ICorDebugMutableDataTarget::SetThreadContext</unmanaged-short>	
        public void SetThreadContext(int dwThreadID, int contextSize, byte contextRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, dwThreadID, contextSize, &contextRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwThreadId">No documentation.</param>	
        /// <param name="continueStatus">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugMutableDataTarget::ContinueStatusChanged']/*"/>	
        /// <unmanaged>HRESULT ICorDebugMutableDataTarget::ContinueStatusChanged([In] unsigned int dwThreadId,[In] unsigned int continueStatus)</unmanaged>	
        /// <unmanaged-short>ICorDebugMutableDataTarget::ContinueStatusChanged</unmanaged-short>	
        public void ContinueStatusChanged(int dwThreadId, int continueStatus)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, dwThreadId, continueStatus, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame']/*"/>	
    /// <unmanaged>ICorDebugNativeFrame</unmanaged>	
    /// <unmanaged-short>ICorDebugNativeFrame</unmanaged-short>	
    [Guid("03E26314-4F76-11d3-88C6-006097945418")]
    public partial class NativeFrame : CoreDebugger.Frame
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.NativeFrame"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public NativeFrame(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.NativeFrame"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.NativeFrame(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.NativeFrame(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame::SetIP']/*"/>	
        /// <unmanaged>SetIP</unmanaged>	
        /// <unmanaged-short>SetIP</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame::SetIP([In] unsigned int nOffset)</unmanaged>
        public int IP
        {
            set { SetIP(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame::GetRegisterSet']/*"/>	
        /// <unmanaged>GetRegisterSet</unmanaged>	
        /// <unmanaged-short>GetRegisterSet</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame::GetRegisterSet([In] ICorDebugRegisterSet** ppRegisters)</unmanaged>
        public CoreDebugger.RegisterSet RegisterSet
        {
            get { CoreDebugger.RegisterSet __output__; GetRegisterSet(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nOffsetRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame::GetIP']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame::GetIP([In] unsigned int* pnOffset)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame::GetIP</unmanaged-short>	
        public void GetIP(int nOffsetRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &nOffsetRef, ((void**)(*(void**)_nativePointer))[11]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nOffset">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame::SetIP']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame::SetIP([In] unsigned int nOffset)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame::SetIP</unmanaged-short>	
        internal void SetIP(int nOffset)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, nOffset, ((void**)(*(void**)_nativePointer))[12]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="registersOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame::GetRegisterSet']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame::GetRegisterSet([In] ICorDebugRegisterSet** ppRegisters)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame::GetRegisterSet</unmanaged-short>	
        internal void GetRegisterSet(out CoreDebugger.RegisterSet registersOut)
        {
            unsafe
            {
                IntPtr registersOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &registersOut_, ((void**)(*(void**)_nativePointer))[13]);
                registersOut = (registersOut_ == IntPtr.Zero) ? null : new CoreDebugger.RegisterSet(registersOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="reg">No documentation.</param>	
        /// <param name="cbSigBlob">No documentation.</param>	
        /// <param name="pvSigBlob">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame::GetLocalRegisterValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame::GetLocalRegisterValue([In] CorDebugRegister reg,[In] unsigned int cbSigBlob,[In] SIZE_T pvSigBlob,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame::GetLocalRegisterValue</unmanaged-short>	
        public void GetLocalRegisterValue(CoreDebugger.CorDebugRegister reg, int cbSigBlob, SharpDX.PointerSize pvSigBlob, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)reg), cbSigBlob, (void*)pvSigBlob, &valueOut_, ((void**)(*(void**)_nativePointer))[14]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="highWordReg">No documentation.</param>	
        /// <param name="lowWordReg">No documentation.</param>	
        /// <param name="cbSigBlob">No documentation.</param>	
        /// <param name="pvSigBlob">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame::GetLocalDoubleRegisterValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame::GetLocalDoubleRegisterValue([In] CorDebugRegister highWordReg,[In] CorDebugRegister lowWordReg,[In] unsigned int cbSigBlob,[In] SIZE_T pvSigBlob,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame::GetLocalDoubleRegisterValue</unmanaged-short>	
        public void GetLocalDoubleRegisterValue(CoreDebugger.CorDebugRegister highWordReg, CoreDebugger.CorDebugRegister lowWordReg, int cbSigBlob, SharpDX.PointerSize pvSigBlob, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)highWordReg), unchecked((int)lowWordReg), cbSigBlob, (void*)pvSigBlob, &valueOut_, ((void**)(*(void**)_nativePointer))[15]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="address">No documentation.</param>	
        /// <param name="cbSigBlob">No documentation.</param>	
        /// <param name="pvSigBlob">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame::GetLocalMemoryValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame::GetLocalMemoryValue([In] unsigned longlong address,[In] unsigned int cbSigBlob,[In] SIZE_T pvSigBlob,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame::GetLocalMemoryValue</unmanaged-short>	
        public void GetLocalMemoryValue(long address, int cbSigBlob, SharpDX.PointerSize pvSigBlob, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, address, cbSigBlob, (void*)pvSigBlob, &valueOut_, ((void**)(*(void**)_nativePointer))[16]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="highWordReg">No documentation.</param>	
        /// <param name="lowWordAddress">No documentation.</param>	
        /// <param name="cbSigBlob">No documentation.</param>	
        /// <param name="pvSigBlob">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame::GetLocalRegisterMemoryValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame::GetLocalRegisterMemoryValue([In] CorDebugRegister highWordReg,[In] unsigned longlong lowWordAddress,[In] unsigned int cbSigBlob,[In] SIZE_T pvSigBlob,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame::GetLocalRegisterMemoryValue</unmanaged-short>	
        public void GetLocalRegisterMemoryValue(CoreDebugger.CorDebugRegister highWordReg, long lowWordAddress, int cbSigBlob, SharpDX.PointerSize pvSigBlob, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)highWordReg), lowWordAddress, cbSigBlob, (void*)pvSigBlob, &valueOut_, ((void**)(*(void**)_nativePointer))[17]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="highWordAddress">No documentation.</param>	
        /// <param name="lowWordRegister">No documentation.</param>	
        /// <param name="cbSigBlob">No documentation.</param>	
        /// <param name="pvSigBlob">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame::GetLocalMemoryRegisterValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame::GetLocalMemoryRegisterValue([In] unsigned longlong highWordAddress,[In] CorDebugRegister lowWordRegister,[In] unsigned int cbSigBlob,[In] SIZE_T pvSigBlob,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame::GetLocalMemoryRegisterValue</unmanaged-short>	
        public void GetLocalMemoryRegisterValue(long highWordAddress, CoreDebugger.CorDebugRegister lowWordRegister, int cbSigBlob, SharpDX.PointerSize pvSigBlob, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, highWordAddress, unchecked((int)lowWordRegister), cbSigBlob, (void*)pvSigBlob, &valueOut_, ((void**)(*(void**)_nativePointer))[18]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nOffset">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame::CanSetIP']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame::CanSetIP([In] unsigned int nOffset)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame::CanSetIP</unmanaged-short>	
        public void CanSetIP(int nOffset)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, nOffset, ((void**)(*(void**)_nativePointer))[19]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame2']/*"/>	
    /// <unmanaged>ICorDebugNativeFrame2</unmanaged>	
    /// <unmanaged-short>ICorDebugNativeFrame2</unmanaged-short>	
    [Guid("35389FF1-3684-4c55-A2EE-210F26C60E5E")]
    public partial class NativeFrame2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.NativeFrame2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public NativeFrame2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.NativeFrame2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.NativeFrame2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.NativeFrame2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="isChildRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame2::IsChild']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame2::IsChild([In] BOOL* pIsChild)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame2::IsChild</unmanaged-short>	
        public void IsChild(SharpDX.Mathematics.Interop.RawBool isChildRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &isChildRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="potentialParentFrameRef">No documentation.</param>	
        /// <param name="isParentRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame2::IsMatchingParentFrame']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame2::IsMatchingParentFrame([In] ICorDebugNativeFrame2* pPotentialParentFrame,[In] BOOL* pIsParent)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame2::IsMatchingParentFrame</unmanaged-short>	
        public void IsMatchingParentFrame(CoreDebugger.NativeFrame2 potentialParentFrameRef, SharpDX.Mathematics.Interop.RawBool isParentRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((potentialParentFrameRef == null) ? IntPtr.Zero : potentialParentFrameRef.NativePointer), &isParentRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="sizeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugNativeFrame2::GetStackParameterSize']/*"/>	
        /// <unmanaged>HRESULT ICorDebugNativeFrame2::GetStackParameterSize([In] unsigned int* pSize)</unmanaged>	
        /// <unmanaged-short>ICorDebugNativeFrame2::GetStackParameterSize</unmanaged-short>	
        public void GetStackParameterSize(int sizeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &sizeRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectEnum']/*"/>	
    /// <unmanaged>ICorDebugObjectEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugObjectEnum</unmanaged-short>	
    [Guid("CC7BCB02-8A68-11d2-983C-0000F808342D")]
    public partial class ObjectEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ObjectEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ObjectEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ObjectEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ObjectEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ObjectEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="objects">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugObjectEnum::Next([In] unsigned int celt,[In] unsigned longlong* objects,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugObjectEnum::Next</unmanaged-short>	
        public void Next(int celt, long objects, int celtFetchedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &objects, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue']/*"/>	
    /// <unmanaged>ICorDebugObjectValue</unmanaged>	
    /// <unmanaged-short>ICorDebugObjectValue</unmanaged-short>	
    [Guid("18AD3D6E-B7D2-11d2-BD04-0000F80849BD")]
    public partial class ObjectValue : CoreDebugger.Value
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ObjectValue"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ObjectValue(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ObjectValue"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ObjectValue(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ObjectValue(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue::GetClass']/*"/>	
        /// <unmanaged>GetClass</unmanaged>	
        /// <unmanaged-short>GetClass</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugObjectValue::GetClass([In] ICorDebugClass** ppClass)</unmanaged>
        public CoreDebugger.Class Class
        {
            get { CoreDebugger.Class __output__; GetClass(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue::GetContext']/*"/>	
        /// <unmanaged>GetContext</unmanaged>	
        /// <unmanaged-short>GetContext</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugObjectValue::GetContext([In] ICorDebugContext** ppContext)</unmanaged>
        public CoreDebugger.Context Context
        {
            get { CoreDebugger.Context __output__; GetContext(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue::GetManagedCopy']/*"/>	
        /// <unmanaged>GetManagedCopy</unmanaged>	
        /// <unmanaged-short>GetManagedCopy</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugObjectValue::GetManagedCopy([In] IUnknown** ppObject)</unmanaged>
        public SharpDX.ComObject ManagedCopy
        {
            get { SharpDX.ComObject __output__; GetManagedCopy(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue::SetFromManagedCopy']/*"/>	
        /// <unmanaged>SetFromManagedCopy</unmanaged>	
        /// <unmanaged-short>SetFromManagedCopy</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugObjectValue::SetFromManagedCopy([In] IUnknown* pObject)</unmanaged>
        public SharpDX.ComObject FromManagedCopy
        {
            set { SetFromManagedCopy(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="classOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue::GetClass']/*"/>	
        /// <unmanaged>HRESULT ICorDebugObjectValue::GetClass([In] ICorDebugClass** ppClass)</unmanaged>	
        /// <unmanaged-short>ICorDebugObjectValue::GetClass</unmanaged-short>	
        internal void GetClass(out CoreDebugger.Class classOut)
        {
            unsafe
            {
                IntPtr classOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &classOut_, ((void**)(*(void**)_nativePointer))[7]);
                classOut = (classOut_ == IntPtr.Zero) ? null : new CoreDebugger.Class(classOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="classRef">No documentation.</param>	
        /// <param name="fieldDef">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue::GetFieldValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugObjectValue::GetFieldValue([In] ICorDebugClass* pClass,[In] unsigned int fieldDef,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugObjectValue::GetFieldValue</unmanaged-short>	
        public void GetFieldValue(CoreDebugger.Class classRef, int fieldDef, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((classRef == null) ? IntPtr.Zero : classRef.NativePointer), fieldDef, &valueOut_, ((void**)(*(void**)_nativePointer))[8]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="memberRef">No documentation.</param>	
        /// <param name="functionOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue::GetVirtualMethod']/*"/>	
        /// <unmanaged>HRESULT ICorDebugObjectValue::GetVirtualMethod([In] unsigned int memberRef,[In] ICorDebugFunction** ppFunction)</unmanaged>	
        /// <unmanaged-short>ICorDebugObjectValue::GetVirtualMethod</unmanaged-short>	
        public void GetVirtualMethod(int memberRef, out CoreDebugger.Function functionOut)
        {
            unsafe
            {
                IntPtr functionOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, memberRef, &functionOut_, ((void**)(*(void**)_nativePointer))[9]);
                functionOut = (functionOut_ == IntPtr.Zero) ? null : new CoreDebugger.Function(functionOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="contextOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue::GetContext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugObjectValue::GetContext([In] ICorDebugContext** ppContext)</unmanaged>	
        /// <unmanaged-short>ICorDebugObjectValue::GetContext</unmanaged-short>	
        internal void GetContext(out CoreDebugger.Context contextOut)
        {
            unsafe
            {
                IntPtr contextOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &contextOut_, ((void**)(*(void**)_nativePointer))[10]);
                contextOut = (contextOut_ == IntPtr.Zero) ? null : new CoreDebugger.Context(contextOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bIsValueClassRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue::IsValueClass']/*"/>	
        /// <unmanaged>HRESULT ICorDebugObjectValue::IsValueClass([In] BOOL* pbIsValueClass)</unmanaged>	
        /// <unmanaged-short>ICorDebugObjectValue::IsValueClass</unmanaged-short>	
        public void IsValueClass(SharpDX.Mathematics.Interop.RawBool bIsValueClassRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bIsValueClassRef, ((void**)(*(void**)_nativePointer))[11]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="objectOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue::GetManagedCopy']/*"/>	
        /// <unmanaged>HRESULT ICorDebugObjectValue::GetManagedCopy([In] IUnknown** ppObject)</unmanaged>	
        /// <unmanaged-short>ICorDebugObjectValue::GetManagedCopy</unmanaged-short>	
        internal void GetManagedCopy(out SharpDX.ComObject objectOut)
        {
            unsafe
            {
                IntPtr objectOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &objectOut_, ((void**)(*(void**)_nativePointer))[12]);
                objectOut = (objectOut_ == IntPtr.Zero) ? null : new SharpDX.ComObject(objectOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="objectRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue::SetFromManagedCopy']/*"/>	
        /// <unmanaged>HRESULT ICorDebugObjectValue::SetFromManagedCopy([In] IUnknown* pObject)</unmanaged>	
        /// <unmanaged-short>ICorDebugObjectValue::SetFromManagedCopy</unmanaged-short>	
        internal void SetFromManagedCopy(SharpDX.ComObject objectRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((objectRef == null) ? IntPtr.Zero : objectRef.NativePointer), ((void**)(*(void**)_nativePointer))[13]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue2']/*"/>	
    /// <unmanaged>ICorDebugObjectValue2</unmanaged>	
    /// <unmanaged-short>ICorDebugObjectValue2</unmanaged-short>	
    [Guid("49E4A320-4A9B-4eca-B105-229FB7D5009F")]
    public partial class ObjectValue2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ObjectValue2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ObjectValue2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ObjectValue2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ObjectValue2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ObjectValue2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="memberRef">No documentation.</param>	
        /// <param name="functionOut">No documentation.</param>	
        /// <param name="typeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugObjectValue2::GetVirtualMethodAndType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugObjectValue2::GetVirtualMethodAndType([In] unsigned int memberRef,[In] ICorDebugFunction** ppFunction,[In] ICorDebugType** ppType)</unmanaged>	
        /// <unmanaged-short>ICorDebugObjectValue2::GetVirtualMethodAndType</unmanaged-short>	
        public void GetVirtualMethodAndType(int memberRef, out CoreDebugger.Function functionOut, out CoreDebugger.Type typeOut)
        {
            unsafe
            {
                IntPtr functionOut_ = IntPtr.Zero;
                IntPtr typeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, memberRef, &functionOut_, &typeOut_, ((void**)(*(void**)_nativePointer))[3]);
                functionOut = (functionOut_ == IntPtr.Zero) ? null : new CoreDebugger.Function(functionOut_);
                typeOut = (typeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Type(typeOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess']/*"/>	
    /// <unmanaged>ICorDebugProcess</unmanaged>	
    /// <unmanaged-short>ICorDebugProcess</unmanaged-short>	
    [Guid("3d6f5f64-7538-11d3-8d5b-00104b35e7ef")]
    public partial class Process : CoreDebugger.Controller
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Process"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Process(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Process"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Process(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Process(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::GetObjectW']/*"/>	
        /// <unmanaged>GetObjectW</unmanaged>	
        /// <unmanaged-short>GetObjectW</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugProcess::GetObjectW([In] ICorDebugValue** ppObject)</unmanaged>
        public CoreDebugger.Value ObjectW
        {
            get { CoreDebugger.Value __output__; GetObjectW(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwProcessIdRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::GetID']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::GetID([In] unsigned int* pdwProcessId)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::GetID</unmanaged-short>	
        public void GetID(int dwProcessIdRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &dwProcessIdRef, ((void**)(*(void**)_nativePointer))[13]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="hProcessHandleRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::GetHandle']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::GetHandle([In] void** phProcessHandle)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::GetHandle</unmanaged-short>	
        public void GetHandle(System.IntPtr hProcessHandleRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)hProcessHandleRef, ((void**)(*(void**)_nativePointer))[14]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwThreadId">No documentation.</param>	
        /// <param name="threadOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::GetThread']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::GetThread([In] unsigned int dwThreadId,[In] ICorDebugThread** ppThread)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::GetThread</unmanaged-short>	
        public void GetThread(int dwThreadId, out CoreDebugger.Thread threadOut)
        {
            unsafe
            {
                IntPtr threadOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, dwThreadId, &threadOut_, ((void**)(*(void**)_nativePointer))[15]);
                threadOut = (threadOut_ == IntPtr.Zero) ? null : new CoreDebugger.Thread(threadOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="objectsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::EnumerateObjects']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::EnumerateObjects([In] ICorDebugObjectEnum** ppObjects)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::EnumerateObjects</unmanaged-short>	
        public void EnumerateObjects(out CoreDebugger.ObjectEnum objectsOut)
        {
            unsafe
            {
                IntPtr objectsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &objectsOut_, ((void**)(*(void**)_nativePointer))[16]);
                objectsOut = (objectsOut_ == IntPtr.Zero) ? null : new CoreDebugger.ObjectEnum(objectsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="address">No documentation.</param>	
        /// <param name="bTransitionStubRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::IsTransitionStub']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::IsTransitionStub([In] unsigned longlong address,[In] BOOL* pbTransitionStub)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::IsTransitionStub</unmanaged-short>	
        public void IsTransitionStub(long address, SharpDX.Mathematics.Interop.RawBool bTransitionStubRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, address, &bTransitionStubRef, ((void**)(*(void**)_nativePointer))[17]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadID">No documentation.</param>	
        /// <param name="bSuspendedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::IsOSSuspended']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::IsOSSuspended([In] unsigned int threadID,[In] BOOL* pbSuspended)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::IsOSSuspended</unmanaged-short>	
        public void IsOSSuspended(int threadID, SharpDX.Mathematics.Interop.RawBool bSuspendedRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, threadID, &bSuspendedRef, ((void**)(*(void**)_nativePointer))[18]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadID">No documentation.</param>	
        /// <param name="contextSize">No documentation.</param>	
        /// <param name="context">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::GetThreadContext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::GetThreadContext([In] unsigned int threadID,[In] unsigned int contextSize,[In] unsigned char* context)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::GetThreadContext</unmanaged-short>	
        public void GetThreadContext(int threadID, int contextSize, byte context)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, threadID, contextSize, &context, ((void**)(*(void**)_nativePointer))[19]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadID">No documentation.</param>	
        /// <param name="contextSize">No documentation.</param>	
        /// <param name="context">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::SetThreadContext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::SetThreadContext([In] unsigned int threadID,[In] unsigned int contextSize,[In] unsigned char* context)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::SetThreadContext</unmanaged-short>	
        public void SetThreadContext(int threadID, int contextSize, byte context)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, threadID, contextSize, &context, ((void**)(*(void**)_nativePointer))[20]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="address">No documentation.</param>	
        /// <param name="size">No documentation.</param>	
        /// <param name="buffer">No documentation.</param>	
        /// <param name="read">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::ReadMemory']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::ReadMemory([In] unsigned longlong address,[In] unsigned int size,[In] unsigned char* buffer,[In] SIZE_T* read)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::ReadMemory</unmanaged-short>	
        public void ReadMemory(long address, int size, byte buffer, SharpDX.PointerSize read)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, address, size, &buffer, &read, ((void**)(*(void**)_nativePointer))[21]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="address">No documentation.</param>	
        /// <param name="size">No documentation.</param>	
        /// <param name="buffer">No documentation.</param>	
        /// <param name="written">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::WriteMemory']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::WriteMemory([In] unsigned longlong address,[In] unsigned int size,[In] unsigned char* buffer,[In] SIZE_T* written)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::WriteMemory</unmanaged-short>	
        public void WriteMemory(long address, int size, byte buffer, SharpDX.PointerSize written)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, address, size, &buffer, &written, ((void**)(*(void**)_nativePointer))[22]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadID">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::ClearCurrentException']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::ClearCurrentException([In] unsigned int threadID)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::ClearCurrentException</unmanaged-short>	
        public void ClearCurrentException(int threadID)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, threadID, ((void**)(*(void**)_nativePointer))[23]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fOnOff">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::EnableLogMessages']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::EnableLogMessages([In] BOOL fOnOff)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::EnableLogMessages</unmanaged-short>	
        public void EnableLogMessages(SharpDX.Mathematics.Interop.RawBool fOnOff)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, fOnOff, ((void**)(*(void**)_nativePointer))[24]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="logSwitchNameRef">No documentation.</param>	
        /// <param name="lLevel">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::ModifyLogSwitch']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::ModifyLogSwitch([In] wchar_t* pLogSwitchName,[In] int lLevel)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::ModifyLogSwitch</unmanaged-short>	
        public void ModifyLogSwitch(string logSwitchNameRef, int lLevel)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* logSwitchNameRef_ = logSwitchNameRef)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)logSwitchNameRef_, lLevel, ((void**)(*(void**)_nativePointer))[25]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::EnumerateAppDomains']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::EnumerateAppDomains([In] ICorDebugAppDomainEnum** ppAppDomains)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::EnumerateAppDomains</unmanaged-short>	
        public void EnumerateAppDomains(out CoreDebugger.AppDomainEnum appDomainsOut)
        {
            unsafe
            {
                IntPtr appDomainsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &appDomainsOut_, ((void**)(*(void**)_nativePointer))[26]);
                appDomainsOut = (appDomainsOut_ == IntPtr.Zero) ? null : new CoreDebugger.AppDomainEnum(appDomainsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="objectOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::GetObjectW']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::GetObjectW([In] ICorDebugValue** ppObject)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::GetObjectW</unmanaged-short>	
        internal void GetObjectW(out CoreDebugger.Value objectOut)
        {
            unsafe
            {
                IntPtr objectOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &objectOut_, ((void**)(*(void**)_nativePointer))[27]);
                objectOut = (objectOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(objectOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fiberCookie">No documentation.</param>	
        /// <param name="threadOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::ThreadForFiberCookie']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::ThreadForFiberCookie([In] unsigned int fiberCookie,[In] ICorDebugThread** ppThread)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::ThreadForFiberCookie</unmanaged-short>	
        public void ThreadForFiberCookie(int fiberCookie, out CoreDebugger.Thread threadOut)
        {
            unsafe
            {
                IntPtr threadOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, fiberCookie, &threadOut_, ((void**)(*(void**)_nativePointer))[28]);
                threadOut = (threadOut_ == IntPtr.Zero) ? null : new CoreDebugger.Thread(threadOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="threadIDRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess::GetHelperThreadID']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess::GetHelperThreadID([In] unsigned int* pThreadID)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess::GetHelperThreadID</unmanaged-short>	
        public void GetHelperThreadID(int threadIDRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &threadIDRef, ((void**)(*(void**)_nativePointer))[29]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess2']/*"/>	
    /// <unmanaged>ICorDebugProcess2</unmanaged>	
    /// <unmanaged-short>ICorDebugProcess2</unmanaged-short>	
    [Guid("AD1B3588-0EF0-4744-A496-AA09A9F80371")]
    public partial class Process2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Process2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Process2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Process2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Process2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Process2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="taskid">No documentation.</param>	
        /// <param name="threadOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess2::GetThreadForTaskID']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess2::GetThreadForTaskID([In] unsigned longlong taskid,[In] ICorDebugThread2** ppThread)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess2::GetThreadForTaskID</unmanaged-short>	
        public void GetThreadForTaskID(long taskid, out CoreDebugger.Thread2 threadOut)
        {
            unsafe
            {
                IntPtr threadOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, taskid, &threadOut_, ((void**)(*(void**)_nativePointer))[3]);
                threadOut = (threadOut_ == IntPtr.Zero) ? null : new CoreDebugger.Thread2(threadOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="version">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess2::GetVersion']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess2::GetVersion([In] COR_VERSION* version)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess2::GetVersion</unmanaged-short>	
        public void GetVersion(CoreDebugger.CorVersion version)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &version, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="address">No documentation.</param>	
        /// <param name="bufsize">No documentation.</param>	
        /// <param name="buffer">No documentation.</param>	
        /// <param name="bufLen">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess2::SetUnmanagedBreakpoint']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess2::SetUnmanagedBreakpoint([In] unsigned longlong address,[In] unsigned int bufsize,[In] unsigned char* buffer,[In] unsigned int* bufLen)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess2::SetUnmanagedBreakpoint</unmanaged-short>	
        public void SetUnmanagedBreakpoint(long address, int bufsize, byte buffer, int bufLen)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, address, bufsize, &buffer, &bufLen, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="address">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess2::ClearUnmanagedBreakpoint']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess2::ClearUnmanagedBreakpoint([In] unsigned longlong address)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess2::ClearUnmanagedBreakpoint</unmanaged-short>	
        public void ClearUnmanagedBreakpoint(long address)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, address, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="pdwFlags">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess2::SetDesiredNGENCompilerFlags']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess2::SetDesiredNGENCompilerFlags([In] unsigned int pdwFlags)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess2::SetDesiredNGENCompilerFlags</unmanaged-short>	
        public void SetDesiredNGENCompilerFlags(int pdwFlags)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, pdwFlags, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwFlagsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess2::GetDesiredNGENCompilerFlags']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess2::GetDesiredNGENCompilerFlags([In] unsigned int* pdwFlags)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess2::GetDesiredNGENCompilerFlags</unmanaged-short>	
        public void GetDesiredNGENCompilerFlags(int dwFlagsRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &dwFlagsRef, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="handle">No documentation.</param>	
        /// <param name="outValueRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess2::GetReferenceValueFromGCHandle']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess2::GetReferenceValueFromGCHandle([In] UINT_PTR handle,[In] ICorDebugReferenceValue** pOutValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess2::GetReferenceValueFromGCHandle</unmanaged-short>	
        public void GetReferenceValueFromGCHandle(System.IntPtr handle, out CoreDebugger.ReferenceValue outValueRef)
        {
            unsafe
            {
                IntPtr outValueRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)handle, &outValueRef_, ((void**)(*(void**)_nativePointer))[9]);
                outValueRef = (outValueRef_ == IntPtr.Zero) ? null : new CoreDebugger.ReferenceValue(outValueRef_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess3']/*"/>	
    /// <unmanaged>ICorDebugProcess3</unmanaged>	
    /// <unmanaged-short>ICorDebugProcess3</unmanaged-short>	
    [Guid("2EE06488-C0D4-42B1-B26D-F3795EF606FB")]
    public partial class Process3 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Process3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Process3(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Process3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Process3(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Process3(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="classRef">No documentation.</param>	
        /// <param name="fEnable">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess3::SetEnableCustomNotification']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess3::SetEnableCustomNotification([In] ICorDebugClass* pClass,[In] BOOL fEnable)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess3::SetEnableCustomNotification</unmanaged-short>	
        public void SetEnableCustomNotification(CoreDebugger.Class classRef, SharpDX.Mathematics.Interop.RawBool fEnable)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint42(_nativePointer, (void*)((classRef == null) ? IntPtr.Zero : classRef.NativePointer), fEnable, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5']/*"/>	
    /// <unmanaged>ICorDebugProcess5</unmanaged>	
    /// <unmanaged-short>ICorDebugProcess5</unmanaged-short>	
    [Guid("21e9d9c0-fcb8-11df-8cff-0800200c9a66")]
    public partial class Process5 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Process5"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Process5(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Process5"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Process5(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Process5(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="heapInfoRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::GetGCHeapInformation']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::GetGCHeapInformation([In] COR_HEAPINFO* pHeapInfo)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::GetGCHeapInformation</unmanaged-short>	
        public void GetGCHeapInformation(ref CoreDebugger.CorHeapinfo heapInfoRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* heapInfoRef_ = &heapInfoRef)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, heapInfoRef_, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="objectsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::EnumerateHeap']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::EnumerateHeap([In] ICorDebugHeapEnum** ppObjects)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::EnumerateHeap</unmanaged-short>	
        public void EnumerateHeap(out CoreDebugger.HeapEnum objectsOut)
        {
            unsafe
            {
                IntPtr objectsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &objectsOut_, ((void**)(*(void**)_nativePointer))[4]);
                objectsOut = (objectsOut_ == IntPtr.Zero) ? null : new CoreDebugger.HeapEnum(objectsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="regionsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::EnumerateHeapRegions']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::EnumerateHeapRegions([In] ICorDebugHeapSegmentEnum** ppRegions)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::EnumerateHeapRegions</unmanaged-short>	
        public void EnumerateHeapRegions(out CoreDebugger.HeapSegmentEnum regionsOut)
        {
            unsafe
            {
                IntPtr regionsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &regionsOut_, ((void**)(*(void**)_nativePointer))[5]);
                regionsOut = (regionsOut_ == IntPtr.Zero) ? null : new CoreDebugger.HeapSegmentEnum(regionsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="addr">No documentation.</param>	
        /// <param name="objectRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::GetObjectW']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::GetObjectW([In] unsigned longlong addr,[In] ICorDebugObjectValue** pObject)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::GetObjectW</unmanaged-short>	
        public void GetObjectW(long addr, out CoreDebugger.ObjectValue objectRef)
        {
            unsafe
            {
                IntPtr objectRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, addr, &objectRef_, ((void**)(*(void**)_nativePointer))[6]);
                objectRef = (objectRef_ == IntPtr.Zero) ? null : new CoreDebugger.ObjectValue(objectRef_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="enumerateWeakReferences">No documentation.</param>	
        /// <param name="enumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::EnumerateGCReferences']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::EnumerateGCReferences([In] BOOL enumerateWeakReferences,[In] ICorDebugGCReferenceEnum** ppEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::EnumerateGCReferences</unmanaged-short>	
        public void EnumerateGCReferences(SharpDX.Mathematics.Interop.RawBool enumerateWeakReferences, out CoreDebugger.GCReferenceEnum enumOut)
        {
            unsafe
            {
                IntPtr enumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint43(_nativePointer, enumerateWeakReferences, &enumOut_, ((void**)(*(void**)_nativePointer))[7]);
                enumOut = (enumOut_ == IntPtr.Zero) ? null : new CoreDebugger.GCReferenceEnum(enumOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="types">No documentation.</param>	
        /// <param name="enumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::EnumerateHandles']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::EnumerateHandles([In] CorGCReferenceType types,[In] ICorDebugGCReferenceEnum** ppEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::EnumerateHandles</unmanaged-short>	
        public void EnumerateHandles(CoreDebugger.CorGCReferenceType types, out CoreDebugger.GCReferenceEnum enumOut)
        {
            unsafe
            {
                IntPtr enumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)types), &enumOut_, ((void**)(*(void**)_nativePointer))[8]);
                enumOut = (enumOut_ == IntPtr.Zero) ? null : new CoreDebugger.GCReferenceEnum(enumOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="obj">No documentation.</param>	
        /// <param name="idRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::GetTypeID']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::GetTypeID([In] unsigned longlong obj,[In] COR_TYPEID* pId)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::GetTypeID</unmanaged-short>	
        public void GetTypeID(long obj, CoreDebugger.CorTypeid idRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, obj, &idRef, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="id">No documentation.</param>	
        /// <param name="typeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::GetTypeForTypeID']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::GetTypeForTypeID([In] COR_TYPEID id,[In] ICorDebugType** ppType)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::GetTypeForTypeID</unmanaged-short>	
        public void GetTypeForTypeID(CoreDebugger.CorTypeid id, out CoreDebugger.Type typeOut)
        {
            unsafe
            {
                IntPtr typeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint44(_nativePointer, id, &typeOut_, ((void**)(*(void**)_nativePointer))[10]);
                typeOut = (typeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Type(typeOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="id">No documentation.</param>	
        /// <param name="layoutRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::GetArrayLayout']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::GetArrayLayout([In] COR_TYPEID id,[In] COR_ARRAY_LAYOUT* pLayout)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::GetArrayLayout</unmanaged-short>	
        public void GetArrayLayout(CoreDebugger.CorTypeid id, ref CoreDebugger.CorArrayLayout layoutRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* layoutRef_ = &layoutRef)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint44(_nativePointer, id, layoutRef_, ((void**)(*(void**)_nativePointer))[11]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="id">No documentation.</param>	
        /// <param name="layoutRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::GetTypeLayout']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::GetTypeLayout([In] COR_TYPEID id,[In] COR_TYPE_LAYOUT* pLayout)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::GetTypeLayout</unmanaged-short>	
        public void GetTypeLayout(CoreDebugger.CorTypeid id, ref CoreDebugger.CorTypeLayout layoutRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* layoutRef_ = &layoutRef)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint44(_nativePointer, id, layoutRef_, ((void**)(*(void**)_nativePointer))[12]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="id">No documentation.</param>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="fields">No documentation.</param>	
        /// <param name="celtNeededRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::GetTypeFields']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::GetTypeFields([In] COR_TYPEID id,[In] unsigned int celt,[In] COR_FIELD* fields,[In] unsigned int* pceltNeeded)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::GetTypeFields</unmanaged-short>	
        public void GetTypeFields(CoreDebugger.CorTypeid id, int celt, ref CoreDebugger.CorField fields, int celtNeededRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* fields_ = &fields)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint45(_nativePointer, id, celt, fields_, &celtNeededRef, ((void**)(*(void**)_nativePointer))[13]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="ePolicy">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess5::EnableNGENPolicy']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess5::EnableNGENPolicy([In] CorDebugNGENPolicy ePolicy)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess5::EnableNGENPolicy</unmanaged-short>	
        public void EnableNGENPolicy(CoreDebugger.CorDebugNGENPolicy ePolicy)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)ePolicy), ((void**)(*(void**)_nativePointer))[14]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess6']/*"/>	
    /// <unmanaged>ICorDebugProcess6</unmanaged>	
    /// <unmanaged-short>ICorDebugProcess6</unmanaged-short>	
    [Guid("11588775-7205-4CEB-A41A-93753C3153E9")]
    public partial class Process6 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Process6"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Process6(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Process6"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Process6(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Process6(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="recordRef">No documentation.</param>	
        /// <param name="countBytes">No documentation.</param>	
        /// <param name="format">No documentation.</param>	
        /// <param name="dwFlags">No documentation.</param>	
        /// <param name="dwThreadId">No documentation.</param>	
        /// <param name="eventOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess6::DecodeEvent']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess6::DecodeEvent([In] const unsigned char* pRecord,[In] unsigned int countBytes,[In] CorDebugRecordFormat format,[In] unsigned int dwFlags,[In] unsigned int dwThreadId,[In] ICorDebugDebugEvent** ppEvent)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess6::DecodeEvent</unmanaged-short>	
        public void DecodeEvent(byte recordRef, int countBytes, CoreDebugger.CorDebugRecordFormat format, int dwFlags, int dwThreadId, out CoreDebugger.DebugEvent eventOut)
        {
            unsafe
            {
                IntPtr eventOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &recordRef, countBytes, unchecked((int)format), dwFlags, dwThreadId, &eventOut_, ((void**)(*(void**)_nativePointer))[3]);
                eventOut = (eventOut_ == IntPtr.Zero) ? null : new CoreDebugger.DebugEvent(eventOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="change">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess6::ProcessStateChanged']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess6::ProcessStateChanged([In] CorDebugStateChange change)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess6::ProcessStateChanged</unmanaged-short>	
        public void ProcessStateChanged(CoreDebugger.CorDebugStateChange change)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)change), ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="codeAddress">No documentation.</param>	
        /// <param name="codeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess6::GetCode']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess6::GetCode([In] unsigned longlong codeAddress,[In] ICorDebugCode** ppCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess6::GetCode</unmanaged-short>	
        public void GetCode(long codeAddress, out CoreDebugger.Code codeOut)
        {
            unsafe
            {
                IntPtr codeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, codeAddress, &codeOut_, ((void**)(*(void**)_nativePointer))[5]);
                codeOut = (codeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Code(codeOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="enableSplitting">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess6::EnableVirtualModuleSplitting']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess6::EnableVirtualModuleSplitting([In] BOOL enableSplitting)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess6::EnableVirtualModuleSplitting</unmanaged-short>	
        public void EnableVirtualModuleSplitting(SharpDX.Mathematics.Interop.RawBool enableSplitting)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, enableSplitting, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fIsAttached">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess6::MarkDebuggerAttached']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess6::MarkDebuggerAttached([In] BOOL fIsAttached)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess6::MarkDebuggerAttached</unmanaged-short>	
        public void MarkDebuggerAttached(SharpDX.Mathematics.Interop.RawBool fIsAttached)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, fIsAttached, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="szExportNameRef">No documentation.</param>	
        /// <param name="invokeKindRef">No documentation.</param>	
        /// <param name="invokePurposeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess6::GetExportStepInfo']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess6::GetExportStepInfo([In] const wchar_t* pszExportName,[In] CorDebugCodeInvokeKind* pInvokeKind,[In] CorDebugCodeInvokePurpose* pInvokePurpose)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess6::GetExportStepInfo</unmanaged-short>	
        public void GetExportStepInfo(string szExportNameRef, CoreDebugger.CorDebugCodeInvokeKind invokeKindRef, CoreDebugger.CorDebugCodeInvokePurpose invokePurposeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szExportNameRef_ = szExportNameRef)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)szExportNameRef_, &invokeKindRef, &invokePurposeRef, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess7']/*"/>	
    /// <unmanaged>ICorDebugProcess7</unmanaged>	
    /// <unmanaged-short>ICorDebugProcess7</unmanaged-short>	
    [Guid("9B2C54E4-119F-4D6F-B402-527603266D69")]
    public partial class Process7 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Process7"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Process7(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Process7"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Process7(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Process7(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess7::SetWriteableMetadataUpdateMode']/*"/>	
        /// <unmanaged>SetWriteableMetadataUpdateMode</unmanaged>	
        /// <unmanaged-short>SetWriteableMetadataUpdateMode</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugProcess7::SetWriteableMetadataUpdateMode([In] WriteableMetadataUpdateMode flags)</unmanaged>
        public CoreDebugger.WriteableMetadataUpdateMode WriteableMetadataUpdateMode
        {
            set { SetWriteableMetadataUpdateMode(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="flags">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess7::SetWriteableMetadataUpdateMode']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess7::SetWriteableMetadataUpdateMode([In] WriteableMetadataUpdateMode flags)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess7::SetWriteableMetadataUpdateMode</unmanaged-short>	
        internal void SetWriteableMetadataUpdateMode(CoreDebugger.WriteableMetadataUpdateMode flags)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)flags), ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess8']/*"/>	
    /// <unmanaged>ICorDebugProcess8</unmanaged>	
    /// <unmanaged-short>ICorDebugProcess8</unmanaged-short>	
    [Guid("2E6F28C1-85EB-4141-80AD-0A90944B9639")]
    public partial class Process8 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Process8"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Process8(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Process8"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Process8(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Process8(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="enableExceptionsOutsideOfJMC">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcess8::EnableExceptionCallbacksOutsideOfMyCode']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcess8::EnableExceptionCallbacksOutsideOfMyCode([In] BOOL enableExceptionsOutsideOfJMC)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcess8::EnableExceptionCallbacksOutsideOfMyCode</unmanaged-short>	
        public void EnableExceptionCallbacksOutsideOfMyCode(SharpDX.Mathematics.Interop.RawBool enableExceptionsOutsideOfJMC)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, enableExceptionsOutsideOfJMC, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcessEnum']/*"/>	
    /// <unmanaged>ICorDebugProcessEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugProcessEnum</unmanaged-short>	
    [Guid("CC7BCB05-8A68-11d2-983C-0000F808342D")]
    public partial class ProcessEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ProcessEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ProcessEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ProcessEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ProcessEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ProcessEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="rocessesRef">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugProcessEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugProcessEnum::Next([In] unsigned int celt,[In] ICorDebugProcess** processes,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugProcessEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.Process rocessesRef, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr rocessesRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &rocessesRef_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                rocessesRef = (rocessesRef_ == IntPtr.Zero) ? null : new CoreDebugger.Process(rocessesRef_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugReferenceValue']/*"/>	
    /// <unmanaged>ICorDebugReferenceValue</unmanaged>	
    /// <unmanaged-short>ICorDebugReferenceValue</unmanaged-short>	
    [Guid("CC7BCAF9-8A68-11d2-983C-0000F808342D")]
    public partial class ReferenceValue : CoreDebugger.Value
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ReferenceValue"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ReferenceValue(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ReferenceValue"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ReferenceValue(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ReferenceValue(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugReferenceValue::SetValue']/*"/>	
        /// <unmanaged>SetValue</unmanaged>	
        /// <unmanaged-short>SetValue</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugReferenceValue::SetValue([In] unsigned longlong value)</unmanaged>
        public long Value
        {
            set { SetValue(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bNullRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugReferenceValue::IsNull']/*"/>	
        /// <unmanaged>HRESULT ICorDebugReferenceValue::IsNull([In] BOOL* pbNull)</unmanaged>	
        /// <unmanaged-short>ICorDebugReferenceValue::IsNull</unmanaged-short>	
        public void IsNull(SharpDX.Mathematics.Interop.RawBool bNullRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bNullRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="valueRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugReferenceValue::GetValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugReferenceValue::GetValue([In] unsigned longlong* pValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugReferenceValue::GetValue</unmanaged-short>	
        public void GetValue(long valueRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &valueRef, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="value">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugReferenceValue::SetValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugReferenceValue::SetValue([In] unsigned longlong value)</unmanaged>	
        /// <unmanaged-short>ICorDebugReferenceValue::SetValue</unmanaged-short>	
        internal void SetValue(long value)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, value, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugReferenceValue::Dereference']/*"/>	
        /// <unmanaged>HRESULT ICorDebugReferenceValue::Dereference([In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugReferenceValue::Dereference</unmanaged-short>	
        public void Dereference(out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &valueOut_, ((void**)(*(void**)_nativePointer))[10]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugReferenceValue::DereferenceStrong']/*"/>	
        /// <unmanaged>HRESULT ICorDebugReferenceValue::DereferenceStrong([In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugReferenceValue::DereferenceStrong</unmanaged-short>	
        public void DereferenceStrong(out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &valueOut_, ((void**)(*(void**)_nativePointer))[11]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRegisterSet']/*"/>	
    /// <unmanaged>ICorDebugRegisterSet</unmanaged>	
    /// <unmanaged-short>ICorDebugRegisterSet</unmanaged-short>	
    [Guid("CC7BCB0B-8A68-11d2-983C-0000F808342D")]
    public partial class RegisterSet : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.RegisterSet"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public RegisterSet(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.RegisterSet"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.RegisterSet(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.RegisterSet(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="availableRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRegisterSet::GetRegistersAvailable']/*"/>	
        /// <unmanaged>HRESULT ICorDebugRegisterSet::GetRegistersAvailable([In] unsigned longlong* pAvailable)</unmanaged>	
        /// <unmanaged-short>ICorDebugRegisterSet::GetRegistersAvailable</unmanaged-short>	
        public void GetRegistersAvailable(long availableRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &availableRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="mask">No documentation.</param>	
        /// <param name="regCount">No documentation.</param>	
        /// <param name="regBuffer">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRegisterSet::GetRegisters']/*"/>	
        /// <unmanaged>HRESULT ICorDebugRegisterSet::GetRegisters([In] unsigned longlong mask,[In] unsigned int regCount,[In] unsigned longlong* regBuffer)</unmanaged>	
        /// <unmanaged-short>ICorDebugRegisterSet::GetRegisters</unmanaged-short>	
        public void GetRegisters(long mask, int regCount, long regBuffer)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, mask, regCount, &regBuffer, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="mask">No documentation.</param>	
        /// <param name="regCount">No documentation.</param>	
        /// <param name="regBuffer">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRegisterSet::SetRegisters']/*"/>	
        /// <unmanaged>HRESULT ICorDebugRegisterSet::SetRegisters([In] unsigned longlong mask,[In] unsigned int regCount,[In] unsigned longlong* regBuffer)</unmanaged>	
        /// <unmanaged-short>ICorDebugRegisterSet::SetRegisters</unmanaged-short>	
        public void SetRegisters(long mask, int regCount, long regBuffer)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, mask, regCount, &regBuffer, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="contextSize">No documentation.</param>	
        /// <param name="context">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRegisterSet::GetThreadContext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugRegisterSet::GetThreadContext([In] unsigned int contextSize,[In] unsigned char* context)</unmanaged>	
        /// <unmanaged-short>ICorDebugRegisterSet::GetThreadContext</unmanaged-short>	
        public void GetThreadContext(int contextSize, byte context)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, contextSize, &context, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="contextSize">No documentation.</param>	
        /// <param name="context">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRegisterSet::SetThreadContext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugRegisterSet::SetThreadContext([In] unsigned int contextSize,[In] unsigned char* context)</unmanaged>	
        /// <unmanaged-short>ICorDebugRegisterSet::SetThreadContext</unmanaged-short>	
        public void SetThreadContext(int contextSize, byte context)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, contextSize, &context, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRegisterSet2']/*"/>	
    /// <unmanaged>ICorDebugRegisterSet2</unmanaged>	
    /// <unmanaged-short>ICorDebugRegisterSet2</unmanaged-short>	
    [Guid("6DC7BA3F-89BA-4459-9EC1-9D60937B468D")]
    public partial class RegisterSet2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.RegisterSet2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public RegisterSet2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.RegisterSet2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.RegisterSet2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.RegisterSet2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="numChunks">No documentation.</param>	
        /// <param name="availableRegChunks">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRegisterSet2::GetRegistersAvailable']/*"/>	
        /// <unmanaged>HRESULT ICorDebugRegisterSet2::GetRegistersAvailable([In] unsigned int numChunks,[In] unsigned char* availableRegChunks)</unmanaged>	
        /// <unmanaged-short>ICorDebugRegisterSet2::GetRegistersAvailable</unmanaged-short>	
        public void GetRegistersAvailable(int numChunks, byte availableRegChunks)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, numChunks, &availableRegChunks, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="maskCount">No documentation.</param>	
        /// <param name="mask">No documentation.</param>	
        /// <param name="regCount">No documentation.</param>	
        /// <param name="regBuffer">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRegisterSet2::GetRegisters']/*"/>	
        /// <unmanaged>HRESULT ICorDebugRegisterSet2::GetRegisters([In] unsigned int maskCount,[In] unsigned char* mask,[In] unsigned int regCount,[In] unsigned longlong* regBuffer)</unmanaged>	
        /// <unmanaged-short>ICorDebugRegisterSet2::GetRegisters</unmanaged-short>	
        public void GetRegisters(int maskCount, byte mask, int regCount, long regBuffer)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, maskCount, &mask, regCount, &regBuffer, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="maskCount">No documentation.</param>	
        /// <param name="mask">No documentation.</param>	
        /// <param name="regCount">No documentation.</param>	
        /// <param name="regBuffer">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRegisterSet2::SetRegisters']/*"/>	
        /// <unmanaged>HRESULT ICorDebugRegisterSet2::SetRegisters([In] unsigned int maskCount,[In] unsigned char* mask,[In] unsigned int regCount,[In] unsigned longlong* regBuffer)</unmanaged>	
        /// <unmanaged-short>ICorDebugRegisterSet2::SetRegisters</unmanaged-short>	
        public void SetRegisters(int maskCount, byte mask, int regCount, long regBuffer)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, maskCount, &mask, regCount, &regBuffer, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRemote']/*"/>	
    /// <unmanaged>ICorDebugRemote</unmanaged>	
    /// <unmanaged-short>ICorDebugRemote</unmanaged-short>	
    [Guid("D5EBB8E2-7BBE-4c1d-98A6-A3C04CBDEF64")]
    public partial class RemoteDebugger : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.RemoteDebugger"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public RemoteDebugger(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.RemoteDebugger"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.RemoteDebugger(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.RemoteDebugger(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="remoteTargetRef">No documentation.</param>	
        /// <param name="dwProcessId">No documentation.</param>	
        /// <param name="fWin32Attach">No documentation.</param>	
        /// <param name="processOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRemote::DebugActiveProcessEx']/*"/>	
        /// <unmanaged>HRESULT ICorDebugRemote::DebugActiveProcessEx([In] ICorDebugRemoteTarget* pRemoteTarget,[In] unsigned int dwProcessId,[In] BOOL fWin32Attach,[In] ICorDebugProcess** ppProcess)</unmanaged>	
        /// <unmanaged-short>ICorDebugRemote::DebugActiveProcessEx</unmanaged-short>	
        public void DebugActiveProcessEx(CoreDebugger.RemoteTarget remoteTargetRef, int dwProcessId, SharpDX.Mathematics.Interop.RawBool fWin32Attach, out CoreDebugger.Process processOut)
        {
            unsafe
            {
                IntPtr processOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint40(_nativePointer, (void*)((remoteTargetRef == null) ? IntPtr.Zero : remoteTargetRef.NativePointer), dwProcessId, fWin32Attach, &processOut_, ((void**)(*(void**)_nativePointer))[4]);
                processOut = (processOut_ == IntPtr.Zero) ? null : new CoreDebugger.Process(processOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRemoteTarget']/*"/>	
    /// <unmanaged>ICorDebugRemoteTarget</unmanaged>	
    /// <unmanaged-short>ICorDebugRemoteTarget</unmanaged-short>	
    [Guid("C3ED8383-5A49-4cf5-B4B7-01864D9E582D")]
    public partial class RemoteTarget : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.RemoteTarget"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public RemoteTarget(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.RemoteTarget"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.RemoteTarget(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.RemoteTarget(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchHostName">No documentation.</param>	
        /// <param name="cchHostNameRef">No documentation.</param>	
        /// <param name="szHostName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRemoteTarget::GetHostName']/*"/>	
        /// <unmanaged>HRESULT ICorDebugRemoteTarget::GetHostName([In] unsigned int cchHostName,[Out] unsigned int* pcchHostName,[Out, Buffer, Optional] wchar_t* szHostName)</unmanaged>	
        /// <unmanaged-short>ICorDebugRemoteTarget::GetHostName</unmanaged-short>	
        public void GetHostName(int cchHostName, out int cchHostNameRef, System.IntPtr szHostName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* cchHostNameRef_ = &cchHostNameRef)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchHostName, cchHostNameRef_, (void*)szHostName, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugRuntimeUnwindableFrame']/*"/>	
    /// <unmanaged>ICorDebugRuntimeUnwindableFrame</unmanaged>	
    /// <unmanaged-short>ICorDebugRuntimeUnwindableFrame</unmanaged-short>	
    [Guid("879CAC0A-4A53-4668-B8E3-CB8473CB187F")]
    public partial class RuntimeUnwindableFrame : CoreDebugger.Frame
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.RuntimeUnwindableFrame"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public RuntimeUnwindableFrame(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.RuntimeUnwindableFrame"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.RuntimeUnwindableFrame(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.RuntimeUnwindableFrame(nativePointer);
        }

    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStackWalk']/*"/>	
    /// <unmanaged>ICorDebugStackWalk</unmanaged>	
    /// <unmanaged-short>ICorDebugStackWalk</unmanaged-short>	
    [Guid("A0647DE9-55DE-4816-929C-385271C64CF7")]
    public partial class StackWalk : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.StackWalk"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public StackWalk(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.StackWalk"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.StackWalk(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.StackWalk(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStackWalk::GetFrame']/*"/>	
        /// <unmanaged>GetFrame</unmanaged>	
        /// <unmanaged-short>GetFrame</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugStackWalk::GetFrame([In] ICorDebugFrame** pFrame)</unmanaged>
        public CoreDebugger.Frame Frame
        {
            get { CoreDebugger.Frame __output__; GetFrame(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="contextFlags">No documentation.</param>	
        /// <param name="contextBufSize">No documentation.</param>	
        /// <param name="contextSize">No documentation.</param>	
        /// <param name="contextBuf">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStackWalk::GetContext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStackWalk::GetContext([In] unsigned int contextFlags,[In] unsigned int contextBufSize,[In] unsigned int* contextSize,[In] unsigned char* contextBuf)</unmanaged>	
        /// <unmanaged-short>ICorDebugStackWalk::GetContext</unmanaged-short>	
        public void GetContext(int contextFlags, int contextBufSize, int contextSize, byte contextBuf)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, contextFlags, contextBufSize, &contextSize, &contextBuf, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="flag">No documentation.</param>	
        /// <param name="contextSize">No documentation.</param>	
        /// <param name="context">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStackWalk::SetContext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStackWalk::SetContext([In] CorDebugSetContextFlag flag,[In] unsigned int contextSize,[In] unsigned char* context)</unmanaged>	
        /// <unmanaged-short>ICorDebugStackWalk::SetContext</unmanaged-short>	
        public void SetContext(CoreDebugger.CorDebugSetContextFlag flag, int contextSize, byte context)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)flag), contextSize, &context, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStackWalk::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStackWalk::Next()</unmanaged>	
        /// <unmanaged-short>ICorDebugStackWalk::Next</unmanaged-short>	
        public void Next()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="frameRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStackWalk::GetFrame']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStackWalk::GetFrame([In] ICorDebugFrame** pFrame)</unmanaged>	
        /// <unmanaged-short>ICorDebugStackWalk::GetFrame</unmanaged-short>	
        internal void GetFrame(out CoreDebugger.Frame frameRef)
        {
            unsafe
            {
                IntPtr frameRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &frameRef_, ((void**)(*(void**)_nativePointer))[6]);
                frameRef = (frameRef_ == IntPtr.Zero) ? null : new CoreDebugger.Frame(frameRef_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStaticFieldSymbol']/*"/>	
    /// <unmanaged>ICorDebugStaticFieldSymbol</unmanaged>	
    /// <unmanaged-short>ICorDebugStaticFieldSymbol</unmanaged-short>	
    [Guid("CBF9DA63-F68D-4BBB-A21C-15A45EAADF5B")]
    public partial class StaticFieldSymbol : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.StaticFieldSymbol"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public StaticFieldSymbol(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.StaticFieldSymbol"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.StaticFieldSymbol(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.StaticFieldSymbol(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStaticFieldSymbol::GetName']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStaticFieldSymbol::GetName([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugStaticFieldSymbol::GetName</unmanaged-short>	
        public void GetName(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbSizeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStaticFieldSymbol::GetSize']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStaticFieldSymbol::GetSize([In] unsigned int* pcbSize)</unmanaged>	
        /// <unmanaged-short>ICorDebugStaticFieldSymbol::GetSize</unmanaged-short>	
        public void GetSize(int cbSizeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &cbSizeRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="rVARef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStaticFieldSymbol::GetAddress']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStaticFieldSymbol::GetAddress([In] unsigned longlong* pRVA)</unmanaged>	
        /// <unmanaged-short>ICorDebugStaticFieldSymbol::GetAddress</unmanaged-short>	
        public void GetAddress(long rVARef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &rVARef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper']/*"/>	
    /// <unmanaged>ICorDebugStepper</unmanaged>	
    /// <unmanaged-short>ICorDebugStepper</unmanaged-short>	
    [Guid("CC7BCAEC-8A68-11d2-983C-0000F808342D")]
    public partial class Stepper : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Stepper"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Stepper(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Stepper"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Stepper(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Stepper(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper::SetInterceptMask']/*"/>	
        /// <unmanaged>SetInterceptMask</unmanaged>	
        /// <unmanaged-short>SetInterceptMask</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugStepper::SetInterceptMask([In] CorDebugIntercept mask)</unmanaged>
        public CoreDebugger.CorDebugIntercept InterceptMask
        {
            set { SetInterceptMask(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper::SetUnmappedStopMask']/*"/>	
        /// <unmanaged>SetUnmappedStopMask</unmanaged>	
        /// <unmanaged-short>SetUnmappedStopMask</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugStepper::SetUnmappedStopMask([In] CorDebugUnmappedStop mask)</unmanaged>
        public CoreDebugger.CorDebugUnmappedStop UnmappedStopMask
        {
            set { SetUnmappedStopMask(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper::SetRangeIL']/*"/>	
        /// <unmanaged>SetRangeIL</unmanaged>	
        /// <unmanaged-short>SetRangeIL</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugStepper::SetRangeIL([In] BOOL bIL)</unmanaged>
        public SharpDX.Mathematics.Interop.RawBool RangeIL
        {
            set { SetRangeIL(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bActiveRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper::IsActive']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStepper::IsActive([In] BOOL* pbActive)</unmanaged>	
        /// <unmanaged-short>ICorDebugStepper::IsActive</unmanaged-short>	
        public void IsActive(SharpDX.Mathematics.Interop.RawBool bActiveRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &bActiveRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper::Deactivate']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStepper::Deactivate()</unmanaged>	
        /// <unmanaged-short>ICorDebugStepper::Deactivate</unmanaged-short>	
        public void Deactivate()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="mask">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper::SetInterceptMask']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStepper::SetInterceptMask([In] CorDebugIntercept mask)</unmanaged>	
        /// <unmanaged-short>ICorDebugStepper::SetInterceptMask</unmanaged-short>	
        internal void SetInterceptMask(CoreDebugger.CorDebugIntercept mask)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)mask), ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="mask">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper::SetUnmappedStopMask']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStepper::SetUnmappedStopMask([In] CorDebugUnmappedStop mask)</unmanaged>	
        /// <unmanaged-short>ICorDebugStepper::SetUnmappedStopMask</unmanaged-short>	
        internal void SetUnmappedStopMask(CoreDebugger.CorDebugUnmappedStop mask)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)mask), ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bStepIn">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper::Step']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStepper::Step([In] BOOL bStepIn)</unmanaged>	
        /// <unmanaged-short>ICorDebugStepper::Step</unmanaged-short>	
        public void Step(SharpDX.Mathematics.Interop.RawBool bStepIn)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, bStepIn, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bStepIn">No documentation.</param>	
        /// <param name="ranges">No documentation.</param>	
        /// <param name="cRangeCount">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper::StepRange']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStepper::StepRange([In] BOOL bStepIn,[In] COR_DEBUG_STEP_RANGE* ranges,[In] unsigned int cRangeCount)</unmanaged>	
        /// <unmanaged-short>ICorDebugStepper::StepRange</unmanaged-short>	
        public void StepRange(SharpDX.Mathematics.Interop.RawBool bStepIn, CoreDebugger.CorDebugStepRange ranges, int cRangeCount)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint47(_nativePointer, bStepIn, &ranges, cRangeCount, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper::StepOut']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStepper::StepOut()</unmanaged>	
        /// <unmanaged-short>ICorDebugStepper::StepOut</unmanaged-short>	
        public void StepOut()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bIL">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper::SetRangeIL']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStepper::SetRangeIL([In] BOOL bIL)</unmanaged>	
        /// <unmanaged-short>ICorDebugStepper::SetRangeIL</unmanaged-short>	
        internal void SetRangeIL(SharpDX.Mathematics.Interop.RawBool bIL)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, bIL, ((void**)(*(void**)_nativePointer))[10]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper2']/*"/>	
    /// <unmanaged>ICorDebugStepper2</unmanaged>	
    /// <unmanaged-short>ICorDebugStepper2</unmanaged-short>	
    [Guid("C5B6E9C3-E7D1-4a8e-873B-7F047F0706F7")]
    public partial class Stepper2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Stepper2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Stepper2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Stepper2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Stepper2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Stepper2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper2::SetJMC']/*"/>	
        /// <unmanaged>SetJMC</unmanaged>	
        /// <unmanaged-short>SetJMC</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugStepper2::SetJMC([In] BOOL fIsJMCStepper)</unmanaged>
        public SharpDX.Mathematics.Interop.RawBool JMC
        {
            set { SetJMC(value); }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fIsJMCStepper">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepper2::SetJMC']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStepper2::SetJMC([In] BOOL fIsJMCStepper)</unmanaged>	
        /// <unmanaged-short>ICorDebugStepper2::SetJMC</unmanaged-short>	
        internal void SetJMC(SharpDX.Mathematics.Interop.RawBool fIsJMCStepper)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint41(_nativePointer, fIsJMCStepper, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepperEnum']/*"/>	
    /// <unmanaged>ICorDebugStepperEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugStepperEnum</unmanaged-short>	
    [Guid("CC7BCB04-8A68-11d2-983C-0000F808342D")]
    public partial class StepperEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.StepperEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public StepperEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.StepperEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.StepperEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.StepperEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="steppers">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStepperEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStepperEnum::Next([In] unsigned int celt,[In] ICorDebugStepper** steppers,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugStepperEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.Stepper steppers, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr steppers_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &steppers_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                steppers = (steppers_ == IntPtr.Zero) ? null : new CoreDebugger.Stepper(steppers_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStringValue']/*"/>	
    /// <unmanaged>ICorDebugStringValue</unmanaged>	
    /// <unmanaged-short>ICorDebugStringValue</unmanaged-short>	
    [Guid("CC7BCAFD-8A68-11d2-983C-0000F808342D")]
    public partial class StringValue : CoreDebugger.HeapValue
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.StringValue"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public StringValue(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.StringValue"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.StringValue(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.StringValue(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchStringRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStringValue::GetLength']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStringValue::GetLength([In] unsigned int* pcchString)</unmanaged>	
        /// <unmanaged-short>ICorDebugStringValue::GetLength</unmanaged-short>	
        public void GetLength(int cchStringRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &cchStringRef, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchString">No documentation.</param>	
        /// <param name="cchStringRef">No documentation.</param>	
        /// <param name="szString">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugStringValue::GetString']/*"/>	
        /// <unmanaged>HRESULT ICorDebugStringValue::GetString([In] unsigned int cchString,[In] unsigned int* pcchString,[In] wchar_t* szString)</unmanaged>	
        /// <unmanaged-short>ICorDebugStringValue::GetString</unmanaged-short>	
        public void GetString(int cchString, int cchStringRef, string szString)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szString_ = szString)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchString, &cchStringRef, (void*)szString_, ((void**)(*(void**)_nativePointer))[10]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider']/*"/>	
    /// <unmanaged>ICorDebugSymbolProvider</unmanaged>	
    /// <unmanaged-short>ICorDebugSymbolProvider</unmanaged-short>	
    [Guid("3948A999-FD8A-4C38-A708-8A71E9B04DBB")]
    public partial class SymbolProvider : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.SymbolProvider"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public SymbolProvider(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.SymbolProvider"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.SymbolProvider(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.SymbolProvider(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetAssemblyImageMetadata']/*"/>	
        /// <unmanaged>GetAssemblyImageMetadata</unmanaged>	
        /// <unmanaged-short>GetAssemblyImageMetadata</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetAssemblyImageMetadata([In] ICorDebugMemoryBuffer** ppMemoryBuffer)</unmanaged>
        public CoreDebugger.MemoryBuffer AssemblyImageMetadata
        {
            get { CoreDebugger.MemoryBuffer __output__; GetAssemblyImageMetadata(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbSignature">No documentation.</param>	
        /// <param name="typeSig">No documentation.</param>	
        /// <param name="cRequestedSymbols">No documentation.</param>	
        /// <param name="cFetchedSymbolsRef">No documentation.</param>	
        /// <param name="symbolsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetStaticFieldSymbols']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetStaticFieldSymbols([In] unsigned int cbSignature,[In] unsigned char* typeSig,[In] unsigned int cRequestedSymbols,[In] unsigned int* pcFetchedSymbols,[In] ICorDebugStaticFieldSymbol** pSymbols)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider::GetStaticFieldSymbols</unmanaged-short>	
        public void GetStaticFieldSymbols(int cbSignature, byte typeSig, int cRequestedSymbols, int cFetchedSymbolsRef, out CoreDebugger.StaticFieldSymbol symbolsRef)
        {
            unsafe
            {
                IntPtr symbolsRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cbSignature, &typeSig, cRequestedSymbols, &cFetchedSymbolsRef, &symbolsRef_, ((void**)(*(void**)_nativePointer))[3]);
                symbolsRef = (symbolsRef_ == IntPtr.Zero) ? null : new CoreDebugger.StaticFieldSymbol(symbolsRef_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbSignature">No documentation.</param>	
        /// <param name="typeSig">No documentation.</param>	
        /// <param name="cRequestedSymbols">No documentation.</param>	
        /// <param name="cFetchedSymbolsRef">No documentation.</param>	
        /// <param name="symbolsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetInstanceFieldSymbols']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetInstanceFieldSymbols([In] unsigned int cbSignature,[In] unsigned char* typeSig,[In] unsigned int cRequestedSymbols,[In] unsigned int* pcFetchedSymbols,[In] ICorDebugInstanceFieldSymbol** pSymbols)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider::GetInstanceFieldSymbols</unmanaged-short>	
        public void GetInstanceFieldSymbols(int cbSignature, byte typeSig, int cRequestedSymbols, int cFetchedSymbolsRef, out CoreDebugger.InstanceFieldSymbol symbolsRef)
        {
            unsafe
            {
                IntPtr symbolsRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cbSignature, &typeSig, cRequestedSymbols, &cFetchedSymbolsRef, &symbolsRef_, ((void**)(*(void**)_nativePointer))[4]);
                symbolsRef = (symbolsRef_ == IntPtr.Zero) ? null : new CoreDebugger.InstanceFieldSymbol(symbolsRef_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nativeRVA">No documentation.</param>	
        /// <param name="cRequestedSymbols">No documentation.</param>	
        /// <param name="cFetchedSymbolsRef">No documentation.</param>	
        /// <param name="symbolsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetMethodLocalSymbols']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetMethodLocalSymbols([In] unsigned int nativeRVA,[In] unsigned int cRequestedSymbols,[In] unsigned int* pcFetchedSymbols,[In] ICorDebugVariableSymbol** pSymbols)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider::GetMethodLocalSymbols</unmanaged-short>	
        public void GetMethodLocalSymbols(int nativeRVA, int cRequestedSymbols, int cFetchedSymbolsRef, out CoreDebugger.VariableSymbol symbolsRef)
        {
            unsafe
            {
                IntPtr symbolsRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, nativeRVA, cRequestedSymbols, &cFetchedSymbolsRef, &symbolsRef_, ((void**)(*(void**)_nativePointer))[5]);
                symbolsRef = (symbolsRef_ == IntPtr.Zero) ? null : new CoreDebugger.VariableSymbol(symbolsRef_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nativeRVA">No documentation.</param>	
        /// <param name="cRequestedSymbols">No documentation.</param>	
        /// <param name="cFetchedSymbolsRef">No documentation.</param>	
        /// <param name="symbolsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetMethodParameterSymbols']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetMethodParameterSymbols([In] unsigned int nativeRVA,[In] unsigned int cRequestedSymbols,[In] unsigned int* pcFetchedSymbols,[In] ICorDebugVariableSymbol** pSymbols)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider::GetMethodParameterSymbols</unmanaged-short>	
        public void GetMethodParameterSymbols(int nativeRVA, int cRequestedSymbols, int cFetchedSymbolsRef, out CoreDebugger.VariableSymbol symbolsRef)
        {
            unsafe
            {
                IntPtr symbolsRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, nativeRVA, cRequestedSymbols, &cFetchedSymbolsRef, &symbolsRef_, ((void**)(*(void**)_nativePointer))[6]);
                symbolsRef = (symbolsRef_ == IntPtr.Zero) ? null : new CoreDebugger.VariableSymbol(symbolsRef_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cRequestedRecords">No documentation.</param>	
        /// <param name="cFetchedRecordsRef">No documentation.</param>	
        /// <param name="recordsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetMergedAssemblyRecords']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetMergedAssemblyRecords([In] unsigned int cRequestedRecords,[In] unsigned int* pcFetchedRecords,[In] ICorDebugMergedAssemblyRecord** pRecords)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider::GetMergedAssemblyRecords</unmanaged-short>	
        public void GetMergedAssemblyRecords(int cRequestedRecords, int cFetchedRecordsRef, out CoreDebugger.MergedAssemblyRecord recordsRef)
        {
            unsafe
            {
                IntPtr recordsRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cRequestedRecords, &cFetchedRecordsRef, &recordsRef_, ((void**)(*(void**)_nativePointer))[7]);
                recordsRef = (recordsRef_ == IntPtr.Zero) ? null : new CoreDebugger.MergedAssemblyRecord(recordsRef_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="codeRva">No documentation.</param>	
        /// <param name="methodTokenRef">No documentation.</param>	
        /// <param name="cGenericParamsRef">No documentation.</param>	
        /// <param name="cbSignature">No documentation.</param>	
        /// <param name="cbSignatureRef">No documentation.</param>	
        /// <param name="signature">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetMethodProps']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetMethodProps([In] unsigned int codeRva,[In] unsigned int* pMethodToken,[In] unsigned int* pcGenericParams,[In] unsigned int cbSignature,[In] unsigned int* pcbSignature,[In] unsigned char* signature)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider::GetMethodProps</unmanaged-short>	
        public void GetMethodProps(int codeRva, int methodTokenRef, int cGenericParamsRef, int cbSignature, int cbSignatureRef, byte signature)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, codeRva, &methodTokenRef, &cGenericParamsRef, cbSignature, &cbSignatureRef, &signature, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="vtableRva">No documentation.</param>	
        /// <param name="cbSignature">No documentation.</param>	
        /// <param name="cbSignatureRef">No documentation.</param>	
        /// <param name="signature">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetTypeProps']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetTypeProps([In] unsigned int vtableRva,[In] unsigned int cbSignature,[In] unsigned int* pcbSignature,[In] unsigned char* signature)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider::GetTypeProps</unmanaged-short>	
        public void GetTypeProps(int vtableRva, int cbSignature, int cbSignatureRef, byte signature)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, vtableRva, cbSignature, &cbSignatureRef, &signature, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="codeRva">No documentation.</param>	
        /// <param name="codeStartAddressRef">No documentation.</param>	
        /// <param name="codeSizeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetCodeRange']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetCodeRange([In] unsigned int codeRva,[In] unsigned int* pCodeStartAddress,[In] unsigned int* pCodeSize)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider::GetCodeRange</unmanaged-short>	
        public void GetCodeRange(int codeRva, int codeStartAddressRef, int codeSizeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, codeRva, &codeStartAddressRef, &codeSizeRef, ((void**)(*(void**)_nativePointer))[10]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="rva">No documentation.</param>	
        /// <param name="length">No documentation.</param>	
        /// <param name="memoryBufferOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetAssemblyImageBytes']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetAssemblyImageBytes([In] unsigned longlong rva,[In] unsigned int length,[In] ICorDebugMemoryBuffer** ppMemoryBuffer)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider::GetAssemblyImageBytes</unmanaged-short>	
        public void GetAssemblyImageBytes(long rva, int length, out CoreDebugger.MemoryBuffer memoryBufferOut)
        {
            unsafe
            {
                IntPtr memoryBufferOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, rva, length, &memoryBufferOut_, ((void**)(*(void**)_nativePointer))[11]);
                memoryBufferOut = (memoryBufferOut_ == IntPtr.Zero) ? null : new CoreDebugger.MemoryBuffer(memoryBufferOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbSignature">No documentation.</param>	
        /// <param name="typeSig">No documentation.</param>	
        /// <param name="objectSizeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetObjectSize']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetObjectSize([In] unsigned int cbSignature,[In] unsigned char* typeSig,[In] unsigned int* pObjectSize)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider::GetObjectSize</unmanaged-short>	
        public void GetObjectSize(int cbSignature, byte typeSig, int objectSizeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cbSignature, &typeSig, &objectSizeRef, ((void**)(*(void**)_nativePointer))[12]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="memoryBufferOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider::GetAssemblyImageMetadata']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider::GetAssemblyImageMetadata([In] ICorDebugMemoryBuffer** ppMemoryBuffer)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider::GetAssemblyImageMetadata</unmanaged-short>	
        internal void GetAssemblyImageMetadata(out CoreDebugger.MemoryBuffer memoryBufferOut)
        {
            unsafe
            {
                IntPtr memoryBufferOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &memoryBufferOut_, ((void**)(*(void**)_nativePointer))[13]);
                memoryBufferOut = (memoryBufferOut_ == IntPtr.Zero) ? null : new CoreDebugger.MemoryBuffer(memoryBufferOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider2']/*"/>	
    /// <unmanaged>ICorDebugSymbolProvider2</unmanaged>	
    /// <unmanaged-short>ICorDebugSymbolProvider2</unmanaged-short>	
    [Guid("F9801807-4764-4330-9E67-4F685094165E")]
    public partial class SymbolProvider2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.SymbolProvider2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public SymbolProvider2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.SymbolProvider2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.SymbolProvider2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.SymbolProvider2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider2::GetGenericDictionaryInfo']/*"/>	
        /// <unmanaged>GetGenericDictionaryInfo</unmanaged>	
        /// <unmanaged-short>GetGenericDictionaryInfo</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider2::GetGenericDictionaryInfo([In] ICorDebugMemoryBuffer** ppMemoryBuffer)</unmanaged>
        public CoreDebugger.MemoryBuffer GenericDictionaryInfo
        {
            get { CoreDebugger.MemoryBuffer __output__; GetGenericDictionaryInfo(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="memoryBufferOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider2::GetGenericDictionaryInfo']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider2::GetGenericDictionaryInfo([In] ICorDebugMemoryBuffer** ppMemoryBuffer)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider2::GetGenericDictionaryInfo</unmanaged-short>	
        internal void GetGenericDictionaryInfo(out CoreDebugger.MemoryBuffer memoryBufferOut)
        {
            unsafe
            {
                IntPtr memoryBufferOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &memoryBufferOut_, ((void**)(*(void**)_nativePointer))[3]);
                memoryBufferOut = (memoryBufferOut_ == IntPtr.Zero) ? null : new CoreDebugger.MemoryBuffer(memoryBufferOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="codeRva">No documentation.</param>	
        /// <param name="codeStartRvaRef">No documentation.</param>	
        /// <param name="parentFrameStartRvaRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugSymbolProvider2::GetFrameProps']/*"/>	
        /// <unmanaged>HRESULT ICorDebugSymbolProvider2::GetFrameProps([In] unsigned int codeRva,[In] unsigned int* pCodeStartRva,[In] unsigned int* pParentFrameStartRva)</unmanaged>	
        /// <unmanaged-short>ICorDebugSymbolProvider2::GetFrameProps</unmanaged-short>	
        public void GetFrameProps(int codeRva, int codeStartRvaRef, int parentFrameStartRvaRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, codeRva, &codeStartRvaRef, &parentFrameStartRvaRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread']/*"/>	
    /// <unmanaged>ICorDebugThread</unmanaged>	
    /// <unmanaged-short>ICorDebugThread</unmanaged-short>	
    [Guid("938c6d66-7fb6-4f69-b389-425b8987329b")]
    public partial class Thread : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Thread"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Thread(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Thread"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Thread(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Thread(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetProcess']/*"/>	
        /// <unmanaged>GetProcess</unmanaged>	
        /// <unmanaged-short>GetProcess</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugThread::GetProcess([In] ICorDebugProcess** ppProcess)</unmanaged>
        public CoreDebugger.Process Process
        {
            get { CoreDebugger.Process __output__; GetProcess(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetAppDomain']/*"/>	
        /// <unmanaged>GetAppDomain</unmanaged>	
        /// <unmanaged-short>GetAppDomain</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugThread::GetAppDomain([In] ICorDebugAppDomain** ppAppDomain)</unmanaged>
        public CoreDebugger.AppDomain AppDomain
        {
            get { CoreDebugger.AppDomain __output__; GetAppDomain(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetCurrentException']/*"/>	
        /// <unmanaged>GetCurrentException</unmanaged>	
        /// <unmanaged-short>GetCurrentException</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugThread::GetCurrentException([In] ICorDebugValue** ppExceptionObject)</unmanaged>
        public CoreDebugger.Value CurrentException
        {
            get { CoreDebugger.Value __output__; GetCurrentException(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetActiveChain']/*"/>	
        /// <unmanaged>GetActiveChain</unmanaged>	
        /// <unmanaged-short>GetActiveChain</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugThread::GetActiveChain([In] ICorDebugChain** ppChain)</unmanaged>
        public CoreDebugger.Chain ActiveChain
        {
            get { CoreDebugger.Chain __output__; GetActiveChain(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetActiveFrame']/*"/>	
        /// <unmanaged>GetActiveFrame</unmanaged>	
        /// <unmanaged-short>GetActiveFrame</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugThread::GetActiveFrame([In] ICorDebugFrame** ppFrame)</unmanaged>
        public CoreDebugger.Frame ActiveFrame
        {
            get { CoreDebugger.Frame __output__; GetActiveFrame(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetRegisterSet']/*"/>	
        /// <unmanaged>GetRegisterSet</unmanaged>	
        /// <unmanaged-short>GetRegisterSet</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugThread::GetRegisterSet([In] ICorDebugRegisterSet** ppRegisters)</unmanaged>
        public CoreDebugger.RegisterSet RegisterSet
        {
            get { CoreDebugger.RegisterSet __output__; GetRegisterSet(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetObjectW']/*"/>	
        /// <unmanaged>GetObjectW</unmanaged>	
        /// <unmanaged-short>GetObjectW</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugThread::GetObjectW([In] ICorDebugValue** ppObject)</unmanaged>
        public CoreDebugger.Value ObjectW
        {
            get { CoreDebugger.Value __output__; GetObjectW(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="processOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetProcess']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::GetProcess([In] ICorDebugProcess** ppProcess)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::GetProcess</unmanaged-short>	
        internal void GetProcess(out CoreDebugger.Process processOut)
        {
            unsafe
            {
                IntPtr processOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &processOut_, ((void**)(*(void**)_nativePointer))[3]);
                processOut = (processOut_ == IntPtr.Zero) ? null : new CoreDebugger.Process(processOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwThreadIdRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetID']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::GetID([In] unsigned int* pdwThreadId)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::GetID</unmanaged-short>	
        public void GetID(int dwThreadIdRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &dwThreadIdRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="hThreadHandleRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetHandle']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::GetHandle([In] void** phThreadHandle)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::GetHandle</unmanaged-short>	
        public void GetHandle(System.IntPtr hThreadHandleRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)hThreadHandleRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="appDomainOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetAppDomain']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::GetAppDomain([In] ICorDebugAppDomain** ppAppDomain)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::GetAppDomain</unmanaged-short>	
        internal void GetAppDomain(out CoreDebugger.AppDomain appDomainOut)
        {
            unsafe
            {
                IntPtr appDomainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &appDomainOut_, ((void**)(*(void**)_nativePointer))[6]);
                appDomainOut = (appDomainOut_ == IntPtr.Zero) ? null : new CoreDebugger.AppDomain(appDomainOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="state">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::SetDebugState']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::SetDebugState([In] CorDebugThreadState state)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::SetDebugState</unmanaged-short>	
        public void SetDebugState(CoreDebugger.CorDebugThreadState state)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, unchecked((int)state), ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="stateRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetDebugState']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::GetDebugState([In] CorDebugThreadState* pState)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::GetDebugState</unmanaged-short>	
        public void GetDebugState(CoreDebugger.CorDebugThreadState stateRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &stateRef, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="stateRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetUserState']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::GetUserState([In] CorDebugUserState* pState)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::GetUserState</unmanaged-short>	
        public void GetUserState(CoreDebugger.CorDebugUserState stateRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &stateRef, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="exceptionObjectOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetCurrentException']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::GetCurrentException([In] ICorDebugValue** ppExceptionObject)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::GetCurrentException</unmanaged-short>	
        internal void GetCurrentException(out CoreDebugger.Value exceptionObjectOut)
        {
            unsafe
            {
                IntPtr exceptionObjectOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &exceptionObjectOut_, ((void**)(*(void**)_nativePointer))[10]);
                exceptionObjectOut = (exceptionObjectOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(exceptionObjectOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::ClearCurrentException']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::ClearCurrentException()</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::ClearCurrentException</unmanaged-short>	
        public void ClearCurrentException()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[11]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="stepperOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::CreateStepper']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::CreateStepper([In] ICorDebugStepper** ppStepper)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::CreateStepper</unmanaged-short>	
        public void CreateStepper(out CoreDebugger.Stepper stepperOut)
        {
            unsafe
            {
                IntPtr stepperOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &stepperOut_, ((void**)(*(void**)_nativePointer))[12]);
                stepperOut = (stepperOut_ == IntPtr.Zero) ? null : new CoreDebugger.Stepper(stepperOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="chainsOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::EnumerateChains']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::EnumerateChains([In] ICorDebugChainEnum** ppChains)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::EnumerateChains</unmanaged-short>	
        public void EnumerateChains(out CoreDebugger.ChainEnum chainsOut)
        {
            unsafe
            {
                IntPtr chainsOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &chainsOut_, ((void**)(*(void**)_nativePointer))[13]);
                chainsOut = (chainsOut_ == IntPtr.Zero) ? null : new CoreDebugger.ChainEnum(chainsOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="chainOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetActiveChain']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::GetActiveChain([In] ICorDebugChain** ppChain)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::GetActiveChain</unmanaged-short>	
        internal void GetActiveChain(out CoreDebugger.Chain chainOut)
        {
            unsafe
            {
                IntPtr chainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &chainOut_, ((void**)(*(void**)_nativePointer))[14]);
                chainOut = (chainOut_ == IntPtr.Zero) ? null : new CoreDebugger.Chain(chainOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="frameOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetActiveFrame']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::GetActiveFrame([In] ICorDebugFrame** ppFrame)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::GetActiveFrame</unmanaged-short>	
        internal void GetActiveFrame(out CoreDebugger.Frame frameOut)
        {
            unsafe
            {
                IntPtr frameOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &frameOut_, ((void**)(*(void**)_nativePointer))[15]);
                frameOut = (frameOut_ == IntPtr.Zero) ? null : new CoreDebugger.Frame(frameOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="registersOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetRegisterSet']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::GetRegisterSet([In] ICorDebugRegisterSet** ppRegisters)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::GetRegisterSet</unmanaged-short>	
        internal void GetRegisterSet(out CoreDebugger.RegisterSet registersOut)
        {
            unsafe
            {
                IntPtr registersOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &registersOut_, ((void**)(*(void**)_nativePointer))[16]);
                registersOut = (registersOut_ == IntPtr.Zero) ? null : new CoreDebugger.RegisterSet(registersOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="evalOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::CreateEval']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::CreateEval([In] ICorDebugEval** ppEval)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::CreateEval</unmanaged-short>	
        public void CreateEval(out CoreDebugger.Eval evalOut)
        {
            unsafe
            {
                IntPtr evalOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &evalOut_, ((void**)(*(void**)_nativePointer))[17]);
                evalOut = (evalOut_ == IntPtr.Zero) ? null : new CoreDebugger.Eval(evalOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="objectOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread::GetObjectW']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread::GetObjectW([In] ICorDebugValue** ppObject)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread::GetObjectW</unmanaged-short>	
        internal void GetObjectW(out CoreDebugger.Value objectOut)
        {
            unsafe
            {
                IntPtr objectOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &objectOut_, ((void**)(*(void**)_nativePointer))[18]);
                objectOut = (objectOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(objectOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread2']/*"/>	
    /// <unmanaged>ICorDebugThread2</unmanaged>	
    /// <unmanaged-short>ICorDebugThread2</unmanaged-short>	
    [Guid("2BD956D9-7B07-4bef-8A98-12AA862417C5")]
    public partial class Thread2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Thread2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Thread2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Thread2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Thread2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Thread2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cFunctions">No documentation.</param>	
        /// <param name="cFunctionsRef">No documentation.</param>	
        /// <param name="functionsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread2::GetActiveFunctions']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread2::GetActiveFunctions([In] unsigned int cFunctions,[In] unsigned int* pcFunctions,[In] COR_ACTIVE_FUNCTION* pFunctions)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread2::GetActiveFunctions</unmanaged-short>	
        public void GetActiveFunctions(int cFunctions, int cFunctionsRef, ref CoreDebugger.CorActiveFunction functionsRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (void* functionsRef_ = &functionsRef)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cFunctions, &cFunctionsRef, functionsRef_, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwConnectionIdRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread2::GetConnectionID']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread2::GetConnectionID([In] unsigned int* pdwConnectionId)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread2::GetConnectionID</unmanaged-short>	
        public void GetConnectionID(int dwConnectionIdRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &dwConnectionIdRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="taskIdRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread2::GetTaskID']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread2::GetTaskID([In] unsigned longlong* pTaskId)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread2::GetTaskID</unmanaged-short>	
        public void GetTaskID(long taskIdRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &taskIdRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dwTidRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread2::GetVolatileOSThreadID']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread2::GetVolatileOSThreadID([In] unsigned int* pdwTid)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread2::GetVolatileOSThreadID</unmanaged-short>	
        public void GetVolatileOSThreadID(int dwTidRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &dwTidRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="frameRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread2::InterceptCurrentException']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread2::InterceptCurrentException([In] ICorDebugFrame* pFrame)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread2::InterceptCurrentException</unmanaged-short>	
        public void InterceptCurrentException(CoreDebugger.Frame frameRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, (void*)((frameRef == null) ? IntPtr.Zero : frameRef.NativePointer), ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread3']/*"/>	
    /// <unmanaged>ICorDebugThread3</unmanaged>	
    /// <unmanaged-short>ICorDebugThread3</unmanaged-short>	
    [Guid("F8544EC3-5E4E-46c7-8D3E-A52B8405B1F5")]
    public partial class Thread3 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Thread3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Thread3(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Thread3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Thread3(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Thread3(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="stackWalkOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread3::CreateStackWalk']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread3::CreateStackWalk([In] ICorDebugStackWalk** ppStackWalk)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread3::CreateStackWalk</unmanaged-short>	
        public void CreateStackWalk(out CoreDebugger.StackWalk stackWalkOut)
        {
            unsafe
            {
                IntPtr stackWalkOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &stackWalkOut_, ((void**)(*(void**)_nativePointer))[3]);
                stackWalkOut = (stackWalkOut_ == IntPtr.Zero) ? null : new CoreDebugger.StackWalk(stackWalkOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cInternalFrames">No documentation.</param>	
        /// <param name="cInternalFramesRef">No documentation.</param>	
        /// <param name="internalFramesOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread3::GetActiveInternalFrames']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread3::GetActiveInternalFrames([In] unsigned int cInternalFrames,[In] unsigned int* pcInternalFrames,[In] ICorDebugInternalFrame2** ppInternalFrames)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread3::GetActiveInternalFrames</unmanaged-short>	
        public void GetActiveInternalFrames(int cInternalFrames, int cInternalFramesRef, out CoreDebugger.InternalFrame2 internalFramesOut)
        {
            unsafe
            {
                IntPtr internalFramesOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, cInternalFrames, &cInternalFramesRef, &internalFramesOut_, ((void**)(*(void**)_nativePointer))[4]);
                internalFramesOut = (internalFramesOut_ == IntPtr.Zero) ? null : new CoreDebugger.InternalFrame2(internalFramesOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread4']/*"/>	
    /// <unmanaged>ICorDebugThread4</unmanaged>	
    /// <unmanaged-short>ICorDebugThread4</unmanaged-short>	
    [Guid("1A1F204B-1C66-4637-823F-3EE6C744A69C")]
    public partial class Thread4 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Thread4"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Thread4(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Thread4"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Thread4(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Thread4(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread4::GetBlockingObjects']/*"/>	
        /// <unmanaged>GetBlockingObjects</unmanaged>	
        /// <unmanaged-short>GetBlockingObjects</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugThread4::GetBlockingObjects([In] ICorDebugBlockingObjectEnum** ppBlockingObjectEnum)</unmanaged>
        public CoreDebugger.BlockingObjectEnum BlockingObjects
        {
            get { CoreDebugger.BlockingObjectEnum __output__; GetBlockingObjects(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread4::GetCurrentCustomDebuggerNotification']/*"/>	
        /// <unmanaged>GetCurrentCustomDebuggerNotification</unmanaged>	
        /// <unmanaged-short>GetCurrentCustomDebuggerNotification</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugThread4::GetCurrentCustomDebuggerNotification([In] ICorDebugValue** ppNotificationObject)</unmanaged>
        public CoreDebugger.Value CurrentCustomDebuggerNotification
        {
            get { CoreDebugger.Value __output__; GetCurrentCustomDebuggerNotification(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread4::HasUnhandledException']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread4::HasUnhandledException()</unmanaged>	
        /// <unmanaged-short>ICorDebugThread4::HasUnhandledException</unmanaged-short>	
        public void HasUnhandledException()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="blockingObjectEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread4::GetBlockingObjects']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread4::GetBlockingObjects([In] ICorDebugBlockingObjectEnum** ppBlockingObjectEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread4::GetBlockingObjects</unmanaged-short>	
        internal void GetBlockingObjects(out CoreDebugger.BlockingObjectEnum blockingObjectEnumOut)
        {
            unsafe
            {
                IntPtr blockingObjectEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &blockingObjectEnumOut_, ((void**)(*(void**)_nativePointer))[4]);
                blockingObjectEnumOut = (blockingObjectEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.BlockingObjectEnum(blockingObjectEnumOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="notificationObjectOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThread4::GetCurrentCustomDebuggerNotification']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThread4::GetCurrentCustomDebuggerNotification([In] ICorDebugValue** ppNotificationObject)</unmanaged>	
        /// <unmanaged-short>ICorDebugThread4::GetCurrentCustomDebuggerNotification</unmanaged-short>	
        internal void GetCurrentCustomDebuggerNotification(out CoreDebugger.Value notificationObjectOut)
        {
            unsafe
            {
                IntPtr notificationObjectOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &notificationObjectOut_, ((void**)(*(void**)_nativePointer))[5]);
                notificationObjectOut = (notificationObjectOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(notificationObjectOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThreadEnum']/*"/>	
    /// <unmanaged>ICorDebugThreadEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugThreadEnum</unmanaged-short>	
    [Guid("CC7BCB06-8A68-11d2-983C-0000F808342D")]
    public partial class ThreadEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ThreadEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ThreadEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ThreadEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ThreadEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ThreadEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="threads">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugThreadEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugThreadEnum::Next([In] unsigned int celt,[In] ICorDebugThread** threads,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugThreadEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.Thread threads, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr threads_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &threads_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                threads = (threads_ == IntPtr.Zero) ? null : new CoreDebugger.Thread(threads_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType']/*"/>	
    /// <unmanaged>ICorDebugType</unmanaged>	
    /// <unmanaged-short>ICorDebugType</unmanaged-short>	
    [Guid("D613F0BB-ACE1-4c19-BD72-E4C08D5DA7F5")]
    public partial class Type : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Type"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Type(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Type"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Type(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Type(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType::GetClass']/*"/>	
        /// <unmanaged>GetClass</unmanaged>	
        /// <unmanaged-short>GetClass</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugType::GetClass([In] ICorDebugClass** ppClass)</unmanaged>
        public CoreDebugger.Class Class
        {
            get { CoreDebugger.Class __output__; GetClass(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType::GetFirstTypeParameter']/*"/>	
        /// <unmanaged>GetFirstTypeParameter</unmanaged>	
        /// <unmanaged-short>GetFirstTypeParameter</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugType::GetFirstTypeParameter([In] ICorDebugType** value)</unmanaged>
        public CoreDebugger.Type FirstTypeParameter
        {
            get { CoreDebugger.Type __output__; GetFirstTypeParameter(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType::GetBase']/*"/>	
        /// <unmanaged>GetBase</unmanaged>	
        /// <unmanaged-short>GetBase</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugType::GetBase([In] ICorDebugType** pBase)</unmanaged>
        public CoreDebugger.Type Base
        {
            get { CoreDebugger.Type __output__; GetBase(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="ty">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType::GetType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugType::GetType([In] unsigned int* ty)</unmanaged>	
        /// <unmanaged-short>ICorDebugType::GetType</unmanaged-short>	
        public void GetType(int ty)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &ty, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="classOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType::GetClass']/*"/>	
        /// <unmanaged>HRESULT ICorDebugType::GetClass([In] ICorDebugClass** ppClass)</unmanaged>	
        /// <unmanaged-short>ICorDebugType::GetClass</unmanaged-short>	
        internal void GetClass(out CoreDebugger.Class classOut)
        {
            unsafe
            {
                IntPtr classOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &classOut_, ((void**)(*(void**)_nativePointer))[4]);
                classOut = (classOut_ == IntPtr.Zero) ? null : new CoreDebugger.Class(classOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="tyParEnumOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType::EnumerateTypeParameters']/*"/>	
        /// <unmanaged>HRESULT ICorDebugType::EnumerateTypeParameters([In] ICorDebugTypeEnum** ppTyParEnum)</unmanaged>	
        /// <unmanaged-short>ICorDebugType::EnumerateTypeParameters</unmanaged-short>	
        public void EnumerateTypeParameters(out CoreDebugger.TypeEnum tyParEnumOut)
        {
            unsafe
            {
                IntPtr tyParEnumOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &tyParEnumOut_, ((void**)(*(void**)_nativePointer))[5]);
                tyParEnumOut = (tyParEnumOut_ == IntPtr.Zero) ? null : new CoreDebugger.TypeEnum(tyParEnumOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="value">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType::GetFirstTypeParameter']/*"/>	
        /// <unmanaged>HRESULT ICorDebugType::GetFirstTypeParameter([In] ICorDebugType** value)</unmanaged>	
        /// <unmanaged-short>ICorDebugType::GetFirstTypeParameter</unmanaged-short>	
        internal void GetFirstTypeParameter(out CoreDebugger.Type value)
        {
            unsafe
            {
                IntPtr value_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &value_, ((void**)(*(void**)_nativePointer))[6]);
                value = (value_ == IntPtr.Zero) ? null : new CoreDebugger.Type(value_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="baseRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType::GetBase']/*"/>	
        /// <unmanaged>HRESULT ICorDebugType::GetBase([In] ICorDebugType** pBase)</unmanaged>	
        /// <unmanaged-short>ICorDebugType::GetBase</unmanaged-short>	
        internal void GetBase(out CoreDebugger.Type baseRef)
        {
            unsafe
            {
                IntPtr baseRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &baseRef_, ((void**)(*(void**)_nativePointer))[7]);
                baseRef = (baseRef_ == IntPtr.Zero) ? null : new CoreDebugger.Type(baseRef_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fieldDef">No documentation.</param>	
        /// <param name="frameRef">No documentation.</param>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType::GetStaticFieldValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugType::GetStaticFieldValue([In] unsigned int fieldDef,[In] ICorDebugFrame* pFrame,[In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugType::GetStaticFieldValue</unmanaged-short>	
        public void GetStaticFieldValue(int fieldDef, CoreDebugger.Frame frameRef, out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, fieldDef, (void*)((frameRef == null) ? IntPtr.Zero : frameRef.NativePointer), &valueOut_, ((void**)(*(void**)_nativePointer))[8]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="nRankRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType::GetRank']/*"/>	
        /// <unmanaged>HRESULT ICorDebugType::GetRank([In] unsigned int* pnRank)</unmanaged>	
        /// <unmanaged-short>ICorDebugType::GetRank</unmanaged-short>	
        public void GetRank(int nRankRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &nRankRef, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType2']/*"/>	
    /// <unmanaged>ICorDebugType2</unmanaged>	
    /// <unmanaged-short>ICorDebugType2</unmanaged-short>	
    [Guid("e6e91d79-693d-48bc-b417-8284b4f10fb5")]
    public partial class Type2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Type2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Type2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Type2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Type2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Type2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="id">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugType2::GetTypeID']/*"/>	
        /// <unmanaged>HRESULT ICorDebugType2::GetTypeID([In] COR_TYPEID* id)</unmanaged>	
        /// <unmanaged-short>ICorDebugType2::GetTypeID</unmanaged-short>	
        public void GetTypeID(CoreDebugger.CorTypeid id)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &id, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugTypeEnum']/*"/>	
    /// <unmanaged>ICorDebugTypeEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugTypeEnum</unmanaged-short>	
    [Guid("10F27499-9DF2-43ce-8333-A321D7C99CB4")]
    public partial class TypeEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.TypeEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public TypeEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.TypeEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.TypeEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.TypeEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="values">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugTypeEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugTypeEnum::Next([In] unsigned int celt,[In] ICorDebugType** values,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugTypeEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.Type values, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr values_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &values_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                values = (values_ == IntPtr.Zero) ? null : new CoreDebugger.Type(values_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValue']/*"/>	
    /// <unmanaged>ICorDebugValue</unmanaged>	
    /// <unmanaged-short>ICorDebugValue</unmanaged-short>	
    [Guid("CC7BCAF7-8A68-11d2-983C-0000F808342D")]
    public partial class Value : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Value"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Value(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Value"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Value(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Value(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="typeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValue::GetType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugValue::GetType([In] unsigned int* pType)</unmanaged>	
        /// <unmanaged-short>ICorDebugValue::GetType</unmanaged-short>	
        public void GetType(int typeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &typeRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="sizeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValue::GetSize']/*"/>	
        /// <unmanaged>HRESULT ICorDebugValue::GetSize([In] unsigned int* pSize)</unmanaged>	
        /// <unmanaged-short>ICorDebugValue::GetSize</unmanaged-short>	
        public void GetSize(int sizeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &sizeRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="addressRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValue::GetAddress']/*"/>	
        /// <unmanaged>HRESULT ICorDebugValue::GetAddress([In] unsigned longlong* pAddress)</unmanaged>	
        /// <unmanaged-short>ICorDebugValue::GetAddress</unmanaged-short>	
        public void GetAddress(long addressRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &addressRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="breakpointOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValue::CreateBreakpoint']/*"/>	
        /// <unmanaged>HRESULT ICorDebugValue::CreateBreakpoint([In] ICorDebugValueBreakpoint** ppBreakpoint)</unmanaged>	
        /// <unmanaged-short>ICorDebugValue::CreateBreakpoint</unmanaged-short>	
        public void CreateBreakpoint(out CoreDebugger.ValueBreakpoint breakpointOut)
        {
            unsafe
            {
                IntPtr breakpointOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &breakpointOut_, ((void**)(*(void**)_nativePointer))[6]);
                breakpointOut = (breakpointOut_ == IntPtr.Zero) ? null : new CoreDebugger.ValueBreakpoint(breakpointOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValue2']/*"/>	
    /// <unmanaged>ICorDebugValue2</unmanaged>	
    /// <unmanaged-short>ICorDebugValue2</unmanaged-short>	
    [Guid("5E0B54E7-D88A-4626-9420-A691E0A78B49")]
    public partial class Value2 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Value2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Value2(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Value2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Value2(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Value2(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValue2::GetExactType']/*"/>	
        /// <unmanaged>GetExactType</unmanaged>	
        /// <unmanaged-short>GetExactType</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugValue2::GetExactType([In] ICorDebugType** ppType)</unmanaged>
        public CoreDebugger.Type ExactType
        {
            get { CoreDebugger.Type __output__; GetExactType(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="typeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValue2::GetExactType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugValue2::GetExactType([In] ICorDebugType** ppType)</unmanaged>	
        /// <unmanaged-short>ICorDebugValue2::GetExactType</unmanaged-short>	
        internal void GetExactType(out CoreDebugger.Type typeOut)
        {
            unsafe
            {
                IntPtr typeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &typeOut_, ((void**)(*(void**)_nativePointer))[3]);
                typeOut = (typeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Type(typeOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValue3']/*"/>	
    /// <unmanaged>ICorDebugValue3</unmanaged>	
    /// <unmanaged-short>ICorDebugValue3</unmanaged-short>	
    [Guid("565005FC-0F8A-4F3E-9EDB-83102B156595")]
    public partial class Value3 : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.Value3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Value3(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.Value3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.Value3(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.Value3(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="sizeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValue3::GetSize64']/*"/>	
        /// <unmanaged>HRESULT ICorDebugValue3::GetSize64([In] unsigned longlong* pSize)</unmanaged>	
        /// <unmanaged-short>ICorDebugValue3::GetSize64</unmanaged-short>	
        public void GetSize64(long sizeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &sizeRef, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValueBreakpoint']/*"/>	
    /// <unmanaged>ICorDebugValueBreakpoint</unmanaged>	
    /// <unmanaged-short>ICorDebugValueBreakpoint</unmanaged-short>	
    [Guid("CC7BCAEB-8A68-11d2-983C-0000F808342D")]
    public partial class ValueBreakpoint : CoreDebugger.Breakpoint
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ValueBreakpoint"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ValueBreakpoint(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ValueBreakpoint"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ValueBreakpoint(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ValueBreakpoint(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValueBreakpoint::GetValue']/*"/>	
        /// <unmanaged>GetValue</unmanaged>	
        /// <unmanaged-short>GetValue</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugValueBreakpoint::GetValue([In] ICorDebugValue** ppValue)</unmanaged>
        public CoreDebugger.Value Value
        {
            get { CoreDebugger.Value __output__; GetValue(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="valueOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValueBreakpoint::GetValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugValueBreakpoint::GetValue([In] ICorDebugValue** ppValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugValueBreakpoint::GetValue</unmanaged-short>	
        internal void GetValue(out CoreDebugger.Value valueOut)
        {
            unsafe
            {
                IntPtr valueOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &valueOut_, ((void**)(*(void**)_nativePointer))[5]);
                valueOut = (valueOut_ == IntPtr.Zero) ? null : new CoreDebugger.Value(valueOut_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValueEnum']/*"/>	
    /// <unmanaged>ICorDebugValueEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugValueEnum</unmanaged-short>	
    [Guid("CC7BCB0A-8A68-11d2-983C-0000F808342D")]
    public partial class ValueEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.ValueEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ValueEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.ValueEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.ValueEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.ValueEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="values">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugValueEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugValueEnum::Next([In] unsigned int celt,[In] ICorDebugValue** values,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugValueEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.Value values, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr values_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &values_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                values = (values_ == IntPtr.Zero) ? null : new CoreDebugger.Value(values_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableHome']/*"/>	
    /// <unmanaged>ICorDebugVariableHome</unmanaged>	
    /// <unmanaged-short>ICorDebugVariableHome</unmanaged-short>	
    [Guid("50847b8d-f43f-41b0-924c-6383a5f2278b")]
    public partial class VariableHome : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.VariableHome"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public VariableHome(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.VariableHome"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.VariableHome(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.VariableHome(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableHome::GetCode']/*"/>	
        /// <unmanaged>GetCode</unmanaged>	
        /// <unmanaged-short>GetCode</unmanaged-short>	
        /// <unmanaged>HRESULT ICorDebugVariableHome::GetCode([In] ICorDebugCode** ppCode)</unmanaged>
        public CoreDebugger.Code Code
        {
            get { CoreDebugger.Code __output__; GetCode(out __output__); return __output__; }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="codeOut">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableHome::GetCode']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableHome::GetCode([In] ICorDebugCode** ppCode)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableHome::GetCode</unmanaged-short>	
        internal void GetCode(out CoreDebugger.Code codeOut)
        {
            unsafe
            {
                IntPtr codeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &codeOut_, ((void**)(*(void**)_nativePointer))[3]);
                codeOut = (codeOut_ == IntPtr.Zero) ? null : new CoreDebugger.Code(codeOut_);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="slotIndexRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableHome::GetSlotIndex']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableHome::GetSlotIndex([In] unsigned int* pSlotIndex)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableHome::GetSlotIndex</unmanaged-short>	
        public void GetSlotIndex(int slotIndexRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &slotIndexRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="argumentIndexRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableHome::GetArgumentIndex']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableHome::GetArgumentIndex([In] unsigned int* pArgumentIndex)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableHome::GetArgumentIndex</unmanaged-short>	
        public void GetArgumentIndex(int argumentIndexRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &argumentIndexRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="startOffsetRef">No documentation.</param>	
        /// <param name="endOffsetRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableHome::GetLiveRange']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableHome::GetLiveRange([In] unsigned int* pStartOffset,[In] unsigned int* pEndOffset)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableHome::GetLiveRange</unmanaged-short>	
        public void GetLiveRange(int startOffsetRef, int endOffsetRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &startOffsetRef, &endOffsetRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="locationTypeRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableHome::GetLocationType']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableHome::GetLocationType([In] VariableLocationType* pLocationType)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableHome::GetLocationType</unmanaged-short>	
        public void GetLocationType(CoreDebugger.VariableLocationType locationTypeRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &locationTypeRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="registerRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableHome::GetRegister']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableHome::GetRegister([In] CorDebugRegister* pRegister)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableHome::GetRegister</unmanaged-short>	
        public void GetRegister(CoreDebugger.CorDebugRegister registerRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &registerRef, ((void**)(*(void**)_nativePointer))[8]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="offsetRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableHome::GetOffset']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableHome::GetOffset([In] int* pOffset)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableHome::GetOffset</unmanaged-short>	
        public void GetOffset(int offsetRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &offsetRef, ((void**)(*(void**)_nativePointer))[9]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableHomeEnum']/*"/>	
    /// <unmanaged>ICorDebugVariableHomeEnum</unmanaged>	
    /// <unmanaged-short>ICorDebugVariableHomeEnum</unmanaged-short>	
    [Guid("e76b7a57-4f7a-4309-85a7-5d918c3deaf7")]
    public partial class VariableHomeEnum : CoreDebugger.Enum
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.VariableHomeEnum"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public VariableHomeEnum(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.VariableHomeEnum"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.VariableHomeEnum(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.VariableHomeEnum(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="celt">No documentation.</param>	
        /// <param name="homes">No documentation.</param>	
        /// <param name="celtFetchedRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableHomeEnum::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableHomeEnum::Next([In] unsigned int celt,[In] ICorDebugVariableHome** homes,[In] unsigned int* pceltFetched)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableHomeEnum::Next</unmanaged-short>	
        public void Next(int celt, out CoreDebugger.VariableHome homes, int celtFetchedRef)
        {
            unsafe
            {
                IntPtr homes_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, celt, &homes_, &celtFetchedRef, ((void**)(*(void**)_nativePointer))[7]);
                homes = (homes_ == IntPtr.Zero) ? null : new CoreDebugger.VariableHome(homes_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableSymbol']/*"/>	
    /// <unmanaged>ICorDebugVariableSymbol</unmanaged>	
    /// <unmanaged-short>ICorDebugVariableSymbol</unmanaged-short>	
    [Guid("707E8932-1163-48D9-8A93-F5B1F480FBB7")]
    public partial class VariableSymbol : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.VariableSymbol"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public VariableSymbol(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.VariableSymbol"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.VariableSymbol(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.VariableSymbol(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cchName">No documentation.</param>	
        /// <param name="cchNameRef">No documentation.</param>	
        /// <param name="szName">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableSymbol::GetName']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableSymbol::GetName([In] unsigned int cchName,[In] unsigned int* pcchName,[In] wchar_t* szName)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableSymbol::GetName</unmanaged-short>	
        public void GetName(int cchName, int cchNameRef, string szName)
        {
            unsafe
            {
                SharpDX.Result __result__;
                fixed (char* szName_ = szName)
                    __result__ =
                    CoreDebugger.LocalInterop.Calliint(_nativePointer, cchName, &cchNameRef, (void*)szName_, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="cbValueRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableSymbol::GetSize']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableSymbol::GetSize([In] unsigned int* pcbValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableSymbol::GetSize</unmanaged-short>	
        public void GetSize(int cbValueRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &cbValueRef, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="offset">No documentation.</param>	
        /// <param name="cbContext">No documentation.</param>	
        /// <param name="context">No documentation.</param>	
        /// <param name="cbValue">No documentation.</param>	
        /// <param name="cbValueRef">No documentation.</param>	
        /// <param name="valueRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableSymbol::GetValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableSymbol::GetValue([In] unsigned int offset,[In] unsigned int cbContext,[In] unsigned char* context,[In] unsigned int cbValue,[In] unsigned int* pcbValue,[In] unsigned char* pValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableSymbol::GetValue</unmanaged-short>	
        public void GetValue(int offset, int cbContext, byte context, int cbValue, int cbValueRef, byte valueRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, offset, cbContext, &context, cbValue, &cbValueRef, &valueRef, ((void**)(*(void**)_nativePointer))[5]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="offset">No documentation.</param>	
        /// <param name="threadID">No documentation.</param>	
        /// <param name="cbContext">No documentation.</param>	
        /// <param name="context">No documentation.</param>	
        /// <param name="cbValue">No documentation.</param>	
        /// <param name="valueRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableSymbol::SetValue']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableSymbol::SetValue([In] unsigned int offset,[In] unsigned int threadID,[In] unsigned int cbContext,[In] unsigned char* context,[In] unsigned int cbValue,[In] unsigned char* pValue)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableSymbol::SetValue</unmanaged-short>	
        public void SetValue(int offset, int threadID, int cbContext, byte context, int cbValue, byte valueRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, offset, threadID, cbContext, &context, cbValue, &valueRef, ((void**)(*(void**)_nativePointer))[6]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="slotIndexRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVariableSymbol::GetSlotIndex']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVariableSymbol::GetSlotIndex([In] unsigned int* pSlotIndex)</unmanaged>	
        /// <unmanaged-short>ICorDebugVariableSymbol::GetSlotIndex</unmanaged-short>	
        public void GetSlotIndex(int slotIndexRef)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, &slotIndexRef, ((void**)(*(void**)_nativePointer))[7]);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVirtualUnwinder']/*"/>	
    /// <unmanaged>ICorDebugVirtualUnwinder</unmanaged>	
    /// <unmanaged-short>ICorDebugVirtualUnwinder</unmanaged-short>	
    [Guid("F69126B7-C787-4F6B-AE96-A569786FC670")]
    public partial class VirtualUnwinder : SharpDX.ComObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDebugger.VirtualUnwinder"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public VirtualUnwinder(IntPtr nativePtr) : base(nativePtr)
        {
        }

        /// <summary>
        /// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="CoreDebugger.VirtualUnwinder"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
        /// </summary>
        /// <param name="nativePointer">The native pointer.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static explicit operator CoreDebugger.VirtualUnwinder(IntPtr nativePointer)
        {
            return nativePointer == IntPtr.Zero ? null : new CoreDebugger.VirtualUnwinder(nativePointer);
        }


        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="contextFlags">No documentation.</param>	
        /// <param name="cbContextBuf">No documentation.</param>	
        /// <param name="contextSize">No documentation.</param>	
        /// <param name="contextBuf">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVirtualUnwinder::GetContext']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVirtualUnwinder::GetContext([In] unsigned int contextFlags,[In] unsigned int cbContextBuf,[In] unsigned int* contextSize,[In] unsigned char* contextBuf)</unmanaged>	
        /// <unmanaged-short>ICorDebugVirtualUnwinder::GetContext</unmanaged-short>	
        public void GetContext(int contextFlags, int cbContextBuf, int contextSize, byte contextBuf)
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, contextFlags, cbContextBuf, &contextSize, &contextBuf, ((void**)(*(void**)_nativePointer))[3]);
                __result__.CheckError();
            }
        }

        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ICorDebugVirtualUnwinder::Next']/*"/>	
        /// <unmanaged>HRESULT ICorDebugVirtualUnwinder::Next()</unmanaged>	
        /// <unmanaged-short>ICorDebugVirtualUnwinder::Next</unmanaged-short>	
        public void Next()
        {
            unsafe
            {
                SharpDX.Result __result__;
                __result__ =
                CoreDebugger.LocalInterop.Calliint(_nativePointer, ((void**)(*(void**)_nativePointer))[4]);
                __result__.CheckError();
            }
        }
    }
}

#endif
